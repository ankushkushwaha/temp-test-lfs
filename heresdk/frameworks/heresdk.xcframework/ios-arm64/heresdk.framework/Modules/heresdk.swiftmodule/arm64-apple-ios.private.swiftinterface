// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name heresdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreGraphics
import Foundation
import GLKit
import Network
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
@_exported import heresdk
import os.log
import os
@_hasMissingDesignatedInitializers public class CollectionOf<T> : Swift.Collection {
  public typealias Element = T
  public typealias Index = Swift.UInt64
  public var startIndex: heresdk.CollectionOf<T>.Index {
    get
  }
  public var endIndex: heresdk.CollectionOf<T>.Index {
    get
  }
  @objc deinit
  public func index(after i: heresdk.CollectionOf<T>.Index) -> heresdk.CollectionOf<T>.Index
  public subscript(position: heresdk.CollectionOf<T>.Index) -> heresdk.CollectionOf<T>.Element {
    get
  }
  public typealias Indices = Swift.DefaultIndices<heresdk.CollectionOf<T>>
  public typealias Iterator = Swift.IndexingIterator<heresdk.CollectionOf<T>>
  public typealias SubSequence = Swift.Slice<heresdk.CollectionOf<T>>
}
public struct Anchor2D : Swift.Hashable {
  public var horizontal: Swift.Double
  public var vertical: Swift.Double
  public init()
  public init(horizontal: Swift.Double, vertical: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Anchor2D, b: heresdk.Anchor2D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct AngleRange : Swift.Hashable {
  public let start: Swift.Double
  public let extent: Swift.Double
  public init(start: Swift.Double, extent: Swift.Double)
  public init()
  public static func fromMinMaxDegreesClockwise(min: Swift.Double, max: Swift.Double) -> heresdk.AngleRange
  public static func fromDirectionDegreesClockwise(center: Swift.Double, extent: Swift.Double) -> heresdk.AngleRange
  public func inRange(angleClockwiseInDegreesFromNorth: Swift.Double) -> Swift.Bool
  public func closestInRange(angleClockwiseInDegreesFromNorth: Swift.Double) -> Swift.Double
  public func max() -> Swift.Double
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.AngleRange, b: heresdk.AngleRange) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CustomMetadataValue : AnyObject {
  func getTag() -> Swift.String
}
public struct GeoBox : Swift.Hashable {
  public let southWestCorner: heresdk.GeoCoordinates
  public let northEastCorner: heresdk.GeoCoordinates
  public init(southWestCorner: heresdk.GeoCoordinates, northEastCorner: heresdk.GeoCoordinates)
  public static func containing(geoCoordinates: [heresdk.GeoCoordinates]) -> heresdk.GeoBox?
  public func envelope(geoBox: heresdk.GeoBox) -> heresdk.GeoBox
  public static func envelopeGeoBoxes(geoBoxes: [heresdk.GeoBox]) -> heresdk.GeoBox?
  public func intersects(geoBox: heresdk.GeoBox) -> Swift.Bool
  public func intersection(geoBox: heresdk.GeoBox) -> [heresdk.GeoBox]
  public static func intersection(geoBoxes: [heresdk.GeoBox]) -> [heresdk.GeoBox]
  public func contains(geoBox: heresdk.GeoBox) -> Swift.Bool
  public func contains(geoCoordinates: heresdk.GeoCoordinates) -> Swift.Bool
  public func expandedBy(southMeters: Swift.Double, westMeters: Swift.Double, northMeters: Swift.Double, eastMeters: Swift.Double) throws -> heresdk.GeoBox
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeoBox, b: heresdk.GeoBox) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct GeoCircle : Swift.Hashable {
  public let center: heresdk.GeoCoordinates
  public let radiusInMeters: Swift.Double
  public init(center: heresdk.GeoCoordinates, radiusInMeters: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeoCircle, b: heresdk.GeoCircle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct GeoCoordinates : Swift.Hashable {
  public let latitude: Swift.Double
  public let longitude: Swift.Double
  public let altitude: Swift.Double?
  public init(latitude: Swift.Double, longitude: Swift.Double, altitude: Swift.Double)
  public init(latitude: Swift.Double, longitude: Swift.Double)
  public func distance(to point: heresdk.GeoCoordinates) -> Swift.Double
  public static func fromString(input: Swift.String) -> heresdk.GeoCoordinates?
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct GeoCoordinatesUpdate : Swift.Hashable {
  public let latitude: Swift.Double?
  public let longitude: Swift.Double?
  public let altitude: Swift.Double?
  public init(latitude: Swift.Double?, longitude: Swift.Double?)
  public init(latitude: Swift.Double?, longitude: Swift.Double?, altitude: Swift.Double?)
  public init(_ coordinates: heresdk.GeoCoordinates)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeoCoordinatesUpdate, b: heresdk.GeoCoordinatesUpdate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct GeoOrientation : Swift.Hashable {
  public let bearing: Swift.Double
  public let tilt: Swift.Double
  public init(bearing: Swift.Double, tilt: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeoOrientation, b: heresdk.GeoOrientation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct GeoOrientationUpdate : Swift.Hashable {
  public let bearing: Swift.Double?
  public let tilt: Swift.Double?
  public init(bearing: Swift.Double?, tilt: Swift.Double?)
  public init(_ orientation: heresdk.GeoOrientation)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeoOrientationUpdate, b: heresdk.GeoOrientationUpdate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct GeoPolygon : Swift.Hashable {
  public let vertices: [heresdk.GeoCoordinates]
  public let innerBoundaries: [[heresdk.GeoCoordinates]]
  public init(vertices: [heresdk.GeoCoordinates]) throws
  public init(vertices: [heresdk.GeoCoordinates], innerBoundaries: [[heresdk.GeoCoordinates]]) throws
  public init(geoCircle: heresdk.GeoCircle)
  public init(geoBox: heresdk.GeoBox)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeoPolygon, b: heresdk.GeoPolygon) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct GeoPolyline : Swift.Hashable {
  public let vertices: [heresdk.GeoCoordinates]
  public init(vertices: [heresdk.GeoCoordinates]) throws
  public init(geoBox: heresdk.GeoBox)
  public func getNearestIndexTo(point: heresdk.GeoCoordinates) -> Swift.UInt32
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeoPolyline, b: heresdk.GeoPolyline) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Metadata {
  public init()
  @objc deinit
  public func getCustomValue(key: Swift.String) -> heresdk.CustomMetadataValue?
  public func getDouble(key: Swift.String) -> Swift.Double?
  public func getGeoCoordinates(key: Swift.String) -> heresdk.GeoCoordinates?
  public func getInteger(key: Swift.String) -> Swift.Int32?
  public func getString(key: Swift.String) -> Swift.String?
  public func getType(key: Swift.String) -> heresdk.MetadataType?
  public func removeValue(key: Swift.String)
  public func setCustomValue(key: Swift.String, value: heresdk.CustomMetadataValue)
  public func setDouble(key: Swift.String, value: Swift.Double)
  public func setGeoCoordinates(key: Swift.String, value: heresdk.GeoCoordinates)
  public func setInteger(key: Swift.String, value: Swift.Int32)
  public func setString(key: Swift.String, value: Swift.String)
}
extension heresdk.Metadata : Swift.Hashable {
  public static func == (lhs: heresdk.Metadata, rhs: heresdk.Metadata) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MetadataType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case custom
  case double
  case geoCoordinates
  case integer
  case string
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.MetadataType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.MetadataType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct NamedColor {
  public static let white: UIKit.UIColor
  public static let black: UIKit.UIColor
}
public struct PickedPlace : Swift.Hashable {
  public var name: Swift.String
  public var coordinates: heresdk.GeoCoordinates
  public var placeCategoryId: Swift.String
  public init(name: Swift.String, coordinates: heresdk.GeoCoordinates, placeCategoryId: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.PickedPlace, b: heresdk.PickedPlace) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Point2D : Swift.Hashable {
  public var x: Swift.Double
  public var y: Swift.Double
  public init(x: Swift.Double = 0.0, y: Swift.Double = 0.0)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Point2D, b: heresdk.Point2D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Point3D : Swift.Hashable {
  public var x: Swift.Double
  public var y: Swift.Double
  public var z: Swift.Double
  public init(x: Swift.Double = 0.0, y: Swift.Double = 0.0, z: Swift.Double = 0.0)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Point3D, b: heresdk.Point3D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Rectangle2D : Swift.Hashable {
  public var origin: heresdk.Point2D
  public var size: heresdk.Size2D
  public init(origin: heresdk.Point2D, size: heresdk.Size2D)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Rectangle2D, b: heresdk.Rectangle2D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum RouteType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case typeUnknown
  case level1Road
  case level2Road
  case level3Road
  case level4Road
  case level5Road
  case level6Road
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.RouteType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.RouteType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct Size2D : Swift.Hashable {
  public var width: Swift.Double
  public var height: Swift.Double
  public init(width: Swift.Double = 0.0, height: Swift.Double = 0.0)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Size2D, b: heresdk.Size2D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias InstantiationError = heresdk.InstantiationErrorCode
extension heresdk.InstantiationErrorCode : Swift.Error {
}
public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case illegalArguments
  case failed
  case sharedSdkEngineNotInstantiated
  case cacheFolderAccessDenied
  case persistentMapStorageFolderAccessDenied
  case failedToLockCacheFolder
  case failedToCreateAnalyticsService
  case accessKeyContainsIllegalSymbol
  case accessKeySecretContainsIllegalSymbol
  case layerConfigurationMismatch
  case sdkEngineAlreadyDisposed
  case invalidCatalogConfiguration
  case dataFolderAccessDenied
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.InstantiationErrorCode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.InstantiationErrorCode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct BusSpecifications : Swift.Hashable {
  public var grossWeightInKilograms: Swift.Int32?
  public var heightInCentimeters: Swift.Int32?
  public var widthInCentimeters: Swift.Int32?
  public var lengthInCentimeters: Swift.Int32?
  public var lastCharacterOfLicensePlate: Swift.String?
  public init(grossWeightInKilograms: Swift.Int32? = nil, heightInCentimeters: Swift.Int32? = nil, widthInCentimeters: Swift.Int32? = nil, lengthInCentimeters: Swift.Int32? = nil, lastCharacterOfLicensePlate: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.BusSpecifications, b: heresdk.BusSpecifications) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct CarSpecifications : Swift.Hashable {
  public var grossWeightInKilograms: Swift.Int32?
  public var heightInCentimeters: Swift.Int32?
  public var widthInCentimeters: Swift.Int32?
  public var lengthInCentimeters: Swift.Int32?
  public var axleCount: Swift.Int32?
  public var trailerCount: Swift.Int32?
  public var trailerAxleCount: Swift.Int32?
  public init(grossWeightInKilograms: Swift.Int32? = nil, heightInCentimeters: Swift.Int32? = nil, widthInCentimeters: Swift.Int32? = nil, lengthInCentimeters: Swift.Int32? = nil, axleCount: Swift.Int32? = nil, trailerCount: Swift.Int32? = nil, trailerAxleCount: Swift.Int32? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.CarSpecifications, b: heresdk.CarSpecifications) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum HazardousMaterial : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case explosive
  case gas
  case flammable
  case combustible
  case organic
  case poison
  case radioactive
  case corrosive
  case poisonousInhalation
  case harmfulToWater
  case other
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.HazardousMaterial]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.HazardousMaterial] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum TruckRoadType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case et4
  case et2
  case a4
  case a2
  case b4
  case b2
  case c
  case d
  case bk1
  case bk2
  case bk3
  case bk4
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TruckRoadType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TruckRoadType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct TruckSpecifications : Swift.Hashable {
  public var grossWeightInKilograms: Swift.Int32?
  public var weightPerAxleInKilograms: Swift.Int32?
  public var weightPerAxleGroup: heresdk.WeightPerAxleGroup?
  public var heightInCentimeters: Swift.Int32?
  public var widthInCentimeters: Swift.Int32?
  public var lengthInCentimeters: Swift.Int32?
  public var axleCount: Swift.Int32?
  public var trailerCount: Swift.Int32?
  public var truckType: heresdk.TruckType
  public var isTruckLight: Swift.Bool
  public var payloadCapacityInKilograms: Swift.Int32?
  public var trailerAxleCount: Swift.Int32?
  public init(grossWeightInKilograms: Swift.Int32? = nil, weightPerAxleInKilograms: Swift.Int32? = nil, weightPerAxleGroup: heresdk.WeightPerAxleGroup? = nil, heightInCentimeters: Swift.Int32? = nil, widthInCentimeters: Swift.Int32? = nil, lengthInCentimeters: Swift.Int32? = nil, axleCount: Swift.Int32? = nil, trailerCount: Swift.Int32? = nil, truckType: heresdk.TruckType = TruckType.straight, isTruckLight: Swift.Bool = false, payloadCapacityInKilograms: Swift.Int32? = nil, trailerAxleCount: Swift.Int32? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TruckSpecifications, b: heresdk.TruckSpecifications) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum TruckType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case straight
  case tractor
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TruckType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TruckType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum TunnelCategory : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case b
  case c
  case d
  case e
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TunnelCategory]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TunnelCategory] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct WeightPerAxleGroup : Swift.Hashable {
  public var singleAxleGroupInKilograms: Swift.Int32?
  public var tandemAxleGroupInKilograms: Swift.Int32?
  public var tripleAxleGroupInKilograms: Swift.Int32?
  public var quadAxleGroupInKilograms: Swift.Int32?
  public var quintAxleGroupInKilograms: Swift.Int32?
  public init(singleAxleGroupInKilograms: Swift.Int32? = nil, tandemAxleGroupInKilograms: Swift.Int32? = nil, tripleAxleGroupInKilograms: Swift.Int32? = nil, quadAxleGroupInKilograms: Swift.Int32? = nil, quintAxleGroupInKilograms: Swift.Int32? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.WeightPerAxleGroup, b: heresdk.WeightPerAxleGroup) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RasterDataSource {
  public init(context: heresdk.MapContext, configuration: heresdk.RasterDataSourceConfiguration)
  public init(context: heresdk.MapContext, configuration: heresdk.RasterDataSourceConfiguration, delegate: heresdk.RasterDataSourceDelegate)
  public init(context: heresdk.MapContext, name: Swift.String, tileSource: heresdk.RasterTileSource)
  public init(context: heresdk.MapContext, name: Swift.String, tileSource: heresdk.RasterTileSource, delegate: heresdk.RasterDataSourceDelegate)
  @objc deinit
  public func changeConfiguration(_ configuration: heresdk.RasterDataSourceConfigurationUpdate)
  public func addDelegate(_ listener: heresdk.RasterDataSourceDelegate)
  public func removeDelegate(_ listener: heresdk.RasterDataSourceDelegate)
  public func removeDelegates()
}
extension heresdk.RasterDataSource : Swift.Hashable {
  public static func == (lhs: heresdk.RasterDataSource, rhs: heresdk.RasterDataSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RasterDataSourceConfiguration {
  public var name: Swift.String
  public var provider: heresdk.RasterDataSourceConfiguration.Provider
  public var cache: heresdk.RasterDataSourceConfiguration.Cache
  public var ignoreExpiredData: Swift.Bool
  public init(name: Swift.String, provider: heresdk.RasterDataSourceConfiguration.Provider, cache: heresdk.RasterDataSourceConfiguration.Cache, ignoreExpiredData: Swift.Bool = false)
  public struct Provider {
    public var urlProvider: heresdk.TileUrlRequestHandler
    public var tilingScheme: heresdk.TilingScheme
    public var storageLevels: [Swift.Int32]
    public var hasAlphaChannel: Swift.Bool
    public var headers: [Swift.String : Swift.String]?
    public init(urlProvider: @escaping heresdk.TileUrlRequestHandler, tilingScheme: heresdk.TilingScheme, storageLevels: [Swift.Int32], hasAlphaChannel: Swift.Bool = false, headers: [Swift.String : Swift.String]? = nil)
  }
  public struct Cache {
    public var path: Swift.String
    public var diskSize: Swift.Int64
    public init(path: Swift.String, diskSize: Swift.Int64 = 33554432)
  }
}
public struct RasterDataSourceConfigurationUpdate {
  public var providerHeaders: [Swift.String : Swift.String]?
  public var ignoreExpiredData: Swift.Bool?
  public var cacheDiskSize: Swift.Int64?
  public init(providerHeaders: [Swift.String : Swift.String]? = nil, ignoreExpiredData: Swift.Bool? = nil, cacheDiskSize: Swift.Int64? = nil)
}
public protocol RasterDataSourceDelegate : AnyObject {
  func onRasterDataSourceReady()
  func onRasterDataSourceError(_ dataSourceError: heresdk.RasterDataSourceError)
}
public enum RasterDataSourceError : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case invalidConfiguration
  case authenticationError
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.RasterDataSourceError]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.RasterDataSourceError] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public protocol RasterTileSource : heresdk.TileSource {
  var tilingScheme: heresdk.TilingScheme { get }
  var storageLevels: [Swift.Int32] { get }
  func getDataVersion(tileKey: heresdk.TileKey) -> heresdk.TileSourceDataVersion
  func addDelegate(_ delegate: heresdk.TileSourceDelegate)
  func removeDelegate(_ delegate: heresdk.TileSourceDelegate)
  func loadTile(tileKey: heresdk.TileKey, completionHandler: heresdk.RasterTileSourceLoadResultHandler) -> heresdk.TileSourceLoadTileRequestHandle?
}
public protocol RasterTileSourceLoadResultHandler : AnyObject {
  func loaded(tileKey: heresdk.TileKey, data: Foundation.Data, metadata: heresdk.TileSourceTileMetadata)
  func failed(_ tileKey: heresdk.TileKey)
}
public struct Anchor2DKeyframe : Swift.Hashable {
  public let value: heresdk.Anchor2D
  public let duration: Foundation.TimeInterval
  public init(value: heresdk.Anchor2D, duration: Foundation.TimeInterval)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Anchor2DKeyframe, b: heresdk.Anchor2DKeyframe) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AnimationDelegate : AnyObject {
  func onAnimationStateChanged(state: heresdk.AnimationState)
}
public enum AnimationState : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case started
  case completed
  case cancelled
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.AnimationState]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.AnimationState] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class Easing {
  public typealias InstantiationError = heresdk.Easing.InstantiationErrorCode
  public init(_ easingFunction: heresdk.EasingFunction)
  public init(_ points: [heresdk.Point2D]) throws
  @objc deinit
  public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case sampledDataPointCountTooSmall
    case sampledDataPointsFirstXValueInvalid
    case sampledDataPointsLastXValueInvalid
    case sampledDataXValueOutOfRange
    case sampledDataXValuesNonMonotonic
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.Easing.InstantiationErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.Easing.InstantiationErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
}
extension heresdk.Easing : Swift.Hashable {
  public static func == (lhs: heresdk.Easing, rhs: heresdk.Easing) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.Easing.InstantiationErrorCode : Swift.Error {
}
public enum EasingFunction : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case linear
  case inQuad
  case outQuad
  case inOutQuad
  case outInQuad
  case inCubic
  case outCubic
  case inOutCubic
  case outInCubic
  case inQuart
  case outQuart
  case inOutQuart
  case outInQuart
  case inQuint
  case outQuint
  case inOutQuint
  case outInQuint
  case inSine
  case outSine
  case inOutSine
  case outInSine
  case inExp
  case outExp
  case inOutExp
  case outInExp
  case inCirc
  case outCirc
  case inOutCirc
  case outInCirc
  case inBack
  case outBack
  case inOutBack
  case outInBack
  case inBounce
  case outBounce
  case inOutBounce
  case outInBounce
  case inElastic
  case outElastic
  case inOutElastic
  case outInElastic
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.EasingFunction]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.EasingFunction] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct GeoCoordinatesKeyframe : Swift.Hashable {
  public let value: heresdk.GeoCoordinates
  public let duration: Foundation.TimeInterval
  public init(value: heresdk.GeoCoordinates, duration: Foundation.TimeInterval)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeoCoordinatesKeyframe, b: heresdk.GeoCoordinatesKeyframe) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct GeoOrientationKeyframe : Swift.Hashable {
  public let value: heresdk.GeoOrientation
  public let duration: Foundation.TimeInterval
  public init(value: heresdk.GeoOrientation, duration: Foundation.TimeInterval)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeoOrientationKeyframe, b: heresdk.GeoOrientationKeyframe) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum KeyframeInterpolationMode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case step
  case linear
  case smooth
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.KeyframeInterpolationMode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.KeyframeInterpolationMode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapItemKeyFrameTrack {
  public typealias InstantiationError = heresdk.MapItemKeyFrameTrack.InstantiationErrorCode
  @objc deinit
  public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case emptyKeyframeList
    case invalidKeyframeDuration
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapItemKeyFrameTrack.InstantiationErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapItemKeyFrameTrack.InstantiationErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func moveTo(keyframes: [heresdk.GeoCoordinatesKeyframe], easing: heresdk.Easing, interpolationMode: heresdk.KeyframeInterpolationMode) throws -> heresdk.MapItemKeyFrameTrack
  public static func polylineProgress(keyframes: [heresdk.ScalarKeyframe], easing: heresdk.Easing, interpolationMode: heresdk.KeyframeInterpolationMode) throws -> heresdk.MapItemKeyFrameTrack
}
extension heresdk.MapItemKeyFrameTrack : Swift.Hashable {
  public static func == (lhs: heresdk.MapItemKeyFrameTrack, rhs: heresdk.MapItemKeyFrameTrack) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapItemKeyFrameTrack.InstantiationErrorCode : Swift.Error {
}
@_hasMissingDesignatedInitializers public class MapMarkerAnimation {
  public typealias InstantiationError = heresdk.MapMarkerAnimation.InstantiationErrorCode
  public init(track: heresdk.MapItemKeyFrameTrack) throws
  @objc deinit
  public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case incompatibleTrack
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapMarkerAnimation.InstantiationErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapMarkerAnimation.InstantiationErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
}
extension heresdk.MapMarkerAnimation : Swift.Hashable {
  public static func == (lhs: heresdk.MapMarkerAnimation, rhs: heresdk.MapMarkerAnimation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapMarkerAnimation.InstantiationErrorCode : Swift.Error {
}
@_hasMissingDesignatedInitializers public class MapPolylineAnimation {
  public typealias InstantiationError = heresdk.MapPolylineAnimation.InstantiationErrorCode
  public init(track: heresdk.MapItemKeyFrameTrack) throws
  @objc deinit
  public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case incompatibleTrack
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapPolylineAnimation.InstantiationErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapPolylineAnimation.InstantiationErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
}
extension heresdk.MapPolylineAnimation : Swift.Hashable {
  public static func == (lhs: heresdk.MapPolylineAnimation, rhs: heresdk.MapPolylineAnimation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapPolylineAnimation.InstantiationErrorCode : Swift.Error {
}
public struct Point2DKeyframe : Swift.Hashable {
  public let value: heresdk.Point2D
  public let duration: Foundation.TimeInterval
  public init(value: heresdk.Point2D, duration: Foundation.TimeInterval)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Point2DKeyframe, b: heresdk.Point2DKeyframe) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ScalarKeyframe : Swift.Hashable {
  public let value: Swift.Double
  public let duration: Foundation.TimeInterval
  public init(value: Swift.Double, duration: Foundation.TimeInterval)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.ScalarKeyframe, b: heresdk.ScalarKeyframe) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct DashPattern : Swift.Hashable {
  public let firstGapLength: Swift.Double
  public let firstDashLength: Swift.Double
  public init(dashLength: Swift.Double)
  public init(gapLength: Swift.Double, dashLength: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.DashPattern, b: heresdk.DashPattern) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum DrawOrderType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case mapSceneAdditionOrderDependent
  case mapSceneAdditionOrderIndependent
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.DrawOrderType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.DrawOrderType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class HereMap {
  public var style: heresdk.Style {
    get
  }
  @objc deinit
  public func addMapIdleDelegate(_ delegate: heresdk.MapIdleDelegate)
  public func removeMapIdleDelegate(_ delegate: heresdk.MapIdleDelegate)
}
extension heresdk.HereMap : Swift.Hashable {
  public static func == (lhs: heresdk.HereMap, rhs: heresdk.HereMap) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum IconProviderAssetType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case ui
  case map
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.IconProviderAssetType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.IconProviderAssetType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum IconProviderError : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case invalidState
  case iconNotFound
  case iconHandlingFailed
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.IconProviderError]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.IconProviderError] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum ImageFormat : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case png
  case svg
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.ImageFormat]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.ImageFormat] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class JsonStyleFactory {
  public typealias InstantiationError = heresdk.JsonStyleFactory.InstantiationErrorDetails
  @objc deinit
  public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case malformedJsonContent
    case invalidJsonStyleSyntax
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.JsonStyleFactory.InstantiationErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.JsonStyleFactory.InstantiationErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct InstantiationErrorDetails {
    public var errorCode: heresdk.JsonStyleFactory.InstantiationErrorCode
    public var errorDescription: Swift.String?
    public init(errorCode: heresdk.JsonStyleFactory.InstantiationErrorCode, errorDescription: Swift.String? = nil)
  }
  public static func createFromString(_ styleString: Swift.String) throws -> heresdk.Style
}
extension heresdk.JsonStyleFactory : Swift.Hashable {
  public static func == (lhs: heresdk.JsonStyleFactory, rhs: heresdk.JsonStyleFactory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.JsonStyleFactory.InstantiationErrorDetails : Swift.Error {
}
public enum LineCap : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case round
  case square
  case butt
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.LineCap]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.LineCap] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapArrow {
  public init(geometry: heresdk.GeoPolyline, widthInPixels: Swift.Double, color: UIKit.UIColor)
  public var measureDependentTailWidth: [heresdk.MapMeasure : Swift.Double] {
    get
    set
  }
  @objc deinit
}
extension heresdk.MapArrow : Swift.Hashable {
  public static func == (lhs: heresdk.MapArrow, rhs: heresdk.MapArrow) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapCamera {
  public typealias DryCameraUpdateHandler = (heresdk.MapCamera.State?) -> Swift.Void
  public var state: heresdk.MapCamera.State {
    get
  }
  public var principalPoint: heresdk.Point2D {
    get
    set
  }
  public var boundingBox: heresdk.GeoBox? {
    get
  }
  public var limits: heresdk.MapCameraLimits {
    get
  }
  @objc deinit
  public struct State {
    public var targetCoordinates: heresdk.GeoCoordinates
    public var orientationAtTarget: heresdk.GeoOrientation
    public var distanceToTargetInMeters: Swift.Double
    public var zoomLevel: Swift.Double
    public init(targetCoordinates: heresdk.GeoCoordinates, orientationAtTarget: heresdk.GeoOrientation, distanceToTargetInMeters: Swift.Double, zoomLevel: Swift.Double)
  }
  public func addDelegate(_ delegate: heresdk.MapCameraDelegate)
  public func removeDelegate(_ delegate: heresdk.MapCameraDelegate)
  public func removeDelegates()
  public func applyUpdate(_ cameraUpdate: heresdk.MapCameraUpdate)
  public func dryApplyUpdate(_ cameraUpdate: heresdk.MapCameraUpdate, completion: @escaping heresdk.MapCamera.DryCameraUpdateHandler)
  public func startAnimation(_ cameraAnimation: heresdk.MapCameraAnimation)
  public func startAnimation(_ cameraAnimation: heresdk.MapCameraAnimation, animationDelegate: heresdk.AnimationDelegate)
  public func cancelAnimation(_ cameraAnimation: heresdk.MapCameraAnimation)
  public func cancelAnimations()
  public func orbitBy(_ delta: heresdk.GeoOrientationUpdate, around origin: heresdk.Point2D)
  public func zoomBy(_ factor: Swift.Double, around origin: heresdk.Point2D)
  public func zoomTo(zoomLevel: Swift.Double)
  public func lookAt(point target: heresdk.GeoCoordinates)
  public func lookAt(point target: heresdk.GeoCoordinates, zoom: heresdk.MapMeasure)
  public func lookAt(point target: heresdk.GeoCoordinates, orientation: heresdk.GeoOrientationUpdate, zoom: heresdk.MapMeasure)
  public func lookAt(area target: heresdk.GeoBox, orientation: heresdk.GeoOrientationUpdate)
  public func lookAt(area target: heresdk.GeoBox, orientation: heresdk.GeoOrientationUpdate, viewRectangle: heresdk.Rectangle2D)
  public func setDistanceToTarget(distanceInMeters: Swift.Double)
  public func setOrientationAtTarget(_ orientation: heresdk.GeoOrientationUpdate)
}
extension heresdk.MapCamera : Swift.Hashable {
  public static func == (lhs: heresdk.MapCamera, rhs: heresdk.MapCamera) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapCameraAnimation {
  public typealias InstantiationError = heresdk.MapCameraAnimation.InstantiationErrorCode
  @objc deinit
  public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case emptyTrackList
    case multipleCameraPositionTracks
    case cameraPositionModifiedByCameraLookatTargetTrack
    case cameraPositionModifiedByCameraLookatOrientationTrack
    case cameraPositionModifiedByCameraLookatDistanceTrack
    case multipleCameraOrientationTracks
    case cameraOrientationModifiedByCameraLookatOrientationTrack
    case cameraOrientationModifiedByCameraLookatDistanceTrack
    case multipleCameraLookatTargetTracks
    case cameraLookatTargetModifiedByCameraPositionTrack
    case cameraLookatTargetModifiedByCameraOrientationTrack
    case multipleCameraLookatOrientationTracks
    case cameraLookatOrientationModifiedByCameraPositionTrack
    case cameraLookatOrientationModifiedByCameraOrientationTrack
    case multipleCameraLookatDistanceTracks
    case cameraLookatDistanceModifiedByCameraPositionTrack
    case cameraLookatDistanceModifiedByCameraOrientationTrack
    case multipleCameraFieldOfViewTracks
    case multipleCameraFocalLengthTracks
    case multipleCameraPrincipalPointTracks
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapCameraAnimation.InstantiationErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapCameraAnimation.InstantiationErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
}
extension heresdk.MapCameraAnimation : Swift.Hashable {
  public static func == (lhs: heresdk.MapCameraAnimation, rhs: heresdk.MapCameraAnimation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapCameraAnimation.InstantiationErrorCode : Swift.Error {
}
@_hasMissingDesignatedInitializers public class MapCameraAnimationFactory {
  @objc deinit
  public static func createAnimation(from cameraUpdate: heresdk.MapCameraUpdate, duration: Foundation.TimeInterval, easing: heresdk.Easing) -> heresdk.MapCameraAnimation
  public static func createAnimation(track: heresdk.MapCameraKeyframeTrack) -> heresdk.MapCameraAnimation
  public static func createAnimation(tracks: [heresdk.MapCameraKeyframeTrack]) throws -> heresdk.MapCameraAnimation
  public static func flyTo(target: heresdk.GeoCoordinatesUpdate, bowFactor: Swift.Double, duration: Foundation.TimeInterval) -> heresdk.MapCameraAnimation
  public static func flyTo(target: heresdk.GeoCoordinatesUpdate, orientation: heresdk.GeoOrientationUpdate, bowFactor: Swift.Double, duration: Foundation.TimeInterval) -> heresdk.MapCameraAnimation
  public static func flyTo(target: heresdk.GeoCoordinatesUpdate, zoom: heresdk.MapMeasure, bowFactor: Swift.Double, duration: Foundation.TimeInterval) -> heresdk.MapCameraAnimation
  public static func flyTo(target: heresdk.GeoCoordinatesUpdate, orientation: heresdk.GeoOrientationUpdate, zoom: heresdk.MapMeasure, bowFactor: Swift.Double, duration: Foundation.TimeInterval) -> heresdk.MapCameraAnimation
}
extension heresdk.MapCameraAnimationFactory : Swift.Hashable {
  public static func == (lhs: heresdk.MapCameraAnimationFactory, rhs: heresdk.MapCameraAnimationFactory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MapCameraDelegate : AnyObject {
  func onMapCameraUpdated(_ cameraState: heresdk.MapCamera.State)
}
@_hasMissingDesignatedInitializers public class MapCameraKeyframeTrack {
  public typealias InstantiationError = heresdk.MapCameraKeyframeTrack.InstantiationErrorCode
  public var interpolationMode: heresdk.KeyframeInterpolationMode {
    get
  }
  @objc deinit
  public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case emptyKeyframeList
    case invalidKeyframeDuration
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapCameraKeyframeTrack.InstantiationErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapCameraKeyframeTrack.InstantiationErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public func getScalarKeyframes() -> [heresdk.ScalarKeyframe]?
  public func getPoint2DKeyframes() -> [heresdk.Point2DKeyframe]?
  public func getAnchor2DKeyframes() -> [heresdk.Anchor2DKeyframe]?
  public func getGeoCoordinatesKeyframes() -> [heresdk.GeoCoordinatesKeyframe]?
  public func getGeoOrientationKeyframes() -> [heresdk.GeoOrientationKeyframe]?
  public static func lookAtDistance(keyframes: [heresdk.ScalarKeyframe], easing: heresdk.Easing, interpolationMode: heresdk.KeyframeInterpolationMode) throws -> heresdk.MapCameraKeyframeTrack
  public static func lookAtTarget(keyframes: [heresdk.GeoCoordinatesKeyframe], easing: heresdk.Easing, interpolationMode: heresdk.KeyframeInterpolationMode) throws -> heresdk.MapCameraKeyframeTrack
  public static func lookAtOrientation(keyframes: [heresdk.GeoOrientationKeyframe], easing: heresdk.Easing, interpolationMode: heresdk.KeyframeInterpolationMode) throws -> heresdk.MapCameraKeyframeTrack
  public static func principalPoint(keyframes: [heresdk.Point2DKeyframe], easing: heresdk.Easing, interpolationMode: heresdk.KeyframeInterpolationMode) throws -> heresdk.MapCameraKeyframeTrack
  public static func normalizedPrincipalPoint(keyframes: [heresdk.Anchor2DKeyframe], easing: heresdk.Easing, interpolationMode: heresdk.KeyframeInterpolationMode) throws -> heresdk.MapCameraKeyframeTrack
  public static func fieldOfView(keyframes: [heresdk.ScalarKeyframe], easing: heresdk.Easing, interpolationMode: heresdk.KeyframeInterpolationMode) throws -> heresdk.MapCameraKeyframeTrack
}
extension heresdk.MapCameraKeyframeTrack : Swift.Hashable {
  public static func == (lhs: heresdk.MapCameraKeyframeTrack, rhs: heresdk.MapCameraKeyframeTrack) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapCameraKeyframeTrack.InstantiationErrorCode : Swift.Error {
}
@_hasMissingDesignatedInitializers public class MapCameraLimits {
  public static let minTilt: Swift.Double
  public static let maxTilt: Swift.Double
  public static let minZoomLevel: Swift.Double
  public static let maxZoomLevel: Swift.Double
  public var tiltRange: heresdk.AngleRange {
    get
    set
  }
  public var bearingRange: heresdk.AngleRange {
    get
    set
  }
  public var zoomRange: heresdk.MapMeasureRange {
    get
    set
  }
  public var targetArea: heresdk.GeoBox? {
    get
    set
  }
  @objc deinit
  public func setBearingRangeAtZoom(_ zoom: heresdk.MapMeasure, bearingRange: heresdk.AngleRange)
  public func clearBearingRanges()
  public func setTiltRangeAtZoom(_ zoom: heresdk.MapMeasure, tiltRange: heresdk.AngleRange)
  public func clearTiltRanges()
}
extension heresdk.MapCameraLimits : Swift.Hashable {
  public static func == (lhs: heresdk.MapCameraLimits, rhs: heresdk.MapCameraLimits) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapCameraUpdate {
  public typealias InstantiationError = heresdk.MapCameraUpdate.InstantiationErrorCode
  @objc deinit
  public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case emptyCompositeCameraUpdateList
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapCameraUpdate.InstantiationErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapCameraUpdate.InstantiationErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
}
extension heresdk.MapCameraUpdate : Swift.Hashable {
  public static func == (lhs: heresdk.MapCameraUpdate, rhs: heresdk.MapCameraUpdate) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapCameraUpdate.InstantiationErrorCode : Swift.Error {
}
@_hasMissingDesignatedInitializers public class MapCameraUpdateFactory {
  @objc deinit
  public static func lookAt(point target: heresdk.GeoCoordinatesUpdate) -> heresdk.MapCameraUpdate
  public static func lookAt(point target: heresdk.GeoCoordinatesUpdate, orientation: heresdk.GeoOrientationUpdate) -> heresdk.MapCameraUpdate
  public static func lookAt(point target: heresdk.GeoCoordinatesUpdate, measure: heresdk.MapMeasure) -> heresdk.MapCameraUpdate
  public static func lookAt(point target: heresdk.GeoCoordinatesUpdate, orientation: heresdk.GeoOrientationUpdate, measure: heresdk.MapMeasure) -> heresdk.MapCameraUpdate
  public static func lookToMatch(point geoPoint: heresdk.GeoCoordinates, viewPoint: heresdk.Point2D, orientation: heresdk.GeoOrientationUpdate, measure: heresdk.MapMeasure) -> heresdk.MapCameraUpdate
  public static func lookToMatch(point geoPoint: heresdk.GeoCoordinates, viewPoint: heresdk.Point2D) -> heresdk.MapCameraUpdate
  public static func lookAt(_ points: [heresdk.GeoCoordinates], viewRectangle: heresdk.Rectangle2D, orientation: heresdk.GeoOrientationUpdate, measureLimit: heresdk.MapMeasure) -> heresdk.MapCameraUpdate
  public static func lookAt(_ target: heresdk.GeoCoordinatesUpdate, orientation: heresdk.GeoOrientationUpdate, points: [heresdk.GeoCoordinates], viewRectangle: heresdk.Rectangle2D, minMeasure: heresdk.MapMeasure, maxMeasure: heresdk.MapMeasure) -> heresdk.MapCameraUpdate
  public static func lookAt(area target: heresdk.GeoBox, orientation: heresdk.GeoOrientationUpdate, viewRectangle: heresdk.Rectangle2D) -> heresdk.MapCameraUpdate
  public static func lookAt(area target: heresdk.GeoBox, viewRectangle: heresdk.Rectangle2D) -> heresdk.MapCameraUpdate
  public static func lookAt(area target: heresdk.GeoBox) -> heresdk.MapCameraUpdate
  public static func panBy(xOffset: Swift.Double, yOffset: Swift.Double) -> heresdk.MapCameraUpdate
  public static func orbitBy(_ delta: heresdk.GeoOrientationUpdate, around origin: heresdk.Point2D) -> heresdk.MapCameraUpdate
  public static func rotateBy(_ delta: heresdk.GeoOrientationUpdate) -> heresdk.MapCameraUpdate
  public static func zoomBy(_ factor: Swift.Double, around origin: heresdk.Point2D) -> heresdk.MapCameraUpdate
  public static func zoomTo(zoomLevel: Swift.Double) -> heresdk.MapCameraUpdate
  public static func setPrincipalPoint(_ principalPoint: heresdk.Point2D) -> heresdk.MapCameraUpdate
  public static func setNormalizedPrincipalPoint(_ principalPoint: heresdk.Anchor2D) -> heresdk.MapCameraUpdate
  public static func setVerticalFieldOfView(_ verticalFieldOfView: Swift.Double) -> heresdk.MapCameraUpdate
  public static func compositeUpdate(_ mapCameraUpdates: [heresdk.MapCameraUpdate]) throws -> heresdk.MapCameraUpdate
}
extension heresdk.MapCameraUpdateFactory : Swift.Hashable {
  public static func == (lhs: heresdk.MapCameraUpdateFactory, rhs: heresdk.MapCameraUpdateFactory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MapContentCategory : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case vehicleRestrictionIcons
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.MapContentCategory]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.MapContentCategory] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum MapContentType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case rasterImage
  case line
  case polygon
  case point
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.MapContentType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.MapContentType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapContext {
  @objc deinit
  public enum ResourceType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case memory
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapContext.ResourceType]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapContext.ResourceType] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public enum FreeResourceSeverity : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case moderate
    case critical
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapContext.FreeResourceSeverity]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapContext.FreeResourceSeverity] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public func freeResource(type: heresdk.MapContext.ResourceType, severity: heresdk.MapContext.FreeResourceSeverity)
}
extension heresdk.MapContext : Swift.Hashable {
  public static func == (lhs: heresdk.MapContext, rhs: heresdk.MapContext) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MapError : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case operationInProgress
  case invalidScene
  case invalidState
  case invalidRenderTarget
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.MapError]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.MapError] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct MapFeatureModes {
  public static let defaultMode: Swift.String
  public static let buildingFootprintsAll: Swift.String
  public static let congestionZonesAll: Swift.String
  public static let extrudedBuildingsAll: Swift.String
  public static let environmentalZonesAll: Swift.String
  public static let lowSpeedZonesAll: Swift.String
  public static let trafficFlowJapanWithoutFreeFlow: Swift.String
  public static let trafficFlowWithFreeFlow: Swift.String
  public static let trafficFlowWithoutFreeFlow: Swift.String
  public static let trafficIncidentsAll: Swift.String
  public static let roadExitLabelsNumbersOnly: Swift.String
  public static let roadExitLabelsAll: Swift.String
  public static let shadowsAll: Swift.String
  public static let ambientOcclusionAll: Swift.String
}
public struct MapFeatures {
  public static let extrudedBuildings: Swift.String
  public static let buildingFootprints: Swift.String
  public static let trafficFlow: Swift.String
  public static let trafficIncidents: Swift.String
  public static let environmentalZones: Swift.String
  public static let congestionZones: Swift.String
  public static let lowSpeedZones: Swift.String
  public static let roadExitLabels: Swift.String
  public static let shadows: Swift.String
  public static let ambientOcclusion: Swift.String
}
public protocol MapIdleDelegate : AnyObject {
  func onMapBusy()
  func onMapIdle()
}
@_hasMissingDesignatedInitializers public class MapImage {
  public init(pixelData: Foundation.Data, imageFormat: heresdk.ImageFormat)
  public init(imageData: Foundation.Data, imageFormat: heresdk.ImageFormat, width: Swift.UInt32, height: Swift.UInt32)
  public init(filePath: Swift.String, width: Swift.UInt32, height: Swift.UInt32) throws
  @objc deinit
}
extension heresdk.MapImage : Swift.Hashable {
  public static func == (lhs: heresdk.MapImage, rhs: heresdk.MapImage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapImageOverlay {
  public init(at viewCoordinates: heresdk.Point2D, image: heresdk.MapImage)
  public init(at viewCoordinates: heresdk.Point2D, image: heresdk.MapImage, anchor: heresdk.Anchor2D)
  public var viewCoordinates: heresdk.Point2D {
    get
    set
  }
  public var drawOrder: Swift.Int32 {
    get
    set
  }
  public var image: heresdk.MapImage {
    get
    set
  }
  public var anchor: heresdk.Anchor2D {
    get
    set
  }
  @objc deinit
}
extension heresdk.MapImageOverlay : Swift.Hashable {
  public static func == (lhs: heresdk.MapImageOverlay, rhs: heresdk.MapImageOverlay) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapItemRepresentation {
  @objc deinit
}
extension heresdk.MapItemRepresentation : Swift.Hashable {
  public static func == (lhs: heresdk.MapItemRepresentation, rhs: heresdk.MapItemRepresentation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapLayer {
  @objc deinit
  public func setEnabled(_ enable: Swift.Bool)
  public func setStyle(_ style: heresdk.Style)
  public func setPriority(_ priority: heresdk.MapLayerPriority)
}
extension heresdk.MapLayer : Swift.Hashable {
  public static func == (lhs: heresdk.MapLayer, rhs: heresdk.MapLayer) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapLayerBuilder {
  public typealias InstantiationError = heresdk.MapLayerBuilder.InstantiationErrorDetails
  public init()
  @objc deinit
  public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case missingMandatoryParameter
    case unsupportedContentType
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapLayerBuilder.InstantiationErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapLayerBuilder.InstantiationErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct InstantiationErrorDetails {
    public var errorCode: heresdk.MapLayerBuilder.InstantiationErrorCode
    public var errorDescription: Swift.String?
    public init(errorCode: heresdk.MapLayerBuilder.InstantiationErrorCode, errorDescription: Swift.String? = nil)
  }
  public func withName(_ name: Swift.String) -> heresdk.MapLayerBuilder
  public func withDataSource(named dataSourceName: Swift.String, contentType: heresdk.MapContentType) -> heresdk.MapLayerBuilder
  public func withStyle(_ style: heresdk.Style) -> heresdk.MapLayerBuilder
  public func forMap(_ targetMap: heresdk.HereMap) -> heresdk.MapLayerBuilder
  public func withPriority(_ priority: heresdk.MapLayerPriority) -> heresdk.MapLayerBuilder
  public func withVisibilityRange(_ visibilityRange: heresdk.MapLayerVisibilityRange) -> heresdk.MapLayerBuilder
  public func withMapMeasureDependentStorageLevels(_ mapLayerMapMeasureDependentStorageLevels: heresdk.MapLayerMapMeasureDependentStorageLevels) -> heresdk.MapLayerBuilder
  public func withLoadPriority(_ loadPriority: Swift.Double) -> heresdk.MapLayerBuilder
  public func build() throws -> heresdk.MapLayer
}
extension heresdk.MapLayerBuilder : Swift.Hashable {
  public static func == (lhs: heresdk.MapLayerBuilder, rhs: heresdk.MapLayerBuilder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapLayerBuilder.InstantiationErrorDetails : Swift.Error {
}
@_hasMissingDesignatedInitializers public class MapLayerMapMeasureDependentStorageLevels {
  @available(*, deprecated, message: "Will be removed in v4.22.0. Use `MapLayerMapMeasureDependentStorageLevels.withStorageLevelOffset(...)` to\ncreate `MapLayerMapMeasureDependentStorageLevels` instance instead.")
  public init(storageLevelOffset: Swift.Int32)
  @objc deinit
  public static func withStorageLevelOffset(_ offset: Swift.Int32) -> heresdk.MapLayerMapMeasureDependentStorageLevels
}
extension heresdk.MapLayerMapMeasureDependentStorageLevels : Swift.Hashable {
  public static func == (lhs: heresdk.MapLayerMapMeasureDependentStorageLevels, rhs: heresdk.MapLayerMapMeasureDependentStorageLevels) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapLayerPriority {
  @objc deinit
}
extension heresdk.MapLayerPriority : Swift.Hashable {
  public static func == (lhs: heresdk.MapLayerPriority, rhs: heresdk.MapLayerPriority) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapLayerPriorityBuilder {
  public init()
  @objc deinit
  public func withCategory(_ category: Swift.String) -> heresdk.MapLayerPriorityBuilder
  public func renderedFirst() -> heresdk.MapLayerPriorityBuilder
  public func renderedLast() -> heresdk.MapLayerPriorityBuilder
  public func renderedBeforeLayer(named referenceLayer: Swift.String) -> heresdk.MapLayerPriorityBuilder
  public func renderedBeforeLayer(named referenceLayer: Swift.String, categoryName referenceCategory: Swift.String) -> heresdk.MapLayerPriorityBuilder
  public func renderedAfterLayer(named referenceLayer: Swift.String) -> heresdk.MapLayerPriorityBuilder
  public func renderedAfterLayer(named referenceLayer: Swift.String, categoryName referenceCategory: Swift.String) -> heresdk.MapLayerPriorityBuilder
  public func build() -> heresdk.MapLayerPriority
}
extension heresdk.MapLayerPriorityBuilder : Swift.Hashable {
  public static func == (lhs: heresdk.MapLayerPriorityBuilder, rhs: heresdk.MapLayerPriorityBuilder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct MapLayerVisibilityRange : Swift.Hashable {
  public let minimumZoomLevel: Swift.Double
  public let maximumZoomLevel: Swift.Double
  public init(minimumZoomLevel: Swift.Double, maximumZoomLevel: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.MapLayerVisibilityRange, b: heresdk.MapLayerVisibilityRange) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapMarker {
  public init(at coordinates: heresdk.GeoCoordinates, image: heresdk.MapImage)
  public init(at coordinates: heresdk.GeoCoordinates, image: heresdk.MapImage, text: Swift.String)
  public init(at coordinates: heresdk.GeoCoordinates, image: heresdk.MapImage, anchor: heresdk.Anchor2D)
  public var coordinates: heresdk.GeoCoordinates {
    get
    set
  }
  public var metadata: heresdk.Metadata? {
    get
    set
  }
  public var isOverlapAllowed: Swift.Bool {
    get
    set
  }
  public var drawOrder: Swift.Int32 {
    get
    set
  }
  public var image: heresdk.MapImage {
    get
    set
  }
  public var anchor: heresdk.Anchor2D {
    get
    set
  }
  public var opacity: Swift.Double {
    get
    set
  }
  public var fadeDuration: Foundation.TimeInterval {
    get
    set
  }
  public var text: Swift.String {
    get
    set
  }
  public var textStyle: heresdk.MapMarker.TextStyle {
    get
    set
  }
  public var visibilityRanges: [heresdk.MapMeasureRange] {
    get
    set
  }
  @objc deinit
  @_hasMissingDesignatedInitializers public class TextStyle {
    public typealias InstantiationError = heresdk.MapMarker.TextStyle.InstantiationErrorCode
    public init()
    public init(textSize: Swift.Double, textColor: UIKit.UIColor, textOutlineSize: Swift.Double, textOutlineColor: UIKit.UIColor, placements: [heresdk.MapMarker.TextStyle.Placement]) throws
    public var textSize: Swift.Double {
      get
    }
    public var textColor: UIKit.UIColor {
      get
    }
    public var textOutlineSize: Swift.Double {
      get
    }
    public var textOutlineColor: UIKit.UIColor {
      get
    }
    public var placements: [heresdk.MapMarker.TextStyle.Placement] {
      get
    }
    @objc deinit
    public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
      case nonPositiveTextSize
      case negativeTextOutlineSize
      case emptyTextPlacementList
      case duplicateTextPlacementValues
      public init?(rawValue: Swift.UInt32)
      public typealias AllCases = [heresdk.MapMarker.TextStyle.InstantiationErrorCode]
      public typealias RawValue = Swift.UInt32
      public static var allCases: [heresdk.MapMarker.TextStyle.InstantiationErrorCode] {
        get
      }
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public enum Placement : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
      case center
      case top
      case topRight
      case right
      case bottomRight
      case bottom
      case bottomLeft
      case left
      case topLeft
      public init?(rawValue: Swift.UInt32)
      public typealias AllCases = [heresdk.MapMarker.TextStyle.Placement]
      public typealias RawValue = Swift.UInt32
      public static var allCases: [heresdk.MapMarker.TextStyle.Placement] {
        get
      }
      public var rawValue: Swift.UInt32 {
        get
      }
    }
  }
  public func startAnimation(_ animation: heresdk.MapMarkerAnimation, animationDelegate: heresdk.AnimationDelegate?)
  public func cancelAnimation(_ animation: heresdk.MapMarkerAnimation)
}
extension heresdk.MapMarker : Swift.Hashable {
  public static func == (lhs: heresdk.MapMarker, rhs: heresdk.MapMarker) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapMarker.TextStyle : Swift.Hashable {
  public static func == (lhs: heresdk.MapMarker.TextStyle, rhs: heresdk.MapMarker.TextStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapMarker.TextStyle.InstantiationErrorCode : Swift.Error {
}
@_hasMissingDesignatedInitializers public class MapMarker3D {
  public init(at: heresdk.GeoCoordinates, model: heresdk.MapMarker3DModel)
  public init(at: heresdk.GeoCoordinates, image: heresdk.MapImage, scale: Swift.Double, unit: heresdk.RenderSize.Unit)
  public init(at: heresdk.GeoCoordinates, model: heresdk.MapMarker3DModel, scale: Swift.Double)
  public init(at: heresdk.GeoCoordinates, model: heresdk.MapMarker3DModel, scale: Swift.Double, unit: heresdk.RenderSize.Unit)
  public var coordinates: heresdk.GeoCoordinates {
    get
    set
  }
  public var metadata: heresdk.Metadata? {
    get
    set
  }
  public var bearing: Swift.Double {
    get
    set
  }
  public var roll: Swift.Double {
    get
    set
  }
  public var pitch: Swift.Double {
    get
    set
  }
  public var scale: Swift.Double {
    get
    set
  }
  public var isDepthCheckEnabled: Swift.Bool {
    get
    set
  }
  public var isRenderInternalsEnabled: Swift.Bool {
    get
    set
  }
  public var opacity: Swift.Double {
    get
    set
  }
  public var visibilityRanges: [heresdk.MapMeasureRange] {
    get
    set
  }
  @objc deinit
}
extension heresdk.MapMarker3D : Swift.Hashable {
  public static func == (lhs: heresdk.MapMarker3D, rhs: heresdk.MapMarker3D) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapMarker3DModel {
  public typealias InstantiationError = heresdk.MapMarker3DModel.InstantiationErrorCode
  public init(geometryFilePath: Swift.String, textureFilePath: Swift.String, color: UIKit.UIColor)
  public init(mesh: heresdk.Mesh, textureFilePath: Swift.String, color: UIKit.UIColor) throws
  public init(geometryFilePath: Swift.String, textureFilePath: Swift.String)
  public init(mesh: heresdk.Mesh, textureFilePath: Swift.String) throws
  public init(geometryFilePath: Swift.String)
  public init(mesh: heresdk.Mesh)
  @objc deinit
  public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case missingTextureCoordinates
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapMarker3DModel.InstantiationErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapMarker3DModel.InstantiationErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
}
extension heresdk.MapMarker3DModel : Swift.Hashable {
  public static func == (lhs: heresdk.MapMarker3DModel, rhs: heresdk.MapMarker3DModel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapMarker3DModel.InstantiationErrorCode : Swift.Error {
}
@_hasMissingDesignatedInitializers public class MapMarkerCluster {
  public init(imageStyle: heresdk.MapMarkerCluster.ImageStyle)
  public init(imageStyle: heresdk.MapMarkerCluster.ImageStyle, counterStyle: heresdk.MapMarkerCluster.CounterStyle)
  public var markers: [heresdk.MapMarker] {
    get
  }
  public var opacity: Swift.Double {
    get
    set
  }
  @objc deinit
  public struct Grouping {
    public var markers: [heresdk.MapMarker]
    public var parent: heresdk.MapMarkerCluster
    public init(markers: [heresdk.MapMarker], parent: heresdk.MapMarkerCluster)
  }
  public struct ImageStyle {
    public let image: heresdk.MapImage
    public let anchor: heresdk.Anchor2D
    public init(image: heresdk.MapImage, anchor: heresdk.Anchor2D)
    public init(image: heresdk.MapImage)
  }
  public struct CounterStyle {
    public var textColor: UIKit.UIColor
    public var fontSize: Swift.Double
    public var textAnchor: heresdk.Anchor2D
    public var maxCountNumber: Swift.Int32
    public var aboveMaxText: Swift.String
    public init(textColor: UIKit.UIColor = NamedColor.white, fontSize: Swift.Double = 20, textAnchor: heresdk.Anchor2D = Anchor2D(), maxCountNumber: Swift.Int32 = 99, aboveMaxText: Swift.String = "+99")
  }
  public func addMapMarker(marker: heresdk.MapMarker)
  public func addMapMarkers(markers: [heresdk.MapMarker])
  public func removeMapMarker(marker: heresdk.MapMarker)
  public func removeMapMarkers(markers: [heresdk.MapMarker])
  public func removeAllMapMarkers()
}
extension heresdk.MapMarkerCluster : Swift.Hashable {
  public static func == (lhs: heresdk.MapMarkerCluster, rhs: heresdk.MapMarkerCluster) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct MapMeasure : Swift.Hashable {
  public let kind: heresdk.MapMeasure.Kind
  public let value: Swift.Double
  public init(kind: heresdk.MapMeasure.Kind, value: Swift.Double)
  public enum Kind : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case distance
    case zoomLevel
    case scale
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapMeasure.Kind]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapMeasure.Kind] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.MapMeasure, b: heresdk.MapMeasure) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct MapMeasureDependentRenderSize : Swift.Hashable {
  public let measureKind: heresdk.MapMeasure.Kind
  public let sizeUnit: heresdk.RenderSize.Unit
  public let sizes: [Swift.Double : Swift.Double]
  public init(measureKind: heresdk.MapMeasure.Kind, sizeUnit: heresdk.RenderSize.Unit, sizes: [Swift.Double : Swift.Double]) throws
  public init(sizeUnit: heresdk.RenderSize.Unit, size: Swift.Double) throws
  public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case emptySizes
    case negativeMapMeasure
    case negativeSize
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapMeasureDependentRenderSize.InstantiationErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapMeasureDependentRenderSize.InstantiationErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public typealias InstantiationError = heresdk.MapMeasureDependentRenderSize.InstantiationErrorCode
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.MapMeasureDependentRenderSize, b: heresdk.MapMeasureDependentRenderSize) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapMeasureDependentRenderSize.InstantiationErrorCode : Swift.Error {
}
public struct MapMeasureRange : Swift.Hashable {
  public let kind: heresdk.MapMeasure.Kind
  public let minimumValue: Swift.Double
  public let maximumValue: Swift.Double
  public init(kind: heresdk.MapMeasure.Kind, minimumValue: Swift.Double, maximumValue: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.MapMeasureRange, b: heresdk.MapMeasureRange) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapObjectDescriptor {
  @objc deinit
  public func getLayerName() -> Swift.String
  public func getDataAttributes() -> heresdk.DataAttributes
  public func getClosestPoint() -> heresdk.GeoCoordinates?
}
extension heresdk.MapObjectDescriptor : Swift.Hashable {
  public static func == (lhs: heresdk.MapObjectDescriptor, rhs: heresdk.MapObjectDescriptor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapPolygon {
  public init(geometry: heresdk.GeoPolygon, color: UIKit.UIColor)
  public init(geometry: heresdk.GeoPolygon, color: UIKit.UIColor, outlineColor: UIKit.UIColor, outlineWidthInPixels: Swift.Double)
  public var geometry: heresdk.GeoPolygon {
    get
    set
  }
  public var metadata: heresdk.Metadata? {
    get
    set
  }
  public var fillColor: UIKit.UIColor {
    get
    set
  }
  public var drawOrder: Swift.Int32 {
    get
    set
  }
  public var visibilityRanges: [heresdk.MapMeasureRange] {
    get
    set
  }
  public var outlineColor: UIKit.UIColor {
    get
    set
  }
  public var outlineWidth: Swift.Double {
    get
    set
  }
  @objc deinit
}
extension heresdk.MapPolygon : Swift.Hashable {
  public static func == (lhs: heresdk.MapPolygon, rhs: heresdk.MapPolygon) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapPolyline {
  public init(geometry: heresdk.GeoPolyline, representation: heresdk.MapPolyline.Representation)
  public var geometry: heresdk.GeoPolyline {
    get
    set
  }
  public var metadata: heresdk.Metadata? {
    get
    set
  }
  public var drawOrder: Swift.Int32 {
    get
    set
  }
  public var drawOrderType: heresdk.DrawOrderType {
    get
    set
  }
  public var visibilityRanges: [heresdk.MapMeasureRange] {
    get
    set
  }
  public var progress: Swift.Double {
    get
    set
  }
  public var progressColor: UIKit.UIColor {
    get
    set
  }
  public var progressOutlineColor: UIKit.UIColor {
    get
    set
  }
  public var mapContentCategoriesToBlock: [heresdk.MapContentCategory] {
    get
    set
  }
  @objc deinit
  @_hasMissingDesignatedInitializers public class Representation : heresdk.MapItemRepresentation {
    public typealias InstantiationError = heresdk.MapPolyline.Representation.InstantiationErrorCode
    public enum InstantiationErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
      case illegalArguments
      public init?(rawValue: Swift.UInt32)
      public typealias AllCases = [heresdk.MapPolyline.Representation.InstantiationErrorCode]
      public typealias RawValue = Swift.UInt32
      public static var allCases: [heresdk.MapPolyline.Representation.InstantiationErrorCode] {
        get
      }
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class DashImageRepresentation : heresdk.MapPolyline.Representation {
    public init(dashLength: heresdk.MapMeasureDependentRenderSize, dashWidth: heresdk.MapMeasureDependentRenderSize, image: heresdk.MapImage) throws
    public init(dashLength: heresdk.MapMeasureDependentRenderSize, gapLength: heresdk.MapMeasureDependentRenderSize, dashWidth: heresdk.MapMeasureDependentRenderSize, image: heresdk.MapImage) throws
    public var dashImage: heresdk.MapImage {
      get
    }
    public var dashLength: heresdk.MapMeasureDependentRenderSize {
      get
    }
    public var gapLength: heresdk.MapMeasureDependentRenderSize {
      get
    }
    public var dashWidth: heresdk.MapMeasureDependentRenderSize {
      get
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SolidRepresentation : heresdk.MapPolyline.Representation {
    public init(lineWidth: heresdk.MapMeasureDependentRenderSize, color: UIKit.UIColor, capShape: heresdk.LineCap) throws
    public init(lineWidth: heresdk.MapMeasureDependentRenderSize, color: UIKit.UIColor, outlineWidth: heresdk.MapMeasureDependentRenderSize, outlineColor: UIKit.UIColor, capShape: heresdk.LineCap) throws
    public var lineWidth: heresdk.MapMeasureDependentRenderSize {
      get
    }
    public var lineColor: UIKit.UIColor {
      get
    }
    public var outlineWidth: heresdk.MapMeasureDependentRenderSize {
      get
    }
    public var outlineColor: UIKit.UIColor {
      get
    }
    public var capShape: heresdk.LineCap {
      get
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class DashRepresentation : heresdk.MapPolyline.Representation {
    public init(lineWidth: heresdk.MapMeasureDependentRenderSize, dashLength: heresdk.MapMeasureDependentRenderSize, gapLength: heresdk.MapMeasureDependentRenderSize, dashColor: UIKit.UIColor) throws
    public init(lineWidth: heresdk.MapMeasureDependentRenderSize, dashLength: heresdk.MapMeasureDependentRenderSize, gapLength: heresdk.MapMeasureDependentRenderSize, dashColor: UIKit.UIColor, gapColor: UIKit.UIColor) throws
    public var lineWidth: heresdk.MapMeasureDependentRenderSize {
      get
    }
    public var dashLength: heresdk.MapMeasureDependentRenderSize {
      get
    }
    public var gapLength: heresdk.MapMeasureDependentRenderSize {
      get
    }
    public var dashColor: UIKit.UIColor {
      get
    }
    public var gapColor: UIKit.UIColor? {
      get
    }
    @objc deinit
  }
  public func setRepresentation(_ representation: heresdk.MapPolyline.Representation)
  public func startAnimation(_ animation: heresdk.MapPolylineAnimation, animationDelegate: heresdk.AnimationDelegate)
  public func cancelAnimation(_ animation: heresdk.MapPolylineAnimation)
}
extension heresdk.MapPolyline : Swift.Hashable {
  public static func == (lhs: heresdk.MapPolyline, rhs: heresdk.MapPolyline) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapPolyline.Representation.InstantiationErrorCode : Swift.Error {
}
public enum MapProjection : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case globe
  case webMercator
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.MapProjection]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.MapProjection] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapScene {
  public typealias LoadSceneCompletionHandler = (heresdk.MapError?) -> Swift.Void
  public var lights: heresdk.MapSceneLights {
    get
  }
  @objc deinit
  @_hasMissingDesignatedInitializers public class MapPickFilter {
    public init(filter: [heresdk.MapScene.MapPickFilter.ContentType])
    @objc deinit
    public enum ContentType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
      case mapItems
      case mapContent
      case customLayerData
      public init?(rawValue: Swift.UInt32)
      public typealias AllCases = [heresdk.MapScene.MapPickFilter.ContentType]
      public typealias RawValue = Swift.UInt32
      public static var allCases: [heresdk.MapScene.MapPickFilter.ContentType] {
        get
      }
      public var rawValue: Swift.UInt32 {
        get
      }
    }
  }
  public func loadScene(mapScheme: heresdk.MapScheme, completion: heresdk.MapScene.LoadSceneCompletionHandler?)
  public func loadScene(fromFile configurationFile: Swift.String, completion: heresdk.MapScene.LoadSceneCompletionHandler?)
  public func loadScene(fromFile configurationFile: Swift.String, watermarkStyle: heresdk.WatermarkStyle, completion: heresdk.MapScene.LoadSceneCompletionHandler?)
  public func addMapPolyline(_ mapPolyline: heresdk.MapPolyline)
  public func addMapPolylines(_ mapPolylines: [heresdk.MapPolyline])
  public func removeMapPolyline(_ mapPolyline: heresdk.MapPolyline)
  public func removeMapPolylines(_ mapPolylines: [heresdk.MapPolyline])
  public func addMapArrow(_ mapArrow: heresdk.MapArrow)
  public func removeMapArrow(_ mapArrow: heresdk.MapArrow)
  public func addMapMarker(_ marker: heresdk.MapMarker)
  public func addMapMarkers(_ markers: [heresdk.MapMarker])
  public func removeMapMarker(_ marker: heresdk.MapMarker)
  public func removeMapMarkers(_ markers: [heresdk.MapMarker])
  public func addMapMarkerCluster(_ cluster: heresdk.MapMarkerCluster)
  public func removeMapMarkerCluster(_ cluster: heresdk.MapMarkerCluster)
  public func addMapMarker3d(_ marker: heresdk.MapMarker3D)
  public func removeMapMarker3d(_ marker: heresdk.MapMarker3D)
  public func addMapPolygon(_ mapPolygon: heresdk.MapPolygon)
  public func removeMapPolygon(_ mapPolygon: heresdk.MapPolygon)
  public func addMapImageOverlay(_ overlay: heresdk.MapImageOverlay)
  public func removeMapImageOverlay(_ overlay: heresdk.MapImageOverlay)
  public func setLayerVisibility(layerName: Swift.String, visibility: heresdk.VisibilityState)
  public func getActiveFeatures() -> [Swift.String : Swift.String]
  public func getSupportedFeatures() -> [Swift.String : [Swift.String]]
  public func enableFeatures(_ features: [Swift.String : Swift.String])
  public func disableFeatures(_ features: [Swift.String])
  public func reloadScene()
}
extension heresdk.MapScene : Swift.Hashable {
  public static func == (lhs: heresdk.MapScene, rhs: heresdk.MapScene) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapScene.MapPickFilter : Swift.Hashable {
  public static func == (lhs: heresdk.MapScene.MapPickFilter, rhs: heresdk.MapScene.MapPickFilter) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapSceneLights {
  public typealias AttributeSettingCompletionHandler = (heresdk.MapSceneLights.AttributeSettingError?) -> Swift.Void
  @objc deinit
  public enum Category : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case main
    case back
    case rim
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapSceneLights.Category]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapSceneLights.Category] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public enum AttributeSettingError : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case noLights
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapSceneLights.AttributeSettingError]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapSceneLights.AttributeSettingError] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct Direction : Swift.Hashable {
    public var azimuth: Swift.Double
    public var altitude: Swift.Double
    public init(azimuth: Swift.Double = 0.0, altitude: Swift.Double = 0.0)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: heresdk.MapSceneLights.Direction, b: heresdk.MapSceneLights.Direction) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func setColor(category: heresdk.MapSceneLights.Category, color: UIKit.UIColor, completion: heresdk.MapSceneLights.AttributeSettingCompletionHandler?)
  public func setIntensity(category: heresdk.MapSceneLights.Category, intensity: Swift.Double, completion: heresdk.MapSceneLights.AttributeSettingCompletionHandler?)
  public func setDirection(category: heresdk.MapSceneLights.Category, direction: heresdk.MapSceneLights.Direction, completion: heresdk.MapSceneLights.AttributeSettingCompletionHandler?)
  public func getColor(category: heresdk.MapSceneLights.Category) -> UIKit.UIColor?
  public func getIntensity(category: heresdk.MapSceneLights.Category) -> Swift.Double?
  public func getDirection(category: heresdk.MapSceneLights.Category) -> heresdk.MapSceneLights.Direction?
  public func reset()
}
extension heresdk.MapSceneLights : Swift.Hashable {
  public static func == (lhs: heresdk.MapSceneLights, rhs: heresdk.MapSceneLights) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MapScheme : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case normalDay
  case normalNight
  case satellite
  case hybridDay
  case hybridNight
  case liteDay
  case liteNight
  case liteHybridDay
  case liteHybridNight
  case logisticsDay
  case logisticsNight
  case logisticsHybridDay
  case logisticsHybridNight
  case roadNetworkDay
  case roadNetworkNight
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.MapScheme]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.MapScheme] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class Mesh {
  @objc deinit
}
extension heresdk.Mesh : Swift.Hashable {
  public static func == (lhs: heresdk.Mesh, rhs: heresdk.Mesh) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MeshBuilder {
  public init()
  @objc deinit
  public func triangle(a: heresdk.Point3D, b: heresdk.Point3D, c: heresdk.Point3D) -> heresdk.TriangleMeshBuilder
  public func quad(a: heresdk.Point3D, b: heresdk.Point3D, c: heresdk.Point3D, d: heresdk.Point3D) -> heresdk.QuadMeshBuilder
  public func build() -> heresdk.Mesh?
}
extension heresdk.MeshBuilder : Swift.Hashable {
  public static func == (lhs: heresdk.MeshBuilder, rhs: heresdk.MeshBuilder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PickMapItemsResult {
  public var clusteredMarkers: [heresdk.MapMarkerCluster.Grouping] {
    get
  }
  public var markers: [heresdk.MapMarker] {
    get
  }
  public var markers3d: [heresdk.MapMarker3D] {
    get
  }
  public var polylines: [heresdk.MapPolyline] {
    get
  }
  public var polygons: [heresdk.MapPolygon] {
    get
  }
  @objc deinit
}
extension heresdk.PickMapItemsResult : Swift.Hashable {
  public static func == (lhs: heresdk.PickMapItemsResult, rhs: heresdk.PickMapItemsResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class QuadMeshBuilder : heresdk.MeshBuilder {
  public func withTextureCoordinates(a: heresdk.Anchor2D, b: heresdk.Anchor2D, c: heresdk.Anchor2D, d: heresdk.Anchor2D) -> heresdk.MeshBuilder
  @objc deinit
}
public struct RenderSize {
  public enum Unit : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case pixels
    case densityIndependentPixels
    case meters
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.RenderSize.Unit]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.RenderSize.Unit] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
}
public struct RoadShieldIconProperties {
  public var routeType: heresdk.RouteType
  public var countryCode: Swift.String
  public var stateCode: Swift.String
  public var routeNumberName: Swift.String
  public var shieldText: Swift.String
  public init(routeType: heresdk.RouteType, countryCode: Swift.String, stateCode: Swift.String, routeNumberName: Swift.String, shieldText: Swift.String)
}
public enum ShadowQuality : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case veryLow
  case low
  case medium
  case high
  case veryHigh
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.ShadowQuality]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.ShadowQuality] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class Style {
  @objc deinit
  public func update(_ style: heresdk.Style)
}
extension heresdk.Style : Swift.Hashable {
  public static func == (lhs: heresdk.Style, rhs: heresdk.Style) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TriangleMeshBuilder : heresdk.MeshBuilder {
  public func withTextureCoordinates(a: heresdk.Anchor2D, b: heresdk.Anchor2D, c: heresdk.Anchor2D) -> heresdk.MeshBuilder
  @objc deinit
}
public enum VisibilityState : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case visible
  case hidden
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.VisibilityState]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.VisibilityState] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum WatermarkStyle : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case dark
  case light
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.WatermarkStyle]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.WatermarkStyle] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class DataAttributeValue {
  public init(_ value: Swift.String)
  public init(_ value: Swift.Int64)
  public init(_ value: Swift.Float)
  public init(_ value: Swift.Double)
  public init(_ value: Swift.Bool)
  public init(_ value: [heresdk.DataAttributeValue])
  @objc deinit
  public enum ValueType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case string
    case int64
    case float
    case double
    case boolean
    case array
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.DataAttributeValue.ValueType]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.DataAttributeValue.ValueType] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public func getType() -> heresdk.DataAttributeValue.ValueType
  public func getString() -> Swift.String?
  public func getInt64() -> Swift.Int64?
  public func getFloat() -> Swift.Float?
  public func getDouble() -> Swift.Double?
  public func getBoolean() -> Swift.Bool?
  public func getArray() -> [heresdk.DataAttributeValue]?
  public func getAsString() -> Swift.String
}
extension heresdk.DataAttributeValue : Swift.Hashable {
  public static func == (lhs: heresdk.DataAttributeValue, rhs: heresdk.DataAttributeValue) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DataAttributes : heresdk.DataAttributesBase {
  @objc deinit
  public func getAttributeNames() -> [Swift.String]
  public func getValueType(_ name: Swift.String) -> heresdk.DataAttributeValue.ValueType?
  public func getAsString(_ name: Swift.String) -> Swift.String?
  public func getString(_ name: Swift.String) -> Swift.String?
  public func getInt64(_ name: Swift.String) -> Swift.Int64?
  public func getFloat(_ name: Swift.String) -> Swift.Float?
  public func getDouble(_ name: Swift.String) -> Swift.Double?
  public func getBoolean(_ name: Swift.String) -> Swift.Bool?
  public func getValue(_ name: Swift.String) -> heresdk.DataAttributeValue?
}
extension heresdk.DataAttributes : Swift.Hashable {
  public static func == (lhs: heresdk.DataAttributes, rhs: heresdk.DataAttributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DataAttributesAccessor : heresdk.DataAttributesBase {
  @objc deinit
  public func getAttributeNames() -> [Swift.String]
  public func getValueType(_ name: Swift.String) -> heresdk.DataAttributeValue.ValueType?
  public func getAsString(_ name: Swift.String) -> Swift.String?
  public func getString(_ name: Swift.String) -> Swift.String?
  public func getInt64(_ name: Swift.String) -> Swift.Int64?
  public func getFloat(_ name: Swift.String) -> Swift.Float?
  public func getDouble(_ name: Swift.String) -> Swift.Double?
  public func getBoolean(_ name: Swift.String) -> Swift.Bool?
  public func getValue(_ name: Swift.String) -> heresdk.DataAttributeValue?
  public func addOrReplace(name: Swift.String, value: Swift.String)
  public func addOrReplace(name: Swift.String, value: Swift.Int64)
  public func addOrReplace(name: Swift.String, value: Swift.Float)
  public func addOrReplace(name: Swift.String, value: Swift.Double)
  public func addOrReplace(name: Swift.String, value: Swift.Bool)
  public func addOrReplace(name: Swift.String, value: heresdk.DataAttributeValue)
  public func remove(name: Swift.String)
  public func removeAll()
}
extension heresdk.DataAttributesAccessor : Swift.Hashable {
  public static func == (lhs: heresdk.DataAttributesAccessor, rhs: heresdk.DataAttributesAccessor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol DataAttributesBase : AnyObject {
  func getAttributeNames() -> [Swift.String]
  func getValueType(_ name: Swift.String) -> heresdk.DataAttributeValue.ValueType?
  func getAsString(_ name: Swift.String) -> Swift.String?
  func getString(_ name: Swift.String) -> Swift.String?
  func getInt64(_ name: Swift.String) -> Swift.Int64?
  func getFloat(_ name: Swift.String) -> Swift.Float?
  func getDouble(_ name: Swift.String) -> Swift.Double?
  func getBoolean(_ name: Swift.String) -> Swift.Bool?
  func getValue(_ name: Swift.String) -> heresdk.DataAttributeValue?
}
@_hasMissingDesignatedInitializers public class DataAttributesBuilder {
  public init()
  @objc deinit
  public func with(name: Swift.String, value: Swift.String) -> heresdk.DataAttributesBuilder
  public func with(name: Swift.String, value: Swift.Int64) -> heresdk.DataAttributesBuilder
  public func with(name: Swift.String, value: Swift.Float) -> heresdk.DataAttributesBuilder
  public func with(name: Swift.String, value: Swift.Double) -> heresdk.DataAttributesBuilder
  public func with(name: Swift.String, value: Swift.Bool) -> heresdk.DataAttributesBuilder
  public func with(name: Swift.String, value: heresdk.DataAttributeValue) -> heresdk.DataAttributesBuilder
  public func build() -> heresdk.DataAttributes
}
extension heresdk.DataAttributesBuilder : Swift.Hashable {
  public static func == (lhs: heresdk.DataAttributesBuilder, rhs: heresdk.DataAttributesBuilder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LineData {
  @objc deinit
}
extension heresdk.LineData : Swift.Hashable {
  public static func == (lhs: heresdk.LineData, rhs: heresdk.LineData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LineDataAccessor {
  @objc deinit
  public func getGeometry() -> heresdk.GeoPolyline
  public func getAttributes() -> heresdk.DataAttributesAccessor
  public func setGeometry(_ geometry: heresdk.GeoPolyline)
  public func setAttributes(_ attributes: heresdk.DataAttributes)
}
extension heresdk.LineDataAccessor : Swift.Hashable {
  public static func == (lhs: heresdk.LineDataAccessor, rhs: heresdk.LineDataAccessor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LineDataBuilder {
  public init()
  @objc deinit
  public func withGeometry(_ geometry: heresdk.GeoPolyline) -> heresdk.LineDataBuilder
  public func withAttributes(_ attributes: heresdk.DataAttributes) -> heresdk.LineDataBuilder
  public func build() -> heresdk.LineData
}
extension heresdk.LineDataBuilder : Swift.Hashable {
  public static func == (lhs: heresdk.LineDataBuilder, rhs: heresdk.LineDataBuilder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LineDataSource {
  public typealias LineDataProcessor = (heresdk.LineDataAccessor) -> Swift.Bool
  @objc deinit
  public func add(_ line: heresdk.LineData)
  public func add(_ lines: [heresdk.LineData])
  public func removeAll()
  public func forEach(_ processor: @escaping heresdk.LineDataSource.LineDataProcessor)
  public func removeIf(_ inspector: @escaping heresdk.LineDataSource.LineDataProcessor)
}
extension heresdk.LineDataSource : Swift.Hashable {
  public static func == (lhs: heresdk.LineDataSource, rhs: heresdk.LineDataSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LineDataSourceBuilder {
  public init(_ context: heresdk.MapContext)
  @objc deinit
  public func withName(_ dataSourceName: Swift.String) -> heresdk.LineDataSourceBuilder
  public func withPolyline(_ polyline: heresdk.LineData) -> heresdk.LineDataSourceBuilder
  public func withPolylines(_ polylines: [heresdk.LineData]) -> heresdk.LineDataSourceBuilder
  public func build() -> heresdk.LineDataSource
}
extension heresdk.LineDataSourceBuilder : Swift.Hashable {
  public static func == (lhs: heresdk.LineDataSourceBuilder, rhs: heresdk.LineDataSourceBuilder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LineTileDataSource {
  @objc deinit
  public static func create(context: heresdk.MapContext, name: Swift.String, tileSource: heresdk.LineTileSource) -> heresdk.LineTileDataSource
}
extension heresdk.LineTileDataSource : Swift.Hashable {
  public static func == (lhs: heresdk.LineTileDataSource, rhs: heresdk.LineTileDataSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol LineTileSource : heresdk.TileSource {
  var tilingScheme: heresdk.TilingScheme { get }
  var storageLevels: [Swift.Int32] { get }
  func getDataVersion(tileKey: heresdk.TileKey) -> heresdk.TileSourceDataVersion
  func addDelegate(_ delegate: heresdk.TileSourceDelegate)
  func removeDelegate(_ delegate: heresdk.TileSourceDelegate)
  func loadTile(tileKey: heresdk.TileKey, completionHandler: heresdk.LineTileSourceLoadResultHandler) -> heresdk.TileSourceLoadTileRequestHandle?
}
public protocol LineTileSourceLoadResultHandler : AnyObject {
  func loaded(tileKey: heresdk.TileKey, data: [heresdk.LineData], metadata: heresdk.TileSourceTileMetadata)
  func failed(_ tileKey: heresdk.TileKey)
}
@_hasMissingDesignatedInitializers public class PointData {
  @objc deinit
}
extension heresdk.PointData : Swift.Hashable {
  public static func == (lhs: heresdk.PointData, rhs: heresdk.PointData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PointDataAccessor {
  @objc deinit
  public func getCoordinates() -> heresdk.GeoCoordinates
  public func getAttributes() -> heresdk.DataAttributesAccessor
  public func setCoordinates(_ position: heresdk.GeoCoordinates)
  public func setAttributes(_ attributes: heresdk.DataAttributes)
}
extension heresdk.PointDataAccessor : Swift.Hashable {
  public static func == (lhs: heresdk.PointDataAccessor, rhs: heresdk.PointDataAccessor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PointDataBuilder {
  public init()
  @objc deinit
  public func withCoordinates(_ coordinates: heresdk.GeoCoordinates) -> heresdk.PointDataBuilder
  public func withAttributes(_ attributes: heresdk.DataAttributes) -> heresdk.PointDataBuilder
  public func build() -> heresdk.PointData
}
extension heresdk.PointDataBuilder : Swift.Hashable {
  public static func == (lhs: heresdk.PointDataBuilder, rhs: heresdk.PointDataBuilder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PointDataSource {
  public typealias PointDataProcessor = (heresdk.PointDataAccessor) -> Swift.Bool
  @objc deinit
  public func add(_ point: heresdk.PointData)
  public func add(_ points: [heresdk.PointData])
  public func removeAll()
  public func forEach(_ processor: @escaping heresdk.PointDataSource.PointDataProcessor)
  public func removeIf(_ processor: @escaping heresdk.PointDataSource.PointDataProcessor)
}
extension heresdk.PointDataSource : Swift.Hashable {
  public static func == (lhs: heresdk.PointDataSource, rhs: heresdk.PointDataSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PointDataSourceBuilder {
  public init(_ context: heresdk.MapContext)
  @objc deinit
  public func withName(_ dataSourceName: Swift.String) -> heresdk.PointDataSourceBuilder
  public func withPoint(_ point: heresdk.PointData) -> heresdk.PointDataSourceBuilder
  public func withPoints(points: [heresdk.PointData]) -> heresdk.PointDataSourceBuilder
  public func build() -> heresdk.PointDataSource
}
extension heresdk.PointDataSourceBuilder : Swift.Hashable {
  public static func == (lhs: heresdk.PointDataSourceBuilder, rhs: heresdk.PointDataSourceBuilder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PointTileDataSource {
  @objc deinit
  public static func create(context: heresdk.MapContext, name: Swift.String, tileSource: heresdk.PointTileSource) -> heresdk.PointTileDataSource
}
extension heresdk.PointTileDataSource : Swift.Hashable {
  public static func == (lhs: heresdk.PointTileDataSource, rhs: heresdk.PointTileDataSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PointTileSource : heresdk.TileSource {
  var tilingScheme: heresdk.TilingScheme { get }
  var storageLevels: [Swift.Int32] { get }
  func getDataVersion(tileKey: heresdk.TileKey) -> heresdk.TileSourceDataVersion
  func addDelegate(_ delegate: heresdk.TileSourceDelegate)
  func removeDelegate(_ delegate: heresdk.TileSourceDelegate)
  func loadTile(tileKey: heresdk.TileKey, completionHandler: heresdk.PointTileSourceLoadResultHandler) -> heresdk.TileSourceLoadTileRequestHandle?
}
public protocol PointTileSourceLoadResultHandler : AnyObject {
  func loaded(tileKey: heresdk.TileKey, data: [heresdk.PointData], metadata: heresdk.TileSourceTileMetadata)
  func failed(_ tileKey: heresdk.TileKey)
}
@_hasMissingDesignatedInitializers public class PolygonData {
  @objc deinit
}
extension heresdk.PolygonData : Swift.Hashable {
  public static func == (lhs: heresdk.PolygonData, rhs: heresdk.PolygonData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PolygonDataAccessor {
  @objc deinit
  public func getGeometry() -> heresdk.GeoPolygon
  public func getAttributes() -> heresdk.DataAttributesAccessor
  public func setGeometry(_ geometry: heresdk.GeoPolygon)
  public func setAttributes(_ attributes: heresdk.DataAttributes)
}
extension heresdk.PolygonDataAccessor : Swift.Hashable {
  public static func == (lhs: heresdk.PolygonDataAccessor, rhs: heresdk.PolygonDataAccessor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PolygonDataBuilder {
  public init()
  @objc deinit
  public func withGeometry(_ geometry: heresdk.GeoPolygon) -> heresdk.PolygonDataBuilder
  public func withAttributes(_ attributes: heresdk.DataAttributes) -> heresdk.PolygonDataBuilder
  public func build() -> heresdk.PolygonData
}
extension heresdk.PolygonDataBuilder : Swift.Hashable {
  public static func == (lhs: heresdk.PolygonDataBuilder, rhs: heresdk.PolygonDataBuilder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PolygonDataSource {
  public typealias PolygonDataProcessor = (heresdk.PolygonDataAccessor) -> Swift.Bool
  @objc deinit
  public func add(_ polygon: heresdk.PolygonData)
  public func add(_ polygons: [heresdk.PolygonData])
  public func removeAll()
  public func forEach(_ processor: @escaping heresdk.PolygonDataSource.PolygonDataProcessor)
  public func removeIf(_ inspector: @escaping heresdk.PolygonDataSource.PolygonDataProcessor)
}
extension heresdk.PolygonDataSource : Swift.Hashable {
  public static func == (lhs: heresdk.PolygonDataSource, rhs: heresdk.PolygonDataSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PolygonDataSourceBuilder {
  public init(_ context: heresdk.MapContext)
  @objc deinit
  public func withName(_ dataSourceName: Swift.String) -> heresdk.PolygonDataSourceBuilder
  public func withPolygon(_ polygon: heresdk.PolygonData) -> heresdk.PolygonDataSourceBuilder
  public func withPolygons(_ polygon: [heresdk.PolygonData]) -> heresdk.PolygonDataSourceBuilder
  public func build() -> heresdk.PolygonDataSource
}
extension heresdk.PolygonDataSourceBuilder : Swift.Hashable {
  public static func == (lhs: heresdk.PolygonDataSourceBuilder, rhs: heresdk.PolygonDataSourceBuilder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PolygonTileDataSource {
  @objc deinit
  public static func create(context: heresdk.MapContext, name: Swift.String, tileSource: heresdk.PolygonTileSource) -> heresdk.PolygonTileDataSource
}
extension heresdk.PolygonTileDataSource : Swift.Hashable {
  public static func == (lhs: heresdk.PolygonTileDataSource, rhs: heresdk.PolygonTileDataSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PolygonTileSource : heresdk.TileSource {
  var tilingScheme: heresdk.TilingScheme { get }
  var storageLevels: [Swift.Int32] { get }
  func getDataVersion(tileKey: heresdk.TileKey) -> heresdk.TileSourceDataVersion
  func addDelegate(_ delegate: heresdk.TileSourceDelegate)
  func removeDelegate(_ delegate: heresdk.TileSourceDelegate)
  func loadTile(tileKey: heresdk.TileKey, completionHandler: heresdk.PolygonTileSourceLoadResultHandler) -> heresdk.TileSourceLoadTileRequestHandle?
}
public protocol PolygonTileSourceLoadResultHandler : AnyObject {
  func loaded(tileKey: heresdk.TileKey, data: [heresdk.PolygonData], metadata: heresdk.TileSourceTileMetadata)
  func failed(_ tileKey: heresdk.TileKey)
}
public struct TileKey : Swift.Hashable {
  public var x: Swift.Int32
  public var y: Swift.Int32
  public var level: Swift.Int32
  public init(x: Swift.Int32, y: Swift.Int32, level: Swift.Int32)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TileKey, b: heresdk.TileKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol TileSource : AnyObject {
  var tilingScheme: heresdk.TilingScheme { get }
  var storageLevels: [Swift.Int32] { get }
  func getDataVersion(tileKey: heresdk.TileKey) -> heresdk.TileSourceDataVersion
  func addDelegate(_ delegate: heresdk.TileSourceDelegate)
  func removeDelegate(_ delegate: heresdk.TileSourceDelegate)
}
public protocol TileSourceDelegate : AnyObject {
  func onDataVersionChanged(_ dataVersion: heresdk.TileSourceDataVersion)
}
public protocol TileSourceLoadTileRequestHandle : AnyObject {
  func cancel()
}
public struct TileSourceDataVersion {
  public var majorVersion: Swift.Int32
  public var minorVersion: Swift.Int32
  public init(majorVersion: Swift.Int32, minorVersion: Swift.Int32)
}
public struct TileSourceTileMetadata {
  public var dataVersion: heresdk.TileSourceDataVersion
  public var dataExpiryTimestamp: Foundation.Date
  public init(dataVersion: heresdk.TileSourceDataVersion, dataExpiryTimestamp: Foundation.Date)
}
@_hasMissingDesignatedInitializers public class TileUrlProviderFactory {
  @objc deinit
  public static func fromXyzUrlTemplate(_ urlTemplate: Swift.String) -> heresdk.TileUrlRequestHandler?
}
extension heresdk.TileUrlProviderFactory : Swift.Hashable {
  public static func == (lhs: heresdk.TileUrlProviderFactory, rhs: heresdk.TileUrlProviderFactory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias TileUrlRequestHandler = (Swift.Int32, Swift.Int32, Swift.Int32) -> Swift.String
public enum TilingScheme : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case halfQuadTreeIdentity
  case halfQuadTreeMercator
  case halfQuadTreeEquirectangular
  case quadTreeIdentity
  case quadTreeMercator
  case quadTreeEquirectangular
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TilingScheme]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TilingScheme] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class Angle {
  public var degrees: Swift.Double {
    get
  }
  public var radians: Swift.Double {
    get
  }
  @objc deinit
  public static func fromDegrees(angle: Swift.Double) -> heresdk.Angle
  public static func fromRadians(angle: Swift.Double) -> heresdk.Angle
}
extension heresdk.Angle : Swift.Hashable {
  public static func == (lhs: heresdk.Angle, rhs: heresdk.Angle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Authentication {
  @objc deinit
  public static func authenticate(sdkNativeEngine: heresdk.SDKNativeEngine, callback: @escaping heresdk.AuthenticationCompletionHandler)
  public static func authenticate(sdkNativeEngine: heresdk.SDKNativeEngine) throws -> heresdk.AuthenticationData
}
extension heresdk.Authentication : Swift.Hashable {
  public static func == (lhs: heresdk.Authentication, rhs: heresdk.Authentication) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias AuthenticationCompletionHandler = (heresdk.AuthenticationError?, heresdk.AuthenticationData?) -> Swift.Void
public struct AuthenticationData : Swift.Hashable {
  public var token: Swift.String
  public var expiryTime: Foundation.TimeInterval
  public init(token: Swift.String = "", expiryTime: Foundation.TimeInterval = 0)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.AuthenticationData, b: heresdk.AuthenticationData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum AuthenticationError : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case invalidParameter
  case authenticationFailed
  case noConnection
  case operationAfterDispose
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.AuthenticationError]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.AuthenticationError] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias AuthenticationException = heresdk.AuthenticationError
extension heresdk.AuthenticationError : Swift.Error {
}
public enum CardinalDirection : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case north
  case south
  case east
  case west
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.CardinalDirection]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.CardinalDirection] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum CountryCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case abw
  case afg
  case ago
  case aia
  case ala
  case alb
  case and
  case are
  case arg
  case arm
  case asm
  case ata
  case atf
  case atg
  case aus
  case aut
  case aze
  case bdi
  case bel
  case ben
  case bes
  case bfa
  case bgd
  case bgr
  case bhr
  case bhs
  case bih
  case blm
  case blr
  case blz
  case bmu
  case bol
  case bra
  case brb
  case brn
  case btn
  case bvt
  case bwa
  case caf
  case can
  case cck
  case che
  case chl
  case chn
  case civ
  case cmr
  case cod
  case cog
  case cok
  case col
  case com
  case cpv
  case cri
  case cub
  case cuw
  case cxr
  case cym
  case cyp
  case cze
  case deu
  case dji
  case dma
  case dnk
  case dom
  case dza
  case ecu
  case egy
  case eri
  case esh
  case esp
  case est
  case eth
  case fin
  case fji
  case flk
  case fra
  case fro
  case fsm
  case gab
  case gbr
  case geo
  case ggy
  case gha
  case gib
  case gin
  case glp
  case gmb
  case gnb
  case gnq
  case grc
  case grd
  case grl
  case gtm
  case guf
  case gum
  case guy
  case hkg
  case hmd
  case hnd
  case hrv
  case hti
  case hun
  case idn
  case imn
  case ind
  case iot
  case irl
  case irn
  case irq
  case isl
  case isr
  case ita
  case jam
  case jey
  case jor
  case jpn
  case kaz
  case ken
  case kgz
  case khm
  case kir
  case kna
  case kor
  case kwt
  case lao
  case lbn
  case lbr
  case lby
  case lca
  case lie
  case lka
  case lso
  case ltu
  case lux
  case lva
  case mac
  case maf
  case mar
  case mco
  case mda
  case mdg
  case mdv
  case mex
  case mhl
  case mkd
  case mli
  case mlt
  case mmr
  case mne
  case mng
  case mnp
  case moz
  case mrt
  case msr
  case mtq
  case mus
  case mwi
  case mys
  case myt
  case nam
  case ncl
  case ner
  case nfk
  case nga
  case nic
  case niu
  case nld
  case nor
  case npl
  case nru
  case nzl
  case omn
  case pak
  case pan
  case pcn
  case per
  case phl
  case plw
  case png
  case pol
  case pri
  case prk
  case prt
  case pry
  case pse
  case pyf
  case qat
  case reu
  case rou
  case rus
  case rwa
  case sau
  case sdn
  case sen
  case sgp
  case sgs
  case shn
  case sjm
  case slb
  case sle
  case slv
  case smr
  case som
  case spm
  case srb
  case ssd
  case stp
  case sur
  case svk
  case svn
  case swe
  case swz
  case sxm
  case syc
  case syr
  case tca
  case tcd
  case tgo
  case tha
  case tjk
  case tkl
  case tkm
  case tls
  case ton
  case tto
  case tun
  case tur
  case tuv
  case twn
  case tza
  case uga
  case ukr
  case umi
  case ury
  case usa
  case uzb
  case vat
  case vct
  case ven
  case vgb
  case vir
  case vnm
  case vut
  case wlf
  case wsm
  case yem
  case zaf
  case zmb
  case zwe
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.CountryCode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.CountryCode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct ExternalID : Swift.Hashable {
  public var source: Swift.String
  public var id: Swift.String
  public init(source: Swift.String = "", id: Swift.String = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.ExternalID, b: heresdk.ExternalID) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct GeoCorridor : Swift.Hashable {
  public let polyline: [heresdk.GeoCoordinates]
  public let halfWidthInMeters: Swift.Int32?
  public init(polyline: [heresdk.GeoCoordinates], halfWidthInMeters: Swift.Int32)
  public init(polyline: [heresdk.GeoCoordinates])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeoCorridor, b: heresdk.GeoCorridor) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct IntegerRange : Swift.Hashable {
  public var min: Swift.Int32
  public var max: Swift.Int32?
  public init(min: Swift.Int32, max: Swift.Int32? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.IntegerRange, b: heresdk.IntegerRange) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum LanguageCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case enUs
  case afZa
  case sqAl
  case amEt
  case arSa
  case hyAm
  case asIn
  case azLatnAz
  case bnBd
  case bnIn
  case euEs
  case beBy
  case bsLatnBa
  case bgBg
  case caEs
  case kuArab
  case zhCn
  case zhHk
  case zhTw
  case hrHr
  case csCz
  case daDk
  case prsArabAf
  case nlBe
  case nlNl
  case enGb
  case etEe
  case faIr
  case filPh
  case fiFi
  case frFr
  case frCa
  case glEs
  case kaGe
  case deDe
  case elGr
  case guIn
  case haLatnNg
  case heIl
  case hiIn
  case huHu
  case isIs
  case igLatnNg
  case idId
  case gaIe
  case xh
  case zuZa
  case itIt
  case jaJp
  case knIn
  case kkKz
  case kmKh
  case qucLatnGt
  case rwRw
  case sw
  case kokIn
  case koKr
  case kyCyrlKg
  case lvLv
  case ltLt
  case lbLu
  case mkMk
  case msMy
  case mlIn
  case mtMt
  case miLatnNz
  case mrIn
  case mnCyrlMn
  case neNp
  case nbNo
  case nnNo
  case orIn
  case plPl
  case ptBr
  case ptPt
  case paGuru
  case paArab
  case quLatnPe
  case roRo
  case ruRu
  case gdLatnGb
  case srCyrlBa
  case srCyrlRs
  case srLatnRs
  case nsoZa
  case tn
  case sdArab
  case siLk
  case skSk
  case slSi
  case esAr
  case esMx
  case esEs
  case svSe
  case tgCyrlTj
  case ta
  case ttCyrlRu
  case teIn
  case thTh
  case tiEt
  case trTr
  case tkLatnTm
  case ukUa
  case ur
  case ugArab
  case uzCyrlUz
  case uzLatnUz
  case catEs
  case viVn
  case cyGb
  case woLatn
  case yoLatn
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.LanguageCode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.LanguageCode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct LocalizedText : Swift.Hashable {
  public var text: Swift.String
  public var locale: Foundation.Locale?
  public init(text: Swift.String, locale: Foundation.Locale? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.LocalizedText, b: heresdk.LocalizedText) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct LocalizedTexts : Swift.Hashable {
  public var items: [heresdk.LocalizedText]
  public init(items: [heresdk.LocalizedText] = [])
  public func preferredValue(for locales: [Foundation.Locale]) -> Swift.String?
  public func defaultValue() -> Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.LocalizedTexts, b: heresdk.LocalizedTexts) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Location : Swift.Hashable {
  public var coordinates: heresdk.GeoCoordinates
  public var bearingInDegrees: Swift.Double?
  public var speedInMetersPerSecond: Swift.Double?
  public var time: Foundation.Date?
  public var horizontalAccuracyInMeters: Swift.Double?
  public var verticalAccuracyInMeters: Swift.Double?
  public var bearingAccuracyInDegrees: Swift.Double?
  public var speedAccuracyInMetersPerSecond: Swift.Double?
  public var timestampSinceBoot: Foundation.TimeInterval?
  public var locationTechnology: heresdk.LocationTechnology?
  public var gnssTime: Foundation.TimeInterval?
  public var pitchInDegrees: Swift.Double?
  public init(coordinates: heresdk.GeoCoordinates, bearingInDegrees: Swift.Double? = nil, speedInMetersPerSecond: Swift.Double? = nil, time: Foundation.Date? = nil, horizontalAccuracyInMeters: Swift.Double? = nil, verticalAccuracyInMeters: Swift.Double? = nil, bearingAccuracyInDegrees: Swift.Double? = nil, speedAccuracyInMetersPerSecond: Swift.Double? = nil, timestampSinceBoot: Foundation.TimeInterval? = nil, locationTechnology: heresdk.LocationTechnology? = nil, gnssTime: Foundation.TimeInterval? = nil, pitchInDegrees: Swift.Double? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Location, b: heresdk.Location) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol LocationDelegate : AnyObject {
  func onLocationUpdated(_ location: heresdk.Location)
}
public enum LocationTechnology : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case cellular
  case gnss
  case hdGnss
  case wifi
  case deadReckoning
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.LocationTechnology]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.LocationTechnology] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct LocationTime : Swift.Hashable {
  public let localTime: Foundation.Date
  public let utcTime: Foundation.Date
  public let utcOffset: Foundation.TimeInterval
  public init(localTime: Foundation.Date, utcTime: Foundation.Date, utcOffset: Foundation.TimeInterval)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.LocationTime, b: heresdk.LocationTime) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct NetworkEndpoint : Swift.Hashable {
  public var address: Network.IPAddress
  public var port: Swift.UInt16?
  public init(address: Network.IPAddress, port: Swift.UInt16?)
  public init(address: Network.IPAddress)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ParameterConfiguration : Swift.Hashable {
  public var pedestrian: heresdk.ParameterConfiguration.Pedestrian
  public init()
  public struct Pedestrian : Swift.Hashable {
    public var walkingSpeedInMetersPerSecond: Swift.Double
    public init()
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: heresdk.ParameterConfiguration.Pedestrian, b: heresdk.ParameterConfiguration.Pedestrian) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.ParameterConfiguration, b: heresdk.ParameterConfiguration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct PedestrianProfile : Swift.Hashable {
  public var walkingSpeedInMetersPerSecond: Swift.Double
  public init(walkingSpeedInMetersPerSecond: Swift.Double = 1.0)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.PedestrianProfile, b: heresdk.PedestrianProfile) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TimeRule {
  public init(timeRule: Swift.String, timeZoneOffsetSeconds: Swift.Int32, dstSpec: Swift.String)
  public var timeRuleString: Swift.String {
    get
  }
  public var timeZoneOffsetSeconds: Swift.Int32 {
    get
  }
  public var dstSpec: Swift.String {
    get
  }
  @objc deinit
  public func appliesTo(dateTime: Foundation.Date) -> Swift.Bool
}
extension heresdk.TimeRule : Swift.Hashable {
  public static func == (lhs: heresdk.TimeRule, rhs: heresdk.TimeRule) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TransportProfile : Swift.Hashable {
  public var pedestrianProfile: heresdk.PedestrianProfile
  public var vehicleProfile: heresdk.VehicleProfile?
  public init(pedestrianProfile: heresdk.PedestrianProfile = PedestrianProfile(), vehicleProfile: heresdk.VehicleProfile? = VehicleProfile(vehicleType: VehicleType.car))
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TransportProfile, b: heresdk.TransportProfile) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum UnitSystem : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case metric
  case imperialUk
  case imperialUs
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.UnitSystem]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.UnitSystem] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class AuthenticationMode {
  @objc deinit
  public static func withToken(accessToken: Swift.String) -> heresdk.AuthenticationMode
  public static func withExternal() -> heresdk.AuthenticationMode
  public static func withKeySecret(accessKeyId: Swift.String, accessKeySecret: Swift.String) -> heresdk.AuthenticationMode
}
extension heresdk.AuthenticationMode : Swift.Hashable {
  public static func == (lhs: heresdk.AuthenticationMode, rhs: heresdk.AuthenticationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CatalogConfiguration : Swift.Hashable {
  public var catalog: heresdk.DesiredCatalog
  public var patchHrn: Swift.String?
  public var cacheExpirationPeriod: Foundation.TimeInterval?
  public var allowDownload: Swift.Bool
  public init(catalog: heresdk.DesiredCatalog, patchHrn: Swift.String? = nil, cacheExpirationPeriod: Foundation.TimeInterval? = nil, allowDownload: Swift.Bool = true)
  public static func getDefault(catalogType: heresdk.CatalogType) -> heresdk.CatalogConfiguration
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.CatalogConfiguration, b: heresdk.CatalogConfiguration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct CatalogIdentifier : Swift.Hashable {
  public var hrn: Swift.String
  public var version: Swift.Int64?
  public init(hrn: Swift.String = "hrn:here:data::olp-here:ocm", version: Swift.Int64? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.CatalogIdentifier, b: heresdk.CatalogIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum CatalogType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case optimizedClientMap
  case optimizedClientMapJapan
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.CatalogType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.CatalogType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class CatalogVersionHint {
  @objc deinit
  public static func specific(version: Swift.Int64) -> heresdk.CatalogVersionHint
  public static func latest(ignoreCachedData: Swift.Bool) -> heresdk.CatalogVersionHint
}
extension heresdk.CatalogVersionHint : Swift.Hashable {
  public static func == (lhs: heresdk.CatalogVersionHint, rhs: heresdk.CatalogVersionHint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CertificateSettings : Swift.Hashable {
  public var clientCertFileBlob: Swift.String
  public var clientKeyFileBlob: Swift.String
  public var certFileBlob: Swift.String
  public init(clientCertFileBlob: Swift.String, clientKeyFileBlob: Swift.String, certFileBlob: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.CertificateSettings, b: heresdk.CertificateSettings) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct DesiredCatalog : Swift.Hashable {
  public var id: heresdk.CatalogIdentifier
  public init(hrn: Swift.String, version: heresdk.CatalogVersionHint)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.DesiredCatalog, b: heresdk.DesiredCatalog) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum EngineBaseURL : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case searchEngine
  case routingEngine
  case authentication
  case dsProxy
  case trafficData
  case trafficVectorTileService
  case rasterTileService
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.EngineBaseURL]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.EngineBaseURL] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct EngineOptions : Swift.Hashable {
  public var customBaseUrl: Swift.String?
  public var customAuthenticationMode: heresdk.AuthenticationMode?
  public init(customBaseUrl: Swift.String? = nil, customAuthenticationMode: heresdk.AuthenticationMode? = nil)
  public static func == (lhs: heresdk.EngineOptions, rhs: heresdk.EngineOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LayerConfiguration : Swift.Hashable {
  public var enabledFeatures: [heresdk.LayerConfiguration.Feature]
  public var implicitlyPrefetchedFeatures: [heresdk.LayerConfiguration.Feature]
  public init(enabledFeatures: [heresdk.LayerConfiguration.Feature])
  public enum Feature : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case detailRendering
    case navigation
    case offlineSearch
    case offlineRouting
    case rendering
    case truck
    case landmarks3d
    @available(*, deprecated, message: "This feature has been renamed to `LayerConfiguration.Feature.rdsTraffic` and will be removed in v4.23.0. Please use `LayerConfiguration.Feature.rdsTraffic` instead.")
    case traffic
    case ev
    case truckServiceAttributes
    case fuelStationAttributes
    case offlineBusRouting
    case junctionView3x4
    case junctionView16x9
    case junctionSign3x4
    case junctionSign3x5
    case junctionSign4x3
    case junctionSign5x3
    case junctionSign16x9
    case terrain
    case adas
    case ehorizon
    case rdsTraffic
    public static var allCases: [heresdk.LayerConfiguration.Feature] {
      get
    }
    public enum Key : Swift.CodingKey {
      case rawValue
      public static func == (a: heresdk.LayerConfiguration.Feature.Key, b: heresdk.LayerConfiguration.Feature.Key) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public var hashValue: Swift.Int {
        get
      }
      public var intValue: Swift.Int? {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public enum CodingError : Swift.Error {
      case unknownValue
      public static func == (a: heresdk.LayerConfiguration.Feature.CodingError, b: heresdk.LayerConfiguration.Feature.CodingError) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.LayerConfiguration.Feature]
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.LayerConfiguration, b: heresdk.LayerConfiguration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol LogAppender : AnyObject {
  func log(level: heresdk.LogLevel, message: Swift.String)
}
@_hasMissingDesignatedInitializers public class LogControl {
  public typealias InvalidPathError = Swift.String
  @objc deinit
  public static func enableLoggingToConsole(level: heresdk.LogLevel)
  public static func disableLoggingToConsole()
  public static func setAppender(level: heresdk.LogLevel, appender: heresdk.LogAppender)
  public static func setAppender(level: heresdk.LogLevel, path: Swift.String) throws
  public static func removeAppender()
}
extension heresdk.LogControl : Swift.Hashable {
  public static func == (lhs: heresdk.LogControl, rhs: heresdk.LogControl) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.String : Swift.Error {
}
public enum LogLevel : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case logLevelInfo
  case logLevelWarning
  case logLevelError
  case logLevelFatal
  case logLevelOff
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.LogLevel]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.LogLevel] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct NetworkSettings : Swift.Hashable {
  public var proxySettings: heresdk.ProxySettings?
  public init(proxySettings: heresdk.ProxySettings? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.NetworkSettings, b: heresdk.NetworkSettings) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum PassThroughFeature : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case trafficData
  case trafficTilesFlow
  case trafficTilesIncidents
  case onlineRouting
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.PassThroughFeature]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.PassThroughFeature] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct ProxySettings : Swift.Hashable {
  public var type: heresdk.ProxySettings.ProxyType
  public var ipAddress: Network.IPAddress
  public var port: Swift.UInt16
  public var credentials: heresdk.ProxySettings.Credentials?
  public init(type: heresdk.ProxySettings.ProxyType, ipAddress: Network.IPAddress, port: Swift.UInt16, credentials: heresdk.ProxySettings.Credentials? = nil)
  public enum ProxyType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case http
    case https
    case socks5
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.ProxySettings.ProxyType]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.ProxySettings.ProxyType] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct Credentials : Swift.Hashable {
    public var userName: Swift.String
    public var password: Swift.String
    public init(userName: Swift.String, password: Swift.String)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: heresdk.ProxySettings.Credentials, b: heresdk.ProxySettings.Credentials) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SDKBuildInformation {
  @objc deinit
  public static func sdkVersion() -> heresdk.SDKVersion
}
extension heresdk.SDKBuildInformation : Swift.Hashable {
  public static func == (lhs: heresdk.SDKBuildInformation, rhs: heresdk.SDKBuildInformation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SDKNativeEngine {
  public init(options: heresdk.SDKOptions) throws
  public var options: heresdk.SDKOptions {
    get
  }
  public static var sharedInstance: heresdk.SDKNativeEngine? {
    get
    set
  }
  public var isOfflineMode: Swift.Bool {
    get
    set
  }
  public var passThroughFeatures: Swift.Set<heresdk.PassThroughFeature>? {
    get
    set
  }
  public static var parameterConfig: heresdk.ParameterConfiguration {
    get
    set
  }
  public var proxySettings: heresdk.ProxySettings? {
    get
    set
  }
  public var sdkUsageStats: [heresdk.UsageStats] {
    get
  }
  @objc deinit
  public func setAccessKeySecret(accessKeySecret: Swift.String)
  public func setAccessScope(scope: Swift.String)
  public func enableUsageStats(enabled: Swift.Bool)
  public static func makeSharedInstance(options: heresdk.SDKOptions) throws
  public func clearPersistentUsageStats()
  public func clearUsageStatsCache()
}
extension heresdk.SDKNativeEngine : Swift.Hashable {
  public static func == (lhs: heresdk.SDKNativeEngine, rhs: heresdk.SDKNativeEngine) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SDKOptions : Swift.Hashable {
  @available(*, deprecated, message: "Will be removed in v4.23.0. Please use constructor with AuthenticationMode")
  public var accessKeyId: Swift.String
  @available(*, deprecated, message: "Will be removed in v4.23.0. Please use constructor with AuthenticationMode")
  public var accessKeySecret: Swift.String
  public var scope: Swift.String
  public var cachePath: Swift.String
  public var cacheSizeInBytes: Swift.Int64
  public var dataPath: Swift.String
  public var persistentMapStoragePath: Swift.String
  public var politicalView: Swift.String
  public var offlineMode: Swift.Bool
  public var layerConfiguration: heresdk.LayerConfiguration
  public var catalogConfigurations: [heresdk.CatalogConfiguration]
  public var autoUpdateOfOnlineCache: Swift.Bool
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `SDKOptions.customEngineOptions` instead")
  public var customEngineBaseUrls: [heresdk.EngineBaseURL : Swift.String]
  public var customEngineOptions: [heresdk.EngineBaseURL : heresdk.EngineOptions]
  public var authenticationMode: heresdk.AuthenticationMode
  public var networkSettings: heresdk.NetworkSettings
  public var billingTag: Swift.String?
  public init(authenticationMode: heresdk.AuthenticationMode)
  @available(*, deprecated, message: "Will be removed in v4.23.0. Please use constructor with AuthenticationMode")
  public init(accessKeyId: Swift.String)
  @available(*, deprecated, message: "Will be removed in v4.23.0. Please use constructor with AuthenticationMode")
  public init(accessKeyId: Swift.String, accessKeySecret: Swift.String)
  @available(*, deprecated, message: "Will be removed in v4.23.0. Please use constructor with AuthenticationMode")
  public init(accessKeyId: Swift.String, accessKeySecret: Swift.String, cachePath: Swift.String)
  @available(*, deprecated, message: "Will be removed in v4.23.0. Please use constructor with AuthenticationMode")
  public init(accessKeyId: Swift.String, accessKeySecret: Swift.String, cachePath: Swift.String, cacheSizeInBytes: Swift.Int64)
  @available(*, deprecated, message: "Will be removed in v4.23.0. Please use constructor with AuthenticationMode")
  public init(accessKeyId: Swift.String, accessKeySecret: Swift.String, cachePath: Swift.String, cacheSizeInBytes: Swift.Int64, persistentMapStoragePath: Swift.String)
  @available(*, deprecated, message: "Will be removed in v4.23.0. Please use constructor with AuthenticationMode")
  public init(accessKeyId: Swift.String, accessKeySecret: Swift.String, cachePath: Swift.String, cacheSizeInBytes: Swift.Int64, persistentMapStoragePath: Swift.String, politicalView: Swift.String)
  public static func == (lhs: heresdk.SDKOptions, rhs: heresdk.SDKOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SDKVersion : Swift.Hashable {
  public var productVariant: Swift.String
  public var versionName: Swift.String
  public var versionGeneration: Swift.Int32
  public var versionMajor: Swift.Int32
  public var versionMinor: Swift.Int32
  public var versionPatch: Swift.Int32
  public var versionBuild: Swift.Int32
  public var versionTag: Swift.String
  public var backendConfig: Swift.String
  public init(productVariant: Swift.String, versionName: Swift.String, versionGeneration: Swift.Int32, versionMajor: Swift.Int32, versionMinor: Swift.Int32, versionPatch: Swift.Int32, versionBuild: Swift.Int32, versionTag: Swift.String, backendConfig: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.SDKVersion, b: heresdk.SDKVersion) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct UsageStats {
  public var networkStats: [heresdk.UsageStats.NetworkStats]
  public var feature: heresdk.UsageStats.Feature
  public init(networkStats: [heresdk.UsageStats.NetworkStats], feature: heresdk.UsageStats.Feature)
  public enum Feature : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case detailedRendering
    case evRendering
    case evSearch
    case navigation
    case places
    case rdsTraffic
    case rendering
    case router
    case routing
    case satellites
    case search
    case searchOnline
    case transit
    case transitRoutingEngine
    case traffic
    case trafficVectorTiles
    case truck
    case vectorTiles
    case other
    case positioning
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.UsageStats.Feature]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.UsageStats.Feature] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct NetworkStats {
    public var sentBytes: Swift.UInt64
    public var receivedBytes: Swift.UInt64
    public var methodCall: Swift.String
    public var requestCounter: Swift.UInt32
    public init(sentBytes: Swift.UInt64, receivedBytes: Swift.UInt64, methodCall: Swift.String, requestCounter: Swift.UInt32)
  }
  public struct MethodNames {
    public static let defaultNetworkCall: Swift.String
    public static let analytics: Swift.String
    public static let authentication: Swift.String
    public static let calculateRoute: Swift.String
    public static let calculateTransitRoute: Swift.String
    public static let calculateRouteWithTraffic: Swift.String
    public static let mapContent: Swift.String
    public static let searchMethod: Swift.String
    public static let trafficFetchIncidents: Swift.String
  }
}
public protocol PlatformThreading : AnyObject {
  func runOnMainThread(runnable: heresdk.Runnable) -> heresdk.TaskHandle
  func postToMainThread(runnable: heresdk.Runnable, delayMs: Swift.UInt64) -> heresdk.TaskHandle
  func postToMainThread(runnable: heresdk.Runnable) -> heresdk.TaskHandle
}
public protocol Runnable : AnyObject {
  func run()
}
public typealias TaskCompletionHandler = (heresdk.TaskOutcome) -> Swift.Void
public protocol TaskHandle : AnyObject {
  var isFinished: Swift.Bool { get }
  var isCancelled: Swift.Bool { get }
  func cancel() -> Swift.Bool
}
public enum TaskOutcome : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case completed
  case cancelled
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TaskOutcome]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TaskOutcome] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class Threading {
  @objc deinit
  public static func setPlatformThreading(platformThreading: heresdk.PlatformThreading)
  public static func getPlatformThreading() -> heresdk.PlatformThreading
}
extension heresdk.Threading : Swift.Hashable {
  public static func == (lhs: heresdk.Threading, rhs: heresdk.Threading) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AccessAttributes : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case open
  case noThrough
  case tollRoad
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.AccessAttributes]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.AccessAttributes] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct DynamicSpeedInfo : Swift.Hashable {
  public var baseSpeedInMetersPerSecond: Swift.Double
  public var trafficSpeedInMetersPerSecond: Swift.Double
  public var turnTimeInSeconds: Swift.Int32
  public init(baseSpeedInMetersPerSecond: Swift.Double, trafficSpeedInMetersPerSecond: Swift.Double, turnTimeInSeconds: Swift.Int32)
  public func calculateJamFactor() -> Swift.Double
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.DynamicSpeedInfo, b: heresdk.DynamicSpeedInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum FunctionalRoadClass : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case functionalRoadClass1
  case functionalRoadClass2
  case functionalRoadClass3
  case functionalRoadClass4
  case functionalRoadClass5
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.FunctionalRoadClass]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.FunctionalRoadClass] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct LocalizedRoadNumber : Swift.Hashable {
  public var localizedNumber: heresdk.LocalizedText
  public var direction: heresdk.CardinalDirection?
  public var routeType: heresdk.RouteType
  public init(localizedNumber: heresdk.LocalizedText, direction: heresdk.CardinalDirection? = nil, routeType: heresdk.RouteType)
  public func completeRoadNumber() -> Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.LocalizedRoadNumber, b: heresdk.LocalizedRoadNumber) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct LocalizedRoadNumbers : Swift.Hashable {
  public var items: [heresdk.LocalizedRoadNumber]
  public init()
  public func preferredValue(for locales: [Foundation.Locale]) -> Swift.String?
  public func defaultValue() -> Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.LocalizedRoadNumbers, b: heresdk.LocalizedRoadNumbers) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct SegmentReference : Swift.Hashable {
  public var segmentId: Swift.String
  public var travelDirection: heresdk.TravelDirection
  public var offsetStart: Swift.Double
  public var offsetEnd: Swift.Double
  public var tilePartitionId: Swift.UInt32
  public var localId: Swift.UInt32?
  public init(segmentId: Swift.String = "", travelDirection: heresdk.TravelDirection = TravelDirection.bidirectional, offsetStart: Swift.Double = 0.0, offsetEnd: Swift.Double = 1.0, tilePartitionId: Swift.UInt32 = 0, localId: Swift.UInt32? = 0)
  public static func fromString(segmentRef: Swift.String) -> heresdk.SegmentReference?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.SegmentReference, b: heresdk.SegmentReference) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum StreetAttributes : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case rightDrivingSide
  case dirtRoad
  case tunnel
  case bridge
  case ramp
  case roundabout
  case underConstruction
  case dividedRoad
  case motorway
  case privateRoad
  case builtUpArea
  case controlledAccessHighway
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.StreetAttributes]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.StreetAttributes] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum TravelDirection : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case positive
  case negative
  case bidirectional
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TravelDirection]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TravelDirection] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum WalkAttributes : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case stairs
  case park
  case indoor
  case open
  case noThrough
  case tollRoad
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.WalkAttributes]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.WalkAttributes] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum EmissionStandard : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case euro2
  case euro3
  case euro4
  case euro5
  case euro6
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.EmissionStandard]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.EmissionStandard] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum FuelAdditiveType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case aus32
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.FuelAdditiveType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.FuelAdditiveType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum FuelCategory : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case ethanol
  case gasoline
  case diesel
  case biodiesel
  case naturalGas
  case hydrogen
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.FuelCategory]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.FuelCategory] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum FuelType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case diesel
  case lpg
  case bioDiesel
  case cng
  case dieselWithAdditives
  case e10
  case e20
  case e85
  case ethanol
  case ethanolWithAdditives
  case gasoline
  case gasohol91
  case gasohol95
  case hvo
  case hydrogen
  case lng
  case midgrade
  case premium
  case premiumWithAdditives
  case regular
  case regularWithAdditives
  case octane87
  case octane89
  case octane90
  case octane91
  case octane92
  case octane93
  case octane95
  case octane98
  case octane100
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.FuelType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.FuelType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct GeneralVehicleSpeedLimits : Swift.Hashable {
  public var maxSpeedHighwaysInMetersPerSecond: Swift.Double?
  public var maxSpeedRuralInMetersPerSecond: Swift.Double?
  public var maxSpeedUrbanInMetersPerSecond: Swift.Double?
  public init(maxSpeedHighwaysInMetersPerSecond: Swift.Double? = nil, maxSpeedRuralInMetersPerSecond: Swift.Double? = nil, maxSpeedUrbanInMetersPerSecond: Swift.Double? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeneralVehicleSpeedLimits, b: heresdk.GeneralVehicleSpeedLimits) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum PlateNumberType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case odd
  case even
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.PlateNumberType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.PlateNumberType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum TransportMode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case car
  case truck
  case pedestrian
  case scooter
  case bicycle
  case publicTransit
  case taxi
  case bus
  case privateBus
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TransportMode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TransportMode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum TruckClass : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case lightClass
  case mediumClass
  case heavyClass
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TruckClass]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TruckClass] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum TruckFuelType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case cng
  case diesel
  case hydrogen
  case lng
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TruckFuelType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TruckFuelType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct VehicleEquipment : Swift.Hashable {
  public var hasSnowChains: Swift.Bool
  public var hasWinterTyres: Swift.Bool
  public init(hasSnowChains: Swift.Bool = false, hasWinterTyres: Swift.Bool = false)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.VehicleEquipment, b: heresdk.VehicleEquipment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct VehicleProfile : Swift.Hashable {
  public var vehicleType: heresdk.VehicleType
  public var truckType: heresdk.TruckType?
  public var trailerCount: Swift.Int32
  public var hazardousMaterials: [heresdk.HazardousMaterial]
  public var tunnelCategory: heresdk.TunnelCategory?
  public var axleCount: Swift.Int32?
  public var grossWeightInKilograms: Swift.Int32?
  public var heightInCentimeters: Swift.Int32?
  public var lengthInCentimeters: Swift.Int32?
  public var widthInCentimeters: Swift.Int32?
  public var weightPerAxleInKilograms: Swift.Int32?
  public init(vehicleType: heresdk.VehicleType = VehicleType.car, truckType: heresdk.TruckType? = nil, trailerCount: Swift.Int32 = 0, hazardousMaterials: [heresdk.HazardousMaterial] = [], tunnelCategory: heresdk.TunnelCategory? = nil, axleCount: Swift.Int32? = nil, grossWeightInKilograms: Swift.Int32? = nil, heightInCentimeters: Swift.Int32? = nil, lengthInCentimeters: Swift.Int32? = nil, widthInCentimeters: Swift.Int32? = nil, weightPerAxleInKilograms: Swift.Int32? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.VehicleProfile, b: heresdk.VehicleProfile) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum VehicleType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case car
  case truck
  case bicycle
  case bus
  case motorcycle
  case scooter
  case privateBus
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.VehicleType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.VehicleType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public protocol DoubleTapDelegate : AnyObject {
  func onDoubleTap(origin: heresdk.Point2D)
}
public enum GestureState : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case begin
  case update
  case end
  case cancel
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.GestureState]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.GestureState] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum GestureType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case twoFingerTap
  case doubleTap
  case pan
  case twoFingerPan
  case pinchRotate
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.GestureType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.GestureType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class Gestures {
  weak public var tapDelegate: heresdk.TapDelegate? {
    get
    set
  }
  weak public var doubleTapDelegate: heresdk.DoubleTapDelegate? {
    get
    set
  }
  weak public var pinchRotateDelegate: heresdk.PinchRotateDelegate? {
    get
    set
  }
  weak public var longPressDelegate: heresdk.LongPressDelegate? {
    get
    set
  }
  weak public var panDelegate: heresdk.PanDelegate? {
    get
    set
  }
  weak public var twoFingerTapDelegate: heresdk.TwoFingerTapDelegate? {
    get
    set
  }
  weak public var twoFingerPanDelegate: heresdk.TwoFingerPanDelegate? {
    get
    set
  }
  @objc deinit
  public func enableDefaultAction(forGesture gestureType: heresdk.GestureType)
  public func disableDefaultAction(forGesture gestureType: heresdk.GestureType)
}
extension heresdk.Gestures : Swift.Hashable {
  public static func == (lhs: heresdk.Gestures, rhs: heresdk.Gestures) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class InternalGestureDetector {
  @objc deinit
}
extension heresdk.InternalGestureDetector : Swift.Hashable {
  public static func == (lhs: heresdk.InternalGestureDetector, rhs: heresdk.InternalGestureDetector) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol LongPressDelegate : AnyObject {
  func onLongPress(state: heresdk.GestureState, origin: heresdk.Point2D)
}
public protocol PanDelegate : AnyObject {
  func onPan(state: heresdk.GestureState, origin: heresdk.Point2D, translation: heresdk.Point2D, velocity: Swift.Double)
}
public protocol PinchRotateDelegate : AnyObject {
  func onPinchRotate(state: heresdk.GestureState, pinchOrigin: heresdk.Point2D, rotationOrigin: heresdk.Point2D, twoFingerDistance: Swift.Double, rotation: heresdk.Angle)
}
public protocol TapDelegate : AnyObject {
  func onTap(origin: heresdk.Point2D)
}
public protocol TwoFingerPanDelegate : AnyObject {
  func onTwoFingerPan(state: heresdk.GestureState, origin: heresdk.Point2D, translation: heresdk.Point2D, velocity: Swift.Double)
}
public protocol TwoFingerTapDelegate : AnyObject {
  func onTwoFingerTap(origin: heresdk.Point2D)
}
@_hasMissingDesignatedInitializers public class LocationIndicator {
  public init()
  public init(for mapView: heresdk.MapViewBase)
  public var isAccuracyVisualized: Swift.Bool {
    get
    set
  }
  public var locationIndicatorStyle: heresdk.LocationIndicator.IndicatorStyle {
    get
    set
  }
  public var isActive: Swift.Bool {
    get
    set
  }
  public var opacity: Swift.Double {
    get
    set
  }
  @objc deinit
  public enum IndicatorStyle : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case pedestrian
    case navigation
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.LocationIndicator.IndicatorStyle]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.LocationIndicator.IndicatorStyle] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public enum MarkerType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case pedestrian
    case pedestrianInactive
    case navigation
    case navigationInactive
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.LocationIndicator.MarkerType]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.LocationIndicator.MarkerType] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public func enable(for mapView: heresdk.MapViewBase)
  public func disable()
  public func updateLocation(_ location: heresdk.Location)
  public func updateLocation(_ location: heresdk.Location, cameraUpdate: heresdk.MapCameraUpdate)
  public func setMarker3dModel(_ model: heresdk.MapMarker3DModel, scale: Swift.Double, type: heresdk.LocationIndicator.MarkerType)
  public func setHaloColor(_ style: heresdk.LocationIndicator.IndicatorStyle, color: UIKit.UIColor)
  public func getHaloColor(_ style: heresdk.LocationIndicator.IndicatorStyle) -> UIKit.UIColor
}
extension heresdk.LocationIndicator : Swift.Hashable {
  public static func == (lhs: heresdk.LocationIndicator, rhs: heresdk.LocationIndicator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapContentSettings {
  public typealias TrafficRefreshPeriodError = heresdk.MapContentSettings.TrafficRefreshPeriodErrorCode
  @objc deinit
  public enum TrafficRefreshPeriodErrorCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case internalError
    case valueOutsideAllowedRange
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.MapContentSettings.TrafficRefreshPeriodErrorCode]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.MapContentSettings.TrafficRefreshPeriodErrorCode] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func filterTrafficIncidents(trafficIncidents: [heresdk.TrafficIncidentType])
  public static func resetTrafficIncidentFilter()
  public static func setTrafficRefreshPeriod(_ value: Foundation.TimeInterval) throws
  public static func resetTrafficRefreshPeriod()
}
extension heresdk.MapContentSettings : Swift.Hashable {
  public static func == (lhs: heresdk.MapContentSettings, rhs: heresdk.MapContentSettings) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.MapContentSettings.TrafficRefreshPeriodErrorCode : Swift.Error {
}
@_hasMissingDesignatedInitializers public class MapPickResult {
  public var mapItems: heresdk.PickMapItemsResult? {
    get
  }
  public var mapContent: heresdk.PickMapContentResult? {
    get
  }
  public var customLayerObjectDescriptors: [heresdk.MapObjectDescriptor]? {
    get
  }
  @objc deinit
}
extension heresdk.MapPickResult : Swift.Hashable {
  public static func == (lhs: heresdk.MapPickResult, rhs: heresdk.MapPickResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MapViewBase : AnyObject {
  @available(*, deprecated, message: "Will be removed in v4.22.0.")
  typealias PickMapItemsHandler = (heresdk.PickMapItemsResult?) -> Swift.Void
  @available(*, deprecated, message: "Will be removed in v4.22.0.")
  typealias PickMapContentHandler = (heresdk.PickMapContentResult?) -> Swift.Void
  typealias PickMapHandler = (heresdk.MapPickResult?) -> Swift.Void
  var isValid: Swift.Bool { get }
  var camera: heresdk.MapCamera { get }
  var gestures: heresdk.Gestures { get }
  var mapScene: heresdk.MapScene { get }
  var mapContext: heresdk.MapContext { get }
  var hereMap: heresdk.HereMap { get }
  var viewportSize: heresdk.Size2D { get }
  var frameRate: Swift.Int32 { get set }
  var pixelScale: Swift.Double { get }
  var watermarkSize: heresdk.Size2D { get }
  func viewToGeoCoordinates(viewCoordinates: heresdk.Point2D) -> heresdk.GeoCoordinates?
  func geoToViewCoordinates(geoCoordinates: heresdk.GeoCoordinates) -> heresdk.Point2D?
  func setWatermarkLocation(anchor: heresdk.Anchor2D, offset: heresdk.Point2D)
  func addLifecycleDelegate(_ lifecycleListener: heresdk.MapViewLifecycleDelegate)
  func removeLifecycleDelegate(_ lifecycleListener: heresdk.MapViewLifecycleDelegate)
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `pick(...)` instead.")
  func pickMapItems(at centerPoint: heresdk.Point2D, radius: Swift.Double, completion callback: @escaping (heresdk.PickMapItemsResult?) -> Swift.Void)
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `pick(...)` instead.")
  func pickMapContent(inside viewArea: heresdk.Rectangle2D, completion callback: @escaping (heresdk.PickMapContentResult?) -> Swift.Void)
  func pick(filter: heresdk.MapScene.MapPickFilter?, inside viewArea: heresdk.Rectangle2D, completion: @escaping (heresdk.MapPickResult?) -> Swift.Void)
}
public protocol MapViewLifecycleDelegate : AnyObject {
  func onAttach(to mapView: heresdk.MapViewBase)
  func onDetach(from mapView: heresdk.MapViewBase)
  func onPause()
  func onResume()
  func onDestroy()
}
public struct MapViewOptions : Swift.Hashable {
  public var projection: heresdk.MapProjection
  public var initialBackgroundColor: UIKit.UIColor?
  public init(projection: heresdk.MapProjection = MapProjection.globe, initialBackgroundColor: UIKit.UIColor? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.MapViewOptions, b: heresdk.MapViewOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PickMapContentResult {
  public var pickedPlaces: [heresdk.PickedPlace] {
    get
  }
  public var trafficIncidents: [heresdk.PickMapContentResult.TrafficIncidentResult] {
    get
  }
  @objc deinit
  @_hasMissingDesignatedInitializers public class TrafficIncidentResult : heresdk.TrafficIncidentBase {
    public var impact: heresdk.TrafficIncidentImpact {
      get
    }
    public var type: heresdk.TrafficIncidentType {
      get
    }
    public var description: heresdk.LocalizedText {
      get
    }
    public var startTime: Foundation.Date? {
      get
    }
    public var endTime: Foundation.Date? {
      get
    }
    public var originalId: Swift.String {
      get
    }
    public var coordinates: heresdk.GeoCoordinates {
      get
    }
    @objc deinit
  }
}
extension heresdk.PickMapContentResult : Swift.Hashable {
  public static func == (lhs: heresdk.PickMapContentResult, rhs: heresdk.PickMapContentResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension heresdk.PickMapContentResult.TrafficIncidentResult : Swift.Hashable {
  public static func == (lhs: heresdk.PickMapContentResult.TrafficIncidentResult, rhs: heresdk.PickMapContentResult.TrafficIncidentResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RouteStop {
  public var locationIndex: Swift.Int32
  public var stopDuration: Foundation.TimeInterval
  public init(locationIndex: Swift.Int32, stopDuration: Foundation.TimeInterval = 0)
}
@_hasMissingDesignatedInitializers public class RoutingEngine : heresdk.RoutingProtocol {
  public init() throws
  public init(_ sdkEngine: heresdk.SDKNativeEngine) throws
  public init(connectionSettings: heresdk.RoutingConnectionSettings) throws
  public init(_ sdkEngine: heresdk.SDKNativeEngine, connectionSettings: heresdk.RoutingConnectionSettings) throws
  @objc deinit
  @discardableResult
  public func calculateRoute(with waypoints: [heresdk.Waypoint], carOptions: heresdk.CarOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func calculateRoute(with waypoints: [heresdk.Waypoint], pedestrianOptions: heresdk.PedestrianOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func calculateRoute(with waypoints: [heresdk.Waypoint], truckOptions: heresdk.TruckOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func calculateRoute(with waypoints: [heresdk.Waypoint], scooterOptions: heresdk.ScooterOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func calculateRoute(with waypoints: [heresdk.Waypoint], bicycleOptions: heresdk.BicycleOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func calculateRoute(with waypoints: [heresdk.Waypoint], taxiOptions: heresdk.TaxiOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func calculateRoute(with waypoints: [heresdk.Waypoint], evCarOptions: heresdk.EVCarOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func calculateRoute(with waypoints: [heresdk.Waypoint], evTruckOptions: heresdk.EVTruckOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func calculateRoute(with waypoints: [heresdk.Waypoint], busOptions: heresdk.BusOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func calculateRoute(with waypoints: [heresdk.Waypoint], privateBusOptions: heresdk.PrivateBusOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func returnToRoute(_ route: heresdk.Route, startingPoint: heresdk.Waypoint, lastTraveledSectionIndex: Swift.Int32, traveledDistanceOnLastSectionInMeters: Swift.Int32, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func refreshRoute(routeHandle: heresdk.RouteHandle, startingPoint: heresdk.Waypoint, refreshRouteOptions: heresdk.RefreshRouteOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func refreshRoute(routeHandle: heresdk.RouteHandle, startingPoint: heresdk.Waypoint?, lastTraveledSectionIndex: Swift.Int32?, traveledDistanceOnLastSectionInMeters: Swift.Int32?, refreshRouteOptions: heresdk.RefreshRouteOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(routeHandle: heresdk.RouteHandle, refreshRouteOptions: heresdk.RefreshRouteOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], carOptions: heresdk.CarOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], routeStops: [heresdk.RouteStop], pedestrianOptions: heresdk.PedestrianOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], routeStops: [heresdk.RouteStop], bicycleOptions: heresdk.BicycleOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], routeStops: [heresdk.RouteStop], scooterOptions: heresdk.ScooterOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], pedestrianOptions: heresdk.PedestrianOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], bicycleOptions: heresdk.BicycleOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], scooterOptions: heresdk.ScooterOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], truckOptions: heresdk.TruckOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], taxiOptions: heresdk.TaxiOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], busOptions: heresdk.BusOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], privateBusOptions: heresdk.PrivateBusOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], evCarOptions: heresdk.EVCarOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], evTruckOptions: heresdk.EVTruckOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], routeStops: [heresdk.RouteStop], carOptions: heresdk.CarOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], routeStops: [heresdk.RouteStop], truckOptions: heresdk.TruckOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], routeStops: [heresdk.RouteStop], taxiOptions: heresdk.TaxiOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], routeStops: [heresdk.RouteStop], busOptions: heresdk.BusOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], routeStops: [heresdk.RouteStop], privateBusOptions: heresdk.PrivateBusOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], routeStops: [heresdk.RouteStop], evCarOptions: heresdk.EVCarOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func importRoute(with locations: [heresdk.Location], routeStops: [heresdk.RouteStop], evTruckOptions: heresdk.EVTruckOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  public func calculateTrafficOnRoute(route: heresdk.Route, lastTraveledSectionIndex: Swift.Int32, traveledDistanceOnLastSectionInMeters: Swift.Int32, completion: @escaping heresdk.CalculateTrafficOnRouteCompletionHandler) -> heresdk.TaskHandle
  public func calculateTrafficOnRoute(route: heresdk.Route, lastTraveledSectionIndex: Swift.Int32, traveledDistanceOnLastSectionInMeters: Swift.Int32, currentChargeInKilowattHours: Swift.Double, completion: @escaping heresdk.CalculateTrafficOnRouteCompletionHandler) -> heresdk.TaskHandle
  public func setCustomOption(name: Swift.String, value: Swift.String?) -> heresdk.RoutingError?
}
extension heresdk.RoutingEngine : Swift.Hashable {
  public static func == (lhs: heresdk.RoutingEngine, rhs: heresdk.RoutingEngine) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Agency {
  public var name: Swift.String
  public var website: Swift.String?
}
public struct AllowOptions : Swift.Hashable {
  public var allowHov: Swift.Bool
  public var allowHot: Swift.Bool
  public init(allowHov: Swift.Bool = false, allowHot: Swift.Bool = false)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.AllowOptions, b: heresdk.AllowOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Attribution {
  public var href: Swift.String?
  public var text: Swift.String
  public var hrefText: Swift.String?
  public var type: heresdk.AttributionType
}
public enum AttributionType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case disclaimer
  case tariff
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.AttributionType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.AttributionType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct AvoidBoundingBoxAreaOptions : Swift.Hashable {
  public var avoidBoundingBoxArea: heresdk.GeoBox
  public var boundingBoxExceptionAreas: [heresdk.GeoBox]
  public var polygonExceptionAreas: [heresdk.GeoPolygon]
  public var corridorExceptionAreas: [heresdk.GeoCorridor]
  public init(avoidBoundingBoxArea: heresdk.GeoBox, boundingBoxExceptionAreas: [heresdk.GeoBox] = [], polygonExceptionAreas: [heresdk.GeoPolygon] = [], corridorExceptionAreas: [heresdk.GeoCorridor] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.AvoidBoundingBoxAreaOptions, b: heresdk.AvoidBoundingBoxAreaOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct AvoidCorridorAreaOptions : Swift.Hashable {
  public var avoidCorridorArea: heresdk.GeoCorridor
  public var boundingBoxExceptionAreas: [heresdk.GeoBox]
  public var polygonExceptionAreas: [heresdk.GeoPolygon]
  public var corridorExceptionAreas: [heresdk.GeoCorridor]
  public init(avoidCorridorArea: heresdk.GeoCorridor, boundingBoxExceptionAreas: [heresdk.GeoBox] = [], polygonExceptionAreas: [heresdk.GeoPolygon] = [], corridorExceptionAreas: [heresdk.GeoCorridor] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.AvoidCorridorAreaOptions, b: heresdk.AvoidCorridorAreaOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct AvoidPolygonAreaOptions : Swift.Hashable {
  public var avoidPolygonArea: heresdk.GeoPolygon
  public var boundingBoxExceptionAreas: [heresdk.GeoBox]
  public var polygonExceptionAreas: [heresdk.GeoPolygon]
  public var corridorExceptionAreas: [heresdk.GeoCorridor]
  public init(avoidPolygonArea: heresdk.GeoPolygon, boundingBoxExceptionAreas: [heresdk.GeoBox] = [], polygonExceptionAreas: [heresdk.GeoPolygon] = [], corridorExceptionAreas: [heresdk.GeoCorridor] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.AvoidPolygonAreaOptions, b: heresdk.AvoidPolygonAreaOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct AvoidanceOptions : Swift.Hashable {
  public var roadFeatures: [heresdk.RoadFeatures]
  public var countries: [heresdk.CountryCode]
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `AvoidanceOptions.avoidBoundingBoxAreasOptions`")
  public var avoidBoundingBoxAreas: [heresdk.GeoBox]
  public var avoidBoundingBoxAreasOptions: [heresdk.AvoidBoundingBoxAreaOptions]
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `AvoidanceOptions.avoidPolygonAreasOptions`")
  public var avoidPolygonAreas: [heresdk.GeoPolygon]
  public var avoidPolygonAreasOptions: [heresdk.AvoidPolygonAreaOptions]
  public var avoidCorridorAreasOptions: [heresdk.AvoidCorridorAreaOptions]
  public var zoneCategories: [heresdk.ZoneCategory]
  public var segments: [heresdk.SegmentReference]
  public init(roadFeatures: [heresdk.RoadFeatures] = [], countries: [heresdk.CountryCode] = [], avoidBoundingBoxAreasOptions: [heresdk.AvoidBoundingBoxAreaOptions] = [], avoidPolygonAreasOptions: [heresdk.AvoidPolygonAreaOptions] = [], avoidCorridorAreasOptions: [heresdk.AvoidCorridorAreaOptions] = [], zoneCategories: [heresdk.ZoneCategory] = [], segments: [heresdk.SegmentReference] = [])
  @available(*, deprecated)
  public init(roadFeatures: [heresdk.RoadFeatures] = [], countries: [heresdk.CountryCode] = [], avoidBoundingBoxAreas: [heresdk.GeoBox] = [], avoidBoundingBoxAreasOptions: [heresdk.AvoidBoundingBoxAreaOptions] = [], avoidPolygonAreas: [heresdk.GeoPolygon] = [], avoidPolygonAreasOptions: [heresdk.AvoidPolygonAreaOptions] = [], avoidCorridorAreasOptions: [heresdk.AvoidCorridorAreaOptions] = [], zoneCategories: [heresdk.ZoneCategory] = [], segments: [heresdk.SegmentReference] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.AvoidanceOptions, b: heresdk.AvoidanceOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct BatterySpecifications : Swift.Hashable {
  public var totalCapacityInKilowattHours: Swift.Double
  public var initialChargeInKilowattHours: Swift.Double
  public var targetChargeInKilowattHours: Swift.Double
  public var chargingCurve: [Swift.Double : Swift.Double]
  public var connectorTypes: [heresdk.ChargingConnectorType]
  public var minChargeAtChargingStationInKilowattHours: Swift.Double
  public var minChargeAtFirstChargingStationInKilowattHours: Swift.Double?
  public var minChargeAtDestinationInKilowattHours: Swift.Double
  public var maxChargingVoltageInVolts: Swift.Double?
  public var maxChargingCurrentInAmperes: Swift.Double?
  public var chargingSetupDuration: Foundation.TimeInterval
  public init(totalCapacityInKilowattHours: Swift.Double = 0.0, initialChargeInKilowattHours: Swift.Double = 0.0, targetChargeInKilowattHours: Swift.Double = 0.0, chargingCurve: [Swift.Double : Swift.Double] = [:], connectorTypes: [heresdk.ChargingConnectorType] = [], minChargeAtChargingStationInKilowattHours: Swift.Double = 0.0, minChargeAtFirstChargingStationInKilowattHours: Swift.Double? = nil, minChargeAtDestinationInKilowattHours: Swift.Double = 0.0, maxChargingVoltageInVolts: Swift.Double? = nil, maxChargingCurrentInAmperes: Swift.Double? = nil, chargingSetupDuration: Foundation.TimeInterval = 0)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.BatterySpecifications, b: heresdk.BatterySpecifications) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct BicycleOptions : Swift.Hashable {
  public var routeOptions: heresdk.RouteOptions
  public var textOptions: heresdk.RouteTextOptions
  public var avoidanceOptions: heresdk.AvoidanceOptions
  public init(routeOptions: heresdk.RouteOptions = RouteOptions(), textOptions: heresdk.RouteTextOptions = RouteTextOptions(), avoidanceOptions: heresdk.AvoidanceOptions = AvoidanceOptions())
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.BicycleOptions, b: heresdk.BicycleOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct BusOptions : Swift.Hashable {
  public var routeOptions: heresdk.RouteOptions
  public var textOptions: heresdk.RouteTextOptions
  public var avoidanceOptions: heresdk.AvoidanceOptions
  public var tollOptions: heresdk.TollOptions
  public var allowOptions: heresdk.AllowOptions
  public var occupantsNumber: Swift.Int32
  public var maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment]
  public var busSpecifications: heresdk.BusSpecifications
  public init(routeOptions: heresdk.RouteOptions = RouteOptions(), textOptions: heresdk.RouteTextOptions = RouteTextOptions(), avoidanceOptions: heresdk.AvoidanceOptions = AvoidanceOptions(), tollOptions: heresdk.TollOptions = TollOptions(), allowOptions: heresdk.AllowOptions = AllowOptions(), occupantsNumber: Swift.Int32 = 1, maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment] = [], busSpecifications: heresdk.BusSpecifications = BusSpecifications())
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.BusOptions, b: heresdk.BusOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias CalculateRouteCompletionHandler = (heresdk.RoutingError?, [heresdk.Route]?) -> Swift.Void
public typealias CalculateTrafficOnRouteCompletionHandler = (heresdk.RoutingError?, heresdk.TrafficOnRoute?) -> Swift.Void
public struct CarOptions : Swift.Hashable {
  public var routeOptions: heresdk.RouteOptions
  public var textOptions: heresdk.RouteTextOptions
  public var avoidanceOptions: heresdk.AvoidanceOptions
  public var tollOptions: heresdk.TollOptions
  public var allowOptions: heresdk.AllowOptions
  public var occupantsNumber: Swift.Int32
  public var maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment]
  public var carSpecifications: heresdk.CarSpecifications
  public init(routeOptions: heresdk.RouteOptions = RouteOptions(), textOptions: heresdk.RouteTextOptions = RouteTextOptions(), avoidanceOptions: heresdk.AvoidanceOptions = AvoidanceOptions(), tollOptions: heresdk.TollOptions = TollOptions(), allowOptions: heresdk.AllowOptions = AllowOptions(), occupantsNumber: Swift.Int32 = 1, maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment] = [], carSpecifications: heresdk.CarSpecifications = CarSpecifications())
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.CarOptions, b: heresdk.CarOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ChargingActionDetails : Swift.Hashable {
  public var consumablePowerInKilowatts: Swift.Double
  public var arrivalChargeInKilowattHours: Swift.Double
  public var targetChargeInKilowattHours: Swift.Double
  public init(consumablePowerInKilowatts: Swift.Double = 0.0, arrivalChargeInKilowattHours: Swift.Double = 0.0, targetChargeInKilowattHours: Swift.Double = 0.0)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.ChargingActionDetails, b: heresdk.ChargingActionDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ChargingConnectorAttributes : Swift.Hashable {
  public var powerInKilowatts: Swift.Double
  public var currentInAmperes: Swift.Double?
  public var voltageInVolts: Swift.Double?
  public var supplyType: heresdk.ChargingSupplyType?
  public var connectorType: heresdk.ChargingConnectorType?
  public init(powerInKilowatts: Swift.Double, currentInAmperes: Swift.Double? = nil, voltageInVolts: Swift.Double? = nil, supplyType: heresdk.ChargingSupplyType? = nil, connectorType: heresdk.ChargingConnectorType? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.ChargingConnectorAttributes, b: heresdk.ChargingConnectorAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChargingConnectorType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case iec62196Type1Combo
  case iec62196Type2Combo
  case chademo
  case tesla
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.ChargingConnectorType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.ChargingConnectorType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct ChargingStation : Swift.Hashable {
  public var id: Swift.String?
  public var name: Swift.String?
  public var connectorAttributes: heresdk.ChargingConnectorAttributes?
  public init(id: Swift.String? = nil, name: Swift.String? = nil, connectorAttributes: heresdk.ChargingConnectorAttributes? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.ChargingStation, b: heresdk.ChargingStation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ChargingStop : Swift.Hashable {
  public var powerInKilowatts: Swift.Double
  public var currentInAmperes: Swift.Double
  public var voltageInVolts: Swift.Double
  public var supplyType: heresdk.ChargingSupplyType?
  public var minDuration: Foundation.TimeInterval?
  public var maxDuration: Foundation.TimeInterval?
  public init(powerInKilowatts: Swift.Double = 0.0, currentInAmperes: Swift.Double = 0.0, voltageInVolts: Swift.Double = 0.0, supplyType: heresdk.ChargingSupplyType? = nil, minDuration: Foundation.TimeInterval? = nil, maxDuration: Foundation.TimeInterval? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.ChargingStop, b: heresdk.ChargingStop) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChargingSupplyType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case acSingle
  case acThree
  case dc
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.ChargingSupplyType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.ChargingSupplyType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct EVCarOptions : Swift.Hashable {
  public var routeOptions: heresdk.RouteOptions
  public var textOptions: heresdk.RouteTextOptions
  public var avoidanceOptions: heresdk.AvoidanceOptions
  public var tollOptions: heresdk.TollOptions
  public var allowOptions: heresdk.AllowOptions
  public var occupantsNumber: Swift.Int32
  public var maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment]
  public var ensureReachability: Swift.Bool
  public var consumptionModel: heresdk.EVConsumptionModel
  public var batterySpecifications: heresdk.BatterySpecifications
  public var carSpecifications: heresdk.CarSpecifications
  public var evMobilityServiceProviderPreferences: heresdk.EVMobilityServiceProviderPreferences
  public init(routeOptions: heresdk.RouteOptions = RouteOptions(), textOptions: heresdk.RouteTextOptions = RouteTextOptions(), avoidanceOptions: heresdk.AvoidanceOptions = AvoidanceOptions(), tollOptions: heresdk.TollOptions = TollOptions(), allowOptions: heresdk.AllowOptions = AllowOptions(), occupantsNumber: Swift.Int32 = 1, maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment] = [], ensureReachability: Swift.Bool = false, consumptionModel: heresdk.EVConsumptionModel = EVConsumptionModel(), batterySpecifications: heresdk.BatterySpecifications = BatterySpecifications(), carSpecifications: heresdk.CarSpecifications = CarSpecifications(), evMobilityServiceProviderPreferences: heresdk.EVMobilityServiceProviderPreferences = EVMobilityServiceProviderPreferences())
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.EVCarOptions, b: heresdk.EVCarOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EVConsumptionModel : Swift.Hashable {
  public var ascentConsumptionInWattHoursPerMeter: Swift.Double
  public var descentRecoveryInWattHoursPerMeter: Swift.Double
  public var freeFlowSpeedTable: [Swift.Int32 : Swift.Double]
  public var trafficSpeedTable: [Swift.Int32 : Swift.Double]
  public var auxiliaryConsumptionInWattHoursPerSecond: Swift.Double
  public init(ascentConsumptionInWattHoursPerMeter: Swift.Double = 0.0, descentRecoveryInWattHoursPerMeter: Swift.Double = 0.0, freeFlowSpeedTable: [Swift.Int32 : Swift.Double] = [:], trafficSpeedTable: [Swift.Int32 : Swift.Double] = [:], auxiliaryConsumptionInWattHoursPerSecond: Swift.Double = 0.0)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.EVConsumptionModel, b: heresdk.EVConsumptionModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EVDetails : Swift.Hashable {
  public var consumptionInKilowattHour: Swift.Double
  public init(consumptionInKilowattHour: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.EVDetails, b: heresdk.EVDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EVMobilityServiceProviderPreferences : Swift.Hashable {
  public var high: [Swift.String]
  public var medium: [Swift.String]
  public var low: [Swift.String]
  public var exclude: [Swift.String]
  public init(high: [Swift.String] = [], medium: [Swift.String] = [], low: [Swift.String] = [], exclude: [Swift.String] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.EVMobilityServiceProviderPreferences, b: heresdk.EVMobilityServiceProviderPreferences) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EVTruckOptions : Swift.Hashable {
  public var routeOptions: heresdk.RouteOptions
  public var textOptions: heresdk.RouteTextOptions
  public var avoidanceOptions: heresdk.AvoidanceOptions
  public var tollOptions: heresdk.TollOptions
  public var allowOptions: heresdk.AllowOptions
  public var occupantsNumber: Swift.Int32
  public var maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment]
  public var truckSpecifications: heresdk.TruckSpecifications
  public var linkTunnelCategory: heresdk.TunnelCategory?
  public var hazardousMaterials: [heresdk.HazardousMaterial]
  public var avoidedTruckRoadTypes: [heresdk.TruckRoadType]
  public var consumptionModel: heresdk.EVConsumptionModel
  public init(routeOptions: heresdk.RouteOptions = RouteOptions(), textOptions: heresdk.RouteTextOptions = RouteTextOptions(), avoidanceOptions: heresdk.AvoidanceOptions = AvoidanceOptions(), tollOptions: heresdk.TollOptions = TollOptions(), allowOptions: heresdk.AllowOptions = AllowOptions(), occupantsNumber: Swift.Int32 = 1, maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment] = [], truckSpecifications: heresdk.TruckSpecifications = TruckSpecifications(), linkTunnelCategory: heresdk.TunnelCategory? = nil, hazardousMaterials: [heresdk.HazardousMaterial] = [], avoidedTruckRoadTypes: [heresdk.TruckRoadType] = [], consumptionModel: heresdk.EVConsumptionModel = EVConsumptionModel())
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.EVTruckOptions, b: heresdk.EVTruckOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Fare {
  public var name: Swift.String
  public var price: heresdk.FarePrice?
  public var reason: heresdk.FareReason
  public init(name: Swift.String, price: heresdk.FarePrice? = nil, reason: heresdk.FareReason)
}
public struct FarePrice {
  public var type: heresdk.FarePriceType
  public var estimated: Swift.Bool
  public var currency: Swift.String
  public var minimum: Swift.Double
  public var maximum: Swift.Double
  public var validityPeriod: Foundation.TimeInterval?
  public init(type: heresdk.FarePriceType = FarePriceType.value, estimated: Swift.Bool = false, currency: Swift.String = "EUR", minimum: Swift.Double = 0, maximum: Swift.Double = 0, validityPeriod: Foundation.TimeInterval? = nil)
}
public enum FarePriceType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case value
  case range
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.FarePriceType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.FarePriceType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum FareReason : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case ride
  case parking
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.FareReason]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.FareReason] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum LocalizedTextPreference : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case useNever
  case useAlways
  case useIfLanguageIsCompatible
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.LocalizedTextPreference]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.LocalizedTextPreference] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class Maneuver {
  public var action: heresdk.ManeuverAction {
    get
  }
  public var coordinates: heresdk.GeoCoordinates {
    get
  }
  public var offset: Swift.Int32 {
    get
  }
  public var countryCode: Swift.String? {
    get
  }
  public var exitSignTexts: heresdk.LocalizedTexts {
    get
  }
  public var lengthInMeters: Swift.Int32 {
    get
  }
  public var roadTexts: heresdk.RoadTexts {
    get
  }
  public var roadType: heresdk.RoadType? {
    get
  }
  public var nextRoadTexts: heresdk.RoadTexts {
    get
  }
  public var signpost: heresdk.Signpost? {
    get
  }
  public var nextRoadType: heresdk.RoadType? {
    get
  }
  public var intersectionNames: heresdk.LocalizedTexts {
    get
  }
  public var text: Swift.String {
    get
  }
  public var sectionIndex: Swift.Int32 {
    get
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public var turnAngleInDegrees: Swift.Double? {
    get
  }
  public var roundaboutAngleInDegrees: Swift.Double? {
    get
  }
  @objc deinit
}
extension heresdk.Maneuver : Swift.Hashable {
  public static func == (lhs: heresdk.Maneuver, rhs: heresdk.Maneuver) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ManeuverAction : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case depart
  case arrive
  case leftUTurn
  case sharpLeftTurn
  case leftTurn
  case slightLeftTurn
  case continueOn
  case slightRightTurn
  case rightTurn
  case sharpRightTurn
  case rightUTurn
  case leftExit
  case rightExit
  case leftRamp
  case rightRamp
  case leftFork
  case middleFork
  case rightFork
  case enterHighwayFromLeft
  case enterHighwayFromRight
  case leftRoundaboutEnter
  case rightRoundaboutEnter
  case leftRoundaboutPass
  case rightRoundaboutPass
  case leftRoundaboutExit1
  case leftRoundaboutExit2
  case leftRoundaboutExit3
  case leftRoundaboutExit4
  case leftRoundaboutExit5
  case leftRoundaboutExit6
  case leftRoundaboutExit7
  case leftRoundaboutExit8
  case leftRoundaboutExit9
  case leftRoundaboutExit10
  case leftRoundaboutExit11
  case leftRoundaboutExit12
  case rightRoundaboutExit1
  case rightRoundaboutExit2
  case rightRoundaboutExit3
  case rightRoundaboutExit4
  case rightRoundaboutExit5
  case rightRoundaboutExit6
  case rightRoundaboutExit7
  case rightRoundaboutExit8
  case rightRoundaboutExit9
  case rightRoundaboutExit10
  case rightRoundaboutExit11
  case rightRoundaboutExit12
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.ManeuverAction]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.ManeuverAction] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct MapMatchedCoordinates : Swift.Hashable {
  public var originalCoordinates: heresdk.GeoCoordinates
  public var matchedCoordinates: heresdk.GeoCoordinates
  public init(originalCoordinates: heresdk.GeoCoordinates, matchedCoordinates: heresdk.GeoCoordinates)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.MapMatchedCoordinates, b: heresdk.MapMatchedCoordinates) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum MatchSideOfStreet : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case always
  case onlyIfDivided
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.MatchSideOfStreet]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.MatchSideOfStreet] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct MaxAxleGroupWeight : Swift.Hashable {
  public var maxWeightInKilograms: Swift.Int32
  public var axleGroupType: Swift.String
  public init(maxWeightInKilograms: Swift.Int32, axleGroupType: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.MaxAxleGroupWeight, b: heresdk.MaxAxleGroupWeight) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct MaxSpeedOnSegment : Swift.Hashable {
  public var segment: heresdk.SegmentReference
  public var baseSpeedInMetersPerSecond: Swift.Double
  public init(segment: heresdk.SegmentReference, baseSpeedInMetersPerSecond: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.MaxSpeedOnSegment, b: heresdk.MaxSpeedOnSegment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum NoticeSeverity : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case critical
  case info
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.NoticeSeverity]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.NoticeSeverity] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum OptimizationMode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case fastest
  case shortest
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.OptimizationMode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.OptimizationMode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct PassThroughWaypoint : Swift.Hashable {
  public var place: heresdk.RoutePlace
  public var offset: Swift.Int32?
  public init(place: heresdk.RoutePlace, offset: Swift.Int32? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.PassThroughWaypoint, b: heresdk.PassThroughWaypoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum PaymentMethod : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case unknown
  case cash
  case bankCard
  case creditCard
  case passSubscription
  case transponder
  case videoToll
  case cashExact
  case travelCard
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.PaymentMethod]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.PaymentMethod] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct PedestrianOptions : Swift.Hashable {
  public var routeOptions: heresdk.RouteOptions
  public var textOptions: heresdk.RouteTextOptions
  public var avoidanceOptions: heresdk.AvoidanceOptions
  public var walkSpeedInMetersPerSecond: Swift.Double
  public init(routeOptions: heresdk.RouteOptions = RouteOptions(), textOptions: heresdk.RouteTextOptions = RouteTextOptions(), avoidanceOptions: heresdk.AvoidanceOptions = AvoidanceOptions(), walkSpeedInMetersPerSecond: Swift.Double = 1.0)
  public static func fromDefaultParameterConfiguration() -> heresdk.PedestrianOptions
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.PedestrianOptions, b: heresdk.PedestrianOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct PostAction : Swift.Hashable {
  public var action: heresdk.PostActionType
  public var duration: Foundation.TimeInterval
  public var chargingDetails: heresdk.ChargingActionDetails?
  public init(action: heresdk.PostActionType = PostActionType.chargingSetup, duration: Foundation.TimeInterval = 0, chargingDetails: heresdk.ChargingActionDetails? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.PostAction, b: heresdk.PostAction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum PostActionType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case chargingSetup
  case charging
  case deboard
  case wait
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.PostActionType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.PostActionType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct PreAction : Swift.Hashable {
  public var action: heresdk.PreActionType
  public var duration: Foundation.TimeInterval
  public init(action: heresdk.PreActionType = PreActionType.board, duration: Foundation.TimeInterval = 0)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.PreAction, b: heresdk.PreAction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum PreActionType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case board
  case wait
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.PreActionType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.PreActionType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct PrivateBusOptions : Swift.Hashable {
  public var routeOptions: heresdk.RouteOptions
  public var textOptions: heresdk.RouteTextOptions
  public var avoidanceOptions: heresdk.AvoidanceOptions
  public var tollOptions: heresdk.TollOptions
  public var allowOptions: heresdk.AllowOptions
  public var occupantsNumber: Swift.Int32
  public var maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment]
  public var busSpecifications: heresdk.BusSpecifications
  public init(routeOptions: heresdk.RouteOptions = RouteOptions(), textOptions: heresdk.RouteTextOptions = RouteTextOptions(), avoidanceOptions: heresdk.AvoidanceOptions = AvoidanceOptions(), tollOptions: heresdk.TollOptions = TollOptions(), allowOptions: heresdk.AllowOptions = AllowOptions(), occupantsNumber: Swift.Int32 = 1, maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment] = [], busSpecifications: heresdk.BusSpecifications = BusSpecifications())
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.PrivateBusOptions, b: heresdk.PrivateBusOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RefreshRouteOptions {
  public init(_ transportMode: heresdk.TransportMode)
  public init(_ carOptions: heresdk.CarOptions)
  public init(_ truckOptions: heresdk.TruckOptions)
  public init(_ pedestrianOptions: heresdk.PedestrianOptions)
  public init(_ scooterOptions: heresdk.ScooterOptions)
  public init(_ taxiOptions: heresdk.TaxiOptions)
  public init(_ evCarOptions: heresdk.EVCarOptions)
  public init(_ evTruckOptions: heresdk.EVTruckOptions)
  public init(_ bicycleOptions: heresdk.BicycleOptions)
  public init(_ busOptions: heresdk.BusOptions)
  public init(_ privateBusOptions: heresdk.PrivateBusOptions)
  @objc deinit
}
extension heresdk.RefreshRouteOptions : Swift.Hashable {
  public static func == (lhs: heresdk.RefreshRouteOptions, rhs: heresdk.RefreshRouteOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RoadFeatures : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case seasonalClosure
  case tollRoad
  case controlledAccessHighway
  case ferry
  case carShuttleTrain
  case tunnel
  case dirtRoad
  case uTurns
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.RoadFeatures]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.RoadFeatures] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct RoadTexts : Swift.Hashable {
  public var names: heresdk.LocalizedTexts
  public var numbersWithDirection: heresdk.LocalizedRoadNumbers
  public init(names: heresdk.LocalizedTexts = LocalizedTexts(), numbersWithDirection: heresdk.LocalizedRoadNumbers = LocalizedRoadNumbers())
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.RoadTexts, b: heresdk.RoadTexts) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum RoadType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case highway
  case rural
  case urban
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.RoadType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.RoadType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class Route {
  public var sections: [heresdk.Section] {
    get
  }
  public var geometry: heresdk.GeoPolyline {
    get
  }
  public var boundingBox: heresdk.GeoBox {
    get
  }
  public var lengthInMeters: Swift.Int32 {
    get
  }
  public var language: heresdk.LanguageCode {
    get
  }
  public var optimizationMode: heresdk.OptimizationMode {
    get
  }
  public var requestedTransportMode: heresdk.TransportMode {
    get
  }
  public var evDetails: heresdk.EVDetails? {
    get
  }
  public var routeHandle: heresdk.RouteHandle? {
    get
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public var trafficDelay: Foundation.TimeInterval {
    get
  }
  public var railwayCrossings: [heresdk.RouteRailwayCrossing] {
    get
  }
  @objc deinit
}
extension heresdk.Route : Swift.Hashable {
  public static func == (lhs: heresdk.Route, rhs: heresdk.Route) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RouteHandle : Swift.Hashable {
  public var handle: Swift.String
  public init(handle: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.RouteHandle, b: heresdk.RouteHandle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct RouteOffset {
  public var sectionIndex: Swift.Int32
  public var offsetInMeters: Swift.Double
  public init(sectionIndex: Swift.Int32, offsetInMeters: Swift.Double)
}
public struct RouteOptions : Swift.Hashable {
  public var optimizationMode: heresdk.OptimizationMode
  public var alternatives: Swift.Int32
  public var departureTime: Foundation.Date?
  public var arrivalTime: Foundation.Date?
  public var speedCapInMetersPerSecond: Swift.Double?
  public var enableRouteHandle: Swift.Bool
  public var trafficOptimizationMode: heresdk.TrafficOptimizationMode
  public var enableTolls: Swift.Bool
  @available(*, deprecated, message: "Will be removed in v4.23.0. Please use `RouteOptions.occupantsNumber` in corresponding transport mode options instead, like `CarOptions.occupantsNumber`.")
  public var occupantsNumber: Swift.Int32
  public var optimizeWaypointsOrder: Swift.Bool
  public init(optimizationMode: heresdk.OptimizationMode = OptimizationMode.fastest, alternatives: Swift.Int32 = 0, departureTime: Foundation.Date? = nil, arrivalTime: Foundation.Date? = nil, speedCapInMetersPerSecond: Swift.Double? = nil, enableRouteHandle: Swift.Bool = false, trafficOptimizationMode: heresdk.TrafficOptimizationMode = TrafficOptimizationMode.timeDependent, enableTolls: Swift.Bool = false, optimizeWaypointsOrder: Swift.Bool = false)
  @available(*, deprecated)
  public init(optimizationMode: heresdk.OptimizationMode = OptimizationMode.fastest, alternatives: Swift.Int32 = 0, departureTime: Foundation.Date? = nil, arrivalTime: Foundation.Date? = nil, speedCapInMetersPerSecond: Swift.Double? = nil, enableRouteHandle: Swift.Bool = false, trafficOptimizationMode: heresdk.TrafficOptimizationMode = TrafficOptimizationMode.timeDependent, enableTolls: Swift.Bool = false, occupantsNumber: Swift.Int32 = 1, optimizeWaypointsOrder: Swift.Bool = false)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.RouteOptions, b: heresdk.RouteOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct RoutePlace : Swift.Hashable {
  public var type: heresdk.RoutePlaceType
  public var waypointIndex: Swift.Int32?
  public var originalCoordinates: heresdk.GeoCoordinates?
  public var mapMatchedCoordinates: heresdk.GeoCoordinates
  public var displayCoordinates: heresdk.GeoCoordinates?
  public var chargeInKilowattHours: Swift.Double?
  public var chargingStation: heresdk.ChargingStation?
  public var name: Swift.String?
  public var id: Swift.String?
  public var platform: Swift.String?
  public var sideOfDestination: heresdk.SideOfDestination?
  public func isOffRoad() -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.RoutePlace, b: heresdk.RoutePlace) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum RoutePlaceDirection : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case departure
  case arrival
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.RoutePlaceDirection]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.RoutePlaceDirection] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum RoutePlaceType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case place
  case chargingStation
  case indoor
  case station
  case accessPoint
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.RoutePlaceType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.RoutePlaceType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct RouteRailwayCrossing {
  public var type: heresdk.RouteRailwayCrossingType
  public var coordinates: heresdk.GeoCoordinates
  public var routeOffset: heresdk.RouteOffset
  public init(type: heresdk.RouteRailwayCrossingType, coordinates: heresdk.GeoCoordinates, routeOffset: heresdk.RouteOffset)
}
public enum RouteRailwayCrossingType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case unknown
  case protectedWithBarrier
  case unprotectedWithBarrier
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.RouteRailwayCrossingType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.RouteRailwayCrossingType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct RouteTextOptions : Swift.Hashable {
  public var language: heresdk.LanguageCode
  public var unitSystem: heresdk.UnitSystem
  public var textUsageOptions: heresdk.TextUsageOptions
  public init(language: heresdk.LanguageCode = LanguageCode.enUs, unitSystem: heresdk.UnitSystem = UnitSystem.metric, textUsageOptions: heresdk.TextUsageOptions = TextUsageOptions())
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.RouteTextOptions, b: heresdk.RouteTextOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct RoutingConnectionSettings : Swift.Hashable {
  public var initialConnectionTimeout: Foundation.TimeInterval
  public var connectionTimeoutRetryIncrease: Foundation.TimeInterval
  public var initialTransferTimeout: Foundation.TimeInterval
  public var transferTimeoutRetryIncrease: Foundation.TimeInterval
  public var maxRetryCount: Swift.Int32
  public init(initialConnectionTimeout: Foundation.TimeInterval = 5, connectionTimeoutRetryIncrease: Foundation.TimeInterval = 10, initialTransferTimeout: Foundation.TimeInterval = 10, transferTimeoutRetryIncrease: Foundation.TimeInterval = 2, maxRetryCount: Swift.Int32 = 3)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.RoutingConnectionSettings, b: heresdk.RoutingConnectionSettings) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum RoutingError : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case internalError
  case invalidParameter
  case serverUnreachable
  case httpError
  case authenticationFailed
  case forbidden
  case exceededUsageLimit
  case parsingError
  case noRouteFound
  case timedOut
  case offline
  case noIsolineFound
  case noRouteHandle
  case operationCancelled
  case couldNotMatchDestination
  case couldNotMatchOrigin
  case failedRouteHandleCreation
  case importFailed
  case noReachableChargingStationFound
  case routeCalculationFailed
  case routeLengthLimitExceeded
  case violatedTransportModeInRouteHandleDecoding
  case proxyAuthenticationFailed
  case proxyServerUnreachable
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.RoutingError]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.RoutingError] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public protocol RoutingProtocol : AnyObject {
  @discardableResult
  func calculateRoute(with waypoints: [heresdk.Waypoint], carOptions: heresdk.CarOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func calculateRoute(with waypoints: [heresdk.Waypoint], pedestrianOptions: heresdk.PedestrianOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func calculateRoute(with waypoints: [heresdk.Waypoint], truckOptions: heresdk.TruckOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func calculateRoute(with waypoints: [heresdk.Waypoint], scooterOptions: heresdk.ScooterOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func calculateRoute(with waypoints: [heresdk.Waypoint], bicycleOptions: heresdk.BicycleOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func calculateRoute(with waypoints: [heresdk.Waypoint], taxiOptions: heresdk.TaxiOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func calculateRoute(with waypoints: [heresdk.Waypoint], evCarOptions: heresdk.EVCarOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func calculateRoute(with waypoints: [heresdk.Waypoint], evTruckOptions: heresdk.EVTruckOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func calculateRoute(with waypoints: [heresdk.Waypoint], busOptions: heresdk.BusOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func calculateRoute(with waypoints: [heresdk.Waypoint], privateBusOptions: heresdk.PrivateBusOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func returnToRoute(_ route: heresdk.Route, startingPoint: heresdk.Waypoint, lastTraveledSectionIndex: Swift.Int32, traveledDistanceOnLastSectionInMeters: Swift.Int32, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
}
public struct ScooterOptions : Swift.Hashable {
  public var routeOptions: heresdk.RouteOptions
  public var textOptions: heresdk.RouteTextOptions
  public var avoidanceOptions: heresdk.AvoidanceOptions
  public var tollOptions: heresdk.TollOptions
  public var occupantsNumber: Swift.Int32
  public var maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment]
  public var allowHighway: Swift.Bool
  public var engineSizeInCubicCentimeters: Swift.Int32?
  public init(routeOptions: heresdk.RouteOptions = RouteOptions(), textOptions: heresdk.RouteTextOptions = RouteTextOptions(), avoidanceOptions: heresdk.AvoidanceOptions = AvoidanceOptions(), tollOptions: heresdk.TollOptions = TollOptions(), occupantsNumber: Swift.Int32 = 1, maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment] = [], allowHighway: Swift.Bool = false, engineSizeInCubicCentimeters: Swift.Int32? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.ScooterOptions, b: heresdk.ScooterOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Section {
  public var geometry: heresdk.GeoPolyline {
    get
  }
  public var spans: [heresdk.Span] {
    get
  }
  public var maneuvers: [heresdk.Maneuver] {
    get
  }
  public var boundingBox: heresdk.GeoBox {
    get
  }
  public var lengthInMeters: Swift.Int32 {
    get
  }
  public var sectionTransportMode: heresdk.SectionTransportMode {
    get
  }
  public var departurePlace: heresdk.RoutePlace {
    get
  }
  public var arrivalPlace: heresdk.RoutePlace {
    get
  }
  public var departureLocationTime: heresdk.LocationTime? {
    get
  }
  public var arrivalLocationTime: heresdk.LocationTime? {
    get
  }
  public var preActions: [heresdk.PreAction] {
    get
  }
  public var postActions: [heresdk.PostAction] {
    get
  }
  public var sectionNotices: [heresdk.SectionNotice] {
    get
  }
  public var evDetails: heresdk.EVDetails? {
    get
  }
  public var transitDetails: heresdk.TransitSectionDetails? {
    get
  }
  public var tolls: [heresdk.Toll] {
    get
  }
  public var trafficIncidents: [heresdk.TrafficIncidentOnRoute] {
    get
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public var trafficDelay: Foundation.TimeInterval {
    get
  }
  public var passthroughWaypoints: [heresdk.PassThroughWaypoint] {
    get
  }
  @objc deinit
}
extension heresdk.Section : Swift.Hashable {
  public static func == (lhs: heresdk.Section, rhs: heresdk.Section) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SectionNotice : Swift.Hashable {
  public var code: heresdk.SectionNoticeCode
  public var severity: heresdk.NoticeSeverity
  public var violatedRestrictions: [heresdk.ViolatedRestriction]
  public init(code: heresdk.SectionNoticeCode, severity: heresdk.NoticeSeverity, violatedRestrictions: [heresdk.ViolatedRestriction] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.SectionNotice, b: heresdk.SectionNotice) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum SectionNoticeCode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case violatedCriticalRule
  case violatedAvoidControlledAccessHighway
  case violatedAvoidTollRoad
  case violatedAvoidFerry
  case violatedAvoidTunnel
  case violatedAvoidDirtRoad
  case violatedAvoidRailFerry
  case violatedAvoidPark
  case violatedBlockedRoad
  case violatedStartDirection
  case violatedCarpool
  case violatedTurnRestriction
  case violatedVehicleRestriction
  case violatedZoneRestriction
  case violatedAvoidUTurns
  case violatedEmergencyGate
  case violatedAvoidSeasonalClosure
  case violatedAvoidTruckRoadType
  case violatedAvoidTollTransponder
  case violatedChargingStationOpeningHours
  case violatedAvoidDifficultTurns
  case seasonalClosure
  case tollTransponder
  case tollsDataUnavailable
  case tollsDataTemporarilyUnavailable
  case chargingStopNotNeeded
  case noSchedule
  case noIntermediate
  case unwantedMode
  case scheduledTimes
  case simplePolyline
  case potentialCarpool
  case potentialTurnRestriction
  case potentialVehicleRestriction
  case potentialZoneRestriction
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.SectionNoticeCode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.SectionNoticeCode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum SectionTransportMode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case car
  case truck
  case pedestrian
  case ferry
  case carShuttleTrain
  case scooter
  case bicycle
  case publicTransit
  case taxi
  case bus
  case privateBus
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.SectionTransportMode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.SectionTransportMode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum SideOfDestination : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case undefined
  case left
  case right
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.SideOfDestination]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.SideOfDestination] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct Signpost : Swift.Hashable {
  public var labels: [heresdk.SignpostLabel]
  public init(labels: [heresdk.SignpostLabel])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Signpost, b: heresdk.Signpost) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct SignpostLabel : Swift.Hashable {
  public var localizedText: heresdk.LocalizedText?
  public var localizedRoadNumber: heresdk.LocalizedRoadNumber?
  public init(localizedText: heresdk.LocalizedText? = nil, localizedRoadNumber: heresdk.LocalizedRoadNumber? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.SignpostLabel, b: heresdk.SignpostLabel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Span {
  public var geometry: heresdk.GeoPolyline {
    get
  }
  public var lengthInMeters: Swift.Int32 {
    get
  }
  public var noticeIndexes: [Swift.Int32] {
    get
  }
  public var segmentReference: heresdk.SegmentReference {
    get
  }
  @available(*, deprecated, message: "Will be removed in v4.22.0. Use `Span.dynamicSpeedInfo` instead.")
  public var trafficSpeed: heresdk.TrafficSpeed {
    get
  }
  public var trafficIncidentIndexes: [Swift.Int32] {
    get
  }
  public var sectionPolylineOffset: Swift.Int32 {
    get
  }
  public var dynamicSpeedInfo: heresdk.DynamicSpeedInfo? {
    get
  }
  public var streetAttributes: [heresdk.StreetAttributes] {
    get
  }
  public var carAttributes: [heresdk.AccessAttributes] {
    get
  }
  public var truckAttributes: [heresdk.AccessAttributes] {
    get
  }
  public var scooterAttributes: [heresdk.AccessAttributes] {
    get
  }
  public var walkAttributes: [heresdk.WalkAttributes] {
    get
  }
  public var streetNames: heresdk.LocalizedTexts {
    get
  }
  public var roadNumbers: heresdk.LocalizedRoadNumbers {
    get
  }
  public var speedLimitInMetersPerSecond: Swift.Double? {
    get
  }
  public var consumptionInKilowattHours: Swift.Double? {
    get
  }
  public var functionalRoadClass: heresdk.FunctionalRoadClass? {
    get
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public var baseDuration: Foundation.TimeInterval {
    get
  }
  public var countryCode: Swift.String? {
    get
  }
  public var stateCode: Swift.String? {
    get
  }
  @objc deinit
  public func getShieldText(roadNumber: heresdk.LocalizedRoadNumber) -> Swift.String
}
extension heresdk.Span : Swift.Hashable {
  public static func == (lhs: heresdk.Span, rhs: heresdk.Span) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TaxiOptions : Swift.Hashable {
  public var routeOptions: heresdk.RouteOptions
  public var textOptions: heresdk.RouteTextOptions
  public var avoidanceOptions: heresdk.AvoidanceOptions
  public var tollOptions: heresdk.TollOptions
  public var maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment]
  public var allowDriveThroughTaxiRoads: Swift.Bool
  public var carSpecifications: heresdk.CarSpecifications
  public init()
  public init(routeOptions: heresdk.RouteOptions, textOptions: heresdk.RouteTextOptions, avoidanceOptions: heresdk.AvoidanceOptions)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TaxiOptions, b: heresdk.TaxiOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TextUsageOptions : Swift.Hashable {
  public var streetName: heresdk.LocalizedTextPreference
  public var roadNumber: heresdk.LocalizedTextPreference
  public var signpostDirection: heresdk.LocalizedTextPreference
  public init(streetName: heresdk.LocalizedTextPreference = LocalizedTextPreference.useAlways, roadNumber: heresdk.LocalizedTextPreference = LocalizedTextPreference.useAlways, signpostDirection: heresdk.LocalizedTextPreference = LocalizedTextPreference.useAlways)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TextUsageOptions, b: heresdk.TextUsageOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Toll : Swift.Hashable {
  public var countryCode: Swift.String
  @available(*, deprecated, message: "Will be removed in v4.23.0. Please use `Toll.tollSystems` instead.")
  public var tollSystem: Swift.String
  public var tollSystems: [Swift.String]
  public var fares: [heresdk.TollFare]
  public init(countryCode: Swift.String, tollSystems: [Swift.String], fares: [heresdk.TollFare])
  @available(*, deprecated)
  public init(countryCode: Swift.String, tollSystem: Swift.String = "", tollSystems: [Swift.String], fares: [heresdk.TollFare])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Toll, b: heresdk.Toll) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TollFare : Swift.Hashable {
  public var currency: Swift.String
  public var price: Swift.Double
  public var paymentMethods: [heresdk.PaymentMethod]
  public var timeRule: heresdk.TimeRule?
  public var transponders: [Swift.String]
  public init(currency: Swift.String, price: Swift.Double, paymentMethods: [heresdk.PaymentMethod], timeRule: heresdk.TimeRule? = nil, transponders: [Swift.String] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TollFare, b: heresdk.TollFare) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TollOptions : Swift.Hashable {
  public var transponders: [Swift.String]
  public var vehicleCategory: heresdk.TollOptions.VehicleCategory?
  public var emissionType: heresdk.TollOptions.EmissionType?
  public var co2Class: Swift.Int32?
  public init(transponders: [Swift.String] = [], vehicleCategory: heresdk.TollOptions.VehicleCategory? = nil, emissionType: heresdk.TollOptions.EmissionType? = nil, co2Class: Swift.Int32? = nil)
  public enum VehicleCategory : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case minibus
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.TollOptions.VehicleCategory]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.TollOptions.VehicleCategory] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public enum EmissionType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case euro1
    case euro2
    case euro3
    case euro4
    case euro5
    case euro6
    case euroEev
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.TollOptions.EmissionType]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.TollOptions.EmissionType] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TollOptions, b: heresdk.TollOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TrafficIncidentOnRoute : heresdk.TrafficIncidentBase {
  public var impact: heresdk.TrafficIncidentImpact {
    get
  }
  public var type: heresdk.TrafficIncidentType {
    get
  }
  public var description: heresdk.LocalizedText {
    get
  }
  public var startTime: Foundation.Date? {
    get
  }
  public var endTime: Foundation.Date? {
    get
  }
  public var id: Swift.String? {
    get
  }
  @objc deinit
}
extension heresdk.TrafficIncidentOnRoute : Swift.Hashable {
  public static func == (lhs: heresdk.TrafficIncidentOnRoute, rhs: heresdk.TrafficIncidentOnRoute) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TrafficOnRoute : Swift.Hashable {
  public var lastTraveledSectionIndex: Swift.Int32
  public var traveledDistanceOnLastSectionInMeters: Swift.Int32
  public var trafficSections: [heresdk.TrafficOnSection]
  public init(lastTraveledSectionIndex: Swift.Int32 = 0, traveledDistanceOnLastSectionInMeters: Swift.Int32 = 0, trafficSections: [heresdk.TrafficOnSection] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TrafficOnRoute, b: heresdk.TrafficOnRoute) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TrafficOnSection : Swift.Hashable {
  public var geometry: [heresdk.GeoCoordinates]
  public var trafficSpans: [heresdk.TrafficOnSpan]
  public var trafficIncidents: [heresdk.TrafficIncidentOnRoute]
  public var departurePlace: heresdk.RoutePlace
  public var arrivalPlace: heresdk.RoutePlace
  public init(geometry: [heresdk.GeoCoordinates] = [], trafficSpans: [heresdk.TrafficOnSpan] = [], trafficIncidents: [heresdk.TrafficIncidentOnRoute] = [], departurePlace: heresdk.RoutePlace, arrivalPlace: heresdk.RoutePlace)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TrafficOnSection, b: heresdk.TrafficOnSection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TrafficOnSpan : Swift.Hashable {
  public var trafficSectionPolylineOffset: Swift.Int32
  public var lengthInMeters: Swift.Double
  public var duration: Foundation.TimeInterval
  public var trafficDelay: Foundation.TimeInterval
  public var baseSpeedInMetersPerSecond: Swift.Double
  public var trafficSpeedInMetersPerSecond: Swift.Double
  public var jamFactor: Swift.Double
  public var incidentIndices: [Swift.Int32]
  public var consumptionInKilowattHours: Swift.Double?
  public init(trafficSectionPolylineOffset: Swift.Int32 = 0, lengthInMeters: Swift.Double = 0.0, duration: Foundation.TimeInterval = 0, trafficDelay: Foundation.TimeInterval = 0, baseSpeedInMetersPerSecond: Swift.Double = 0.0, trafficSpeedInMetersPerSecond: Swift.Double = 0.0, jamFactor: Swift.Double = 0.0, incidentIndices: [Swift.Int32] = [], consumptionInKilowattHours: Swift.Double? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TrafficOnSpan, b: heresdk.TrafficOnSpan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum TrafficOptimizationMode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case timeDependent
  case longTermClosuresOnly
  case disabled
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TrafficOptimizationMode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TrafficOptimizationMode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@available(*, deprecated, message: "Will be removed in v4.22.0. Please use `DynamicSpeedInfo` class instead.")
public struct TrafficSpeed : Swift.Hashable {
  public var baseSpeedInMetersPerSecond: Swift.Double?
  public var trafficSpeedInMetersPerSecond: Swift.Double?
  public var jamFactor: Swift.Double?
  public init(baseSpeedInMetersPerSecond: Swift.Double? = nil, trafficSpeedInMetersPerSecond: Swift.Double? = nil, jamFactor: Swift.Double? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TrafficSpeed, b: heresdk.TrafficSpeed) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TransitDeparture {
  public var place: heresdk.RoutePlace
  public var time: Foundation.Date?
  public var delay: Swift.Int32?
  public var status: heresdk.TransitDepartureStatus?
  public init(place: heresdk.RoutePlace, time: Foundation.Date? = nil, delay: Swift.Int32? = nil, status: heresdk.TransitDepartureStatus? = nil)
}
public enum TransitDepartureStatus : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case scheduled
  case cancelled
  case additional
  case replaced
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TransitDepartureStatus]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TransitDepartureStatus] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct TransitIncident {
  public var summary: Swift.String?
  public var description: Swift.String?
  public var type: heresdk.TransitIncidentType?
  public var effect: heresdk.TransitIncidentEffect?
  public var validFrom: Foundation.Date?
  public var validUntil: Foundation.Date?
  public var url: Swift.String?
  public init(summary: Swift.String? = nil, description: Swift.String? = nil, type: heresdk.TransitIncidentType? = nil, effect: heresdk.TransitIncidentEffect? = nil, validFrom: Foundation.Date? = nil, validUntil: Foundation.Date? = nil, url: Swift.String? = nil)
}
public enum TransitIncidentEffect : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case cancelledService
  case reducedService
  case additionalService
  case modifiedService
  case delays
  case detour
  case stopMoved
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TransitIncidentEffect]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TransitIncidentEffect] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum TransitIncidentType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case technicalProblem
  case strike
  case demonstration
  case accident
  case holiday
  case weather
  case maintenance
  case construction
  case policeActivity
  case medicalEmergency
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TransitIncidentType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TransitIncidentType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum TransitMode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case highSpeedTrain
  case intercityTrain
  case interRegionalTrain
  case regionalTrain
  case cityTrain
  case bus
  case ferry
  case subway
  case lightRail
  case privateBus
  case inclined
  case aerial
  case busRapid
  case monorail
  case flight
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TransitMode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TransitMode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum TransitModeFilter : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case include
  case exclude
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TransitModeFilter]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TransitModeFilter] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct TransitRouteOptions : Swift.Hashable {
  public var departureTime: Foundation.Date?
  public var arrivalTime: Foundation.Date?
  public var alternatives: Swift.Int32
  public var changes: Swift.Int32?
  public var modeFilter: heresdk.TransitModeFilter
  public var modes: [heresdk.TransitMode]
  public var pedestrianSpeedInMetersPerSecond: Swift.Double
  public var pedestrianMaxDistanceInMeters: Swift.Int32
  public var textOptions: heresdk.RouteTextOptions
  public init(departureTime: Foundation.Date? = nil, arrivalTime: Foundation.Date? = nil, alternatives: Swift.Int32 = 0, changes: Swift.Int32? = nil, modeFilter: heresdk.TransitModeFilter = TransitModeFilter.include, modes: [heresdk.TransitMode] = [], pedestrianSpeedInMetersPerSecond: Swift.Double = 1.0, pedestrianMaxDistanceInMeters: Swift.Int32 = 2000, textOptions: heresdk.RouteTextOptions = RouteTextOptions())
  public static func fromDefaultParameterConfiguration() -> heresdk.TransitRouteOptions
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TransitRouteOptions, b: heresdk.TransitRouteOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TransitSectionDetails {
  public var transport: heresdk.TransitTransport?
  public var intermediateStops: [heresdk.TransitStop]
  public var agency: heresdk.Agency
  public var attributions: [heresdk.Attribution]
  public var fares: [heresdk.Fare]
  public var incidents: [heresdk.TransitIncident]
  public init(transport: heresdk.TransitTransport? = nil, intermediateStops: [heresdk.TransitStop] = [], agency: heresdk.Agency, attributions: [heresdk.Attribution] = [], fares: [heresdk.Fare] = [], incidents: [heresdk.TransitIncident] = [])
}
public struct TransitStop {
  public var departure: heresdk.TransitDeparture
  public var duration: Foundation.TimeInterval?
  public init(departure: heresdk.TransitDeparture, duration: Foundation.TimeInterval? = nil)
}
public struct TransitTransport {
  public var mode: heresdk.TransitMode
  public var name: Swift.String?
  public var headsign: Swift.String?
  public var category: Swift.String?
  public var color: UIKit.UIColor?
  public var textColor: UIKit.UIColor?
  public init(mode: heresdk.TransitMode, name: Swift.String? = nil, headsign: Swift.String? = nil, category: Swift.String? = nil, color: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil)
}
public struct TruckOptions : Swift.Hashable {
  public var routeOptions: heresdk.RouteOptions
  public var textOptions: heresdk.RouteTextOptions
  public var avoidanceOptions: heresdk.AvoidanceOptions
  public var tollOptions: heresdk.TollOptions
  public var allowOptions: heresdk.AllowOptions
  public var occupantsNumber: Swift.Int32
  public var maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment]
  public var truckSpecifications: heresdk.TruckSpecifications
  public var linkTunnelCategory: heresdk.TunnelCategory?
  public var hazardousMaterials: [heresdk.HazardousMaterial]
  public var avoidedTruckRoadTypes: [heresdk.TruckRoadType]
  public init(routeOptions: heresdk.RouteOptions = RouteOptions(), textOptions: heresdk.RouteTextOptions = RouteTextOptions(), avoidanceOptions: heresdk.AvoidanceOptions = AvoidanceOptions(), tollOptions: heresdk.TollOptions = TollOptions(), allowOptions: heresdk.AllowOptions = AllowOptions(), occupantsNumber: Swift.Int32 = 1, maxSpeedOnSegments: [heresdk.MaxSpeedOnSegment] = [], truckSpecifications: heresdk.TruckSpecifications = TruckSpecifications(), linkTunnelCategory: heresdk.TunnelCategory? = nil, hazardousMaterials: [heresdk.HazardousMaterial] = [], avoidedTruckRoadTypes: [heresdk.TruckRoadType] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TruckOptions, b: heresdk.TruckOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ViolatedRestriction : Swift.Hashable {
  public var cause: Swift.String
  public var timeDependent: Swift.Bool
  public var details: heresdk.ViolatedRestriction.Details?
  public init(cause: Swift.String, timeDependent: Swift.Bool, details: heresdk.ViolatedRestriction.Details? = nil)
  public struct Details : Swift.Hashable {
    public var maxGrossWeightInKilograms: Swift.Int32?
    public var maxWeightPerAxleInKilograms: Swift.Int32?
    public var maxWeightPerAxleGroupInKilograms: heresdk.MaxAxleGroupWeight?
    public var maxHeightInCentimeters: Swift.Int32?
    public var maxWidthInCentimeters: Swift.Int32?
    public var maxLengthInCentimeters: Swift.Int32?
    public var forbiddenAxleCount: heresdk.IntegerRange?
    public var forbiddenTrailerCount: heresdk.IntegerRange?
    public var forbiddenHazardousGoods: [heresdk.HazardousMaterial]
    public var maxTunnelCategory: heresdk.TunnelCategory?
    public var forbiddenTruckType: heresdk.TruckType?
    public var forbiddenTruckRoadTypes: [heresdk.TruckRoadType]
    public var routingZoneReference: Swift.String?
    public var maxPayloadCapacityInKilograms: Swift.Int32?
    public var timeRule: heresdk.TimeRule?
    public init(maxGrossWeightInKilograms: Swift.Int32? = nil, maxWeightPerAxleInKilograms: Swift.Int32? = nil, maxWeightPerAxleGroupInKilograms: heresdk.MaxAxleGroupWeight? = nil, maxHeightInCentimeters: Swift.Int32? = nil, maxWidthInCentimeters: Swift.Int32? = nil, maxLengthInCentimeters: Swift.Int32? = nil, forbiddenAxleCount: heresdk.IntegerRange? = nil, forbiddenTrailerCount: heresdk.IntegerRange? = nil, forbiddenHazardousGoods: [heresdk.HazardousMaterial] = [], maxTunnelCategory: heresdk.TunnelCategory? = nil, forbiddenTruckType: heresdk.TruckType? = nil, forbiddenTruckRoadTypes: [heresdk.TruckRoadType] = [], routingZoneReference: Swift.String? = nil, maxPayloadCapacityInKilograms: Swift.Int32? = nil, timeRule: heresdk.TimeRule? = nil)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: heresdk.ViolatedRestriction.Details, b: heresdk.ViolatedRestriction.Details) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.ViolatedRestriction, b: heresdk.ViolatedRestriction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Waypoint : Swift.Hashable {
  public var coordinates: heresdk.GeoCoordinates
  public var type: heresdk.WaypointType
  public var transitRadiusInMeters: Swift.Int32
  public var headingInDegrees: Swift.Double?
  public var sideOfStreetHint: heresdk.GeoCoordinates?
  public var displayLocation: heresdk.GeoCoordinates?
  public var minCourseDistanceInMeters: Swift.Int32?
  public var nameHint: Swift.String?
  public var matchSideOfStreet: heresdk.MatchSideOfStreet?
  public var duration: Foundation.TimeInterval
  @available(*, deprecated, message: "Will be removed in v4.23.0. Please use `Waypoint.chargingStop` instead.")
  public var isChargingStation: Swift.Bool
  public var segmentHint: heresdk.SegmentReference?
  public var onRoadThresholdInMeters: Swift.Int32?
  public var chargingStop: heresdk.ChargingStop?
  public init(coordinates: heresdk.GeoCoordinates, type: heresdk.WaypointType = WaypointType.stopover, transitRadiusInMeters: Swift.Int32 = 0, headingInDegrees: Swift.Double? = nil, sideOfStreetHint: heresdk.GeoCoordinates? = nil, displayLocation: heresdk.GeoCoordinates? = nil, minCourseDistanceInMeters: Swift.Int32? = nil, nameHint: Swift.String? = nil, matchSideOfStreet: heresdk.MatchSideOfStreet? = nil, duration: Foundation.TimeInterval = 0, segmentHint: heresdk.SegmentReference? = nil, onRoadThresholdInMeters: Swift.Int32? = nil, chargingStop: heresdk.ChargingStop? = nil)
  @available(*, deprecated)
  public init(coordinates: heresdk.GeoCoordinates, type: heresdk.WaypointType = WaypointType.stopover, transitRadiusInMeters: Swift.Int32 = 0, headingInDegrees: Swift.Double? = nil, sideOfStreetHint: heresdk.GeoCoordinates? = nil, displayLocation: heresdk.GeoCoordinates? = nil, minCourseDistanceInMeters: Swift.Int32? = nil, nameHint: Swift.String? = nil, matchSideOfStreet: heresdk.MatchSideOfStreet? = nil, duration: Foundation.TimeInterval = 0, isChargingStation: Swift.Bool = false, segmentHint: heresdk.SegmentReference? = nil, onRoadThresholdInMeters: Swift.Int32? = nil, chargingStop: heresdk.ChargingStop? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Waypoint, b: heresdk.Waypoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum WaypointType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case stopover
  case passThrough
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.WaypointType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.WaypointType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum ZoneCategory : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case environmental
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.ZoneCategory]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.ZoneCategory] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias CalculateIsolineCompletionHandler = (heresdk.RoutingError?, [heresdk.Isoline]?) -> Swift.Void
@_hasMissingDesignatedInitializers public class Isoline {
  public init(rangeType: heresdk.IsolineRangeType, rangeValue: Swift.Double, center: heresdk.MapMatchedCoordinates, polygons: [heresdk.GeoPolygon])
  public var rangeType: heresdk.IsolineRangeType {
    get
  }
  public var rangeValue: Swift.Double {
    get
  }
  public var center: heresdk.MapMatchedCoordinates {
    get
  }
  public var polygons: [heresdk.GeoPolygon] {
    get
  }
  @objc deinit
}
extension heresdk.Isoline : Swift.Hashable {
  public static func == (lhs: heresdk.Isoline, rhs: heresdk.Isoline) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum IsolineCalculationMode : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case quality
  case performance
  case balanced
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.IsolineCalculationMode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.IsolineCalculationMode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct IsolineOptions {
  public var calculationOptions: heresdk.IsolineOptions.Calculation
  public var carOptions: heresdk.CarOptions?
  public var truckOptions: heresdk.TruckOptions?
  public var evCarOptions: heresdk.EVCarOptions?
  public var evTruckOptions: heresdk.EVTruckOptions?
  public init(calculationOptions: heresdk.IsolineOptions.Calculation, carOptions: heresdk.CarOptions)
  public init(calculationOptions: heresdk.IsolineOptions.Calculation, truckOptions: heresdk.TruckOptions)
  public init(calculationOptions: heresdk.IsolineOptions.Calculation, evCarOptions: heresdk.EVCarOptions)
  public init(calculationOptions: heresdk.IsolineOptions.Calculation, evTruckOptions: heresdk.EVTruckOptions)
  public struct Calculation {
    public var rangeType: heresdk.IsolineRangeType
    public var rangeValues: [Swift.Int32]
    public var isolineCalculationMode: heresdk.IsolineCalculationMode
    public var maxPoints: Swift.Int32?
    public var isolineDirection: heresdk.RoutePlaceDirection
    public init(rangeType: heresdk.IsolineRangeType, rangeValues: [Swift.Int32])
    public init(rangeType: heresdk.IsolineRangeType, rangeValues: [Swift.Int32], isolineDirection: heresdk.RoutePlaceDirection)
    public init(rangeType: heresdk.IsolineRangeType, rangeValues: [Swift.Int32], isolineCalculationMode: heresdk.IsolineCalculationMode)
    public init(rangeType: heresdk.IsolineRangeType, rangeValues: [Swift.Int32], isolineCalculationMode: heresdk.IsolineCalculationMode, maxPoints: Swift.Int32?, isolineDirection: heresdk.RoutePlaceDirection)
  }
}
public enum IsolineRangeType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case distanceInMeters
  case timeInSeconds
  case consumptionInWattHours
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.IsolineRangeType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.IsolineRangeType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class IsolineRoutingEngine {
  public init() throws
  public init(connectionSettings: heresdk.RoutingConnectionSettings) throws
  public init(_ sdkEngine: heresdk.SDKNativeEngine, connectionSettings: heresdk.RoutingConnectionSettings) throws
  public init(_ sdkEngine: heresdk.SDKNativeEngine) throws
  @objc deinit
  @discardableResult
  public func calculateIsoline(center: heresdk.Waypoint, isolineOptions: heresdk.IsolineOptions, completion: @escaping heresdk.CalculateIsolineCompletionHandler) -> heresdk.TaskHandle
  public func setCustomOption(name: Swift.String, value: Swift.String?) -> heresdk.RoutingError?
}
extension heresdk.IsolineRoutingEngine : Swift.Hashable {
  public static func == (lhs: heresdk.IsolineRoutingEngine, rhs: heresdk.IsolineRoutingEngine) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TransitRoutingEngine {
  public init() throws
  public init(_ sdkEngine: heresdk.SDKNativeEngine) throws
  @objc deinit
  @discardableResult
  public func calculateRoute(startingPoint: heresdk.TransitWaypoint, destination: heresdk.TransitWaypoint, routeOptions: heresdk.TransitRouteOptions, completion: @escaping heresdk.CalculateRouteCompletionHandler) -> heresdk.TaskHandle
}
extension heresdk.TransitRoutingEngine : Swift.Hashable {
  public static func == (lhs: heresdk.TransitRoutingEngine, rhs: heresdk.TransitRoutingEngine) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TransitWaypoint : Swift.Hashable {
  public var coordinates: heresdk.GeoCoordinates
  public var placeName: Swift.String?
  public init(coordinates: heresdk.GeoCoordinates, placeName: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TransitWaypoint, b: heresdk.TransitWaypoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SearchEngine : heresdk.SearchInterface {
  public init() throws
  public init(_ sdkEngine: heresdk.SDKNativeEngine) throws
  @objc deinit
  @discardableResult
  public func searchByText(_ query: heresdk.TextQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func searchByAddress(_ query: heresdk.AddressQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func searchByCategory(_ query: heresdk.CategoryQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func searchByCoordinates(_ coordinates: heresdk.GeoCoordinates, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func searchByPlaceId(_ query: heresdk.PlaceIdQuery, languageCode: heresdk.LanguageCode?, completion: @escaping heresdk.PlaceIdSearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func searchByPickedPlace(_ pickedPlace: heresdk.PickedPlace, languageCode: heresdk.LanguageCode?, completion: @escaping heresdk.PlaceIdSearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func suggestByText(_ query: heresdk.TextQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SuggestCompletionHandler) -> heresdk.TaskHandle
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `searchByText(...)` instead.")
  @discardableResult
  public func search(textQuery query: heresdk.TextQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func search(textQuery query: heresdk.TextQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchExtendedCompletionHandler) -> heresdk.TaskHandle
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `searchByAddress(...)` instead.")
  @discardableResult
  public func search(addressQuery query: heresdk.AddressQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func search(addressQuery query: heresdk.AddressQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchExtendedCompletionHandler) -> heresdk.TaskHandle
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `searchByPickedPlace(...)` instead.")
  @discardableResult
  public func searchPickedPlace(pickedPlace: heresdk.PickedPlace, languageCode: heresdk.LanguageCode?, completion: @escaping heresdk.PlaceIdSearchCompletionHandler) -> heresdk.TaskHandle
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `searchByPlaceId(...)` instead.")
  @discardableResult
  public func search(placeIdQuery query: heresdk.PlaceIdQuery, languageCode: heresdk.LanguageCode?, completion: @escaping heresdk.PlaceIdSearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func search(placeIdQuery query: heresdk.PlaceIdQuery, languageCode: heresdk.LanguageCode?, completion: @escaping heresdk.PlaceIdSearchExtendedCompletionHandler) -> heresdk.TaskHandle
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `searchByCoordinates(...)` instead.")
  @discardableResult
  public func search(coordinates: heresdk.GeoCoordinates, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func search(coordinates: heresdk.GeoCoordinates, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchExtendedCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func search(circle: heresdk.GeoCircle, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func search(circle: heresdk.GeoCircle, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchExtendedCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func sendRequest(href: Swift.String, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func sendRequest(href: Swift.String, completion: @escaping heresdk.SearchExtendedCompletionHandler) -> heresdk.TaskHandle
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `searchByCategory(...)` instead.")
  @discardableResult
  public func search(categoryQuery query: heresdk.CategoryQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func search(categoryQuery query: heresdk.CategoryQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchExtendedCompletionHandler) -> heresdk.TaskHandle
  @available(*, deprecated, message: "Will be removed in v4.22.0. Please use `suggestByText(...)` instead.")
  @discardableResult
  public func suggest(textQuery query: heresdk.TextQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SuggestCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func suggest(textQuery query: heresdk.TextQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SuggestExtendedCompletionHandler) -> heresdk.TaskHandle
  public func setCustomOption(name: Swift.String, value: Swift.String) -> heresdk.SearchError?
}
extension heresdk.SearchEngine : Swift.Hashable {
  public static func == (lhs: heresdk.SearchEngine, rhs: heresdk.SearchEngine) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Address : Swift.Hashable {
  public var city: Swift.String
  public var countryCode: Swift.String
  public var country: Swift.String
  public var district: Swift.String
  public var subdistrict: Swift.String
  public var houseNumOrName: Swift.String
  public var postalCode: Swift.String
  public var state: Swift.String
  public var county: Swift.String
  public var street: Swift.String
  public var block: Swift.String
  public var subBlock: Swift.String
  public var addressText: Swift.String
  public var type: heresdk.AddressType?
  public var stateCode: Swift.String
  public init(city: Swift.String = "", countryCode: Swift.String = "", country: Swift.String = "", district: Swift.String = "", subdistrict: Swift.String = "", houseNumOrName: Swift.String = "", postalCode: Swift.String = "", state: Swift.String = "", county: Swift.String = "", street: Swift.String = "", block: Swift.String = "", subBlock: Swift.String = "", addressText: Swift.String = "", type: heresdk.AddressType? = nil, stateCode: Swift.String = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Address, b: heresdk.Address) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct AddressQuery : Swift.Hashable {
  public let query: Swift.String
  public let areaCenter: heresdk.GeoCoordinates?
  public let countries: [heresdk.CountryCode]
  public init(_ query: Swift.String, near areaCenter: heresdk.GeoCoordinates)
  public init(_ query: Swift.String, near areaCenter: heresdk.GeoCoordinates, inCountries countries: [heresdk.CountryCode])
  public init(_ query: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.AddressQuery, b: heresdk.AddressQuery) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum AddressType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case block
  case subblock
  case houseNumber
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.AddressType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.AddressType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum AreaType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case country
  case state
  case county
  case city
  case postalCode
  case district
  case subDistrict
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.AreaType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.AreaType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct BusinessDetails : Swift.Hashable {
  public var contacts: [heresdk.Contact]
  public var openingHours: [heresdk.OpeningHours]
  public var evChargingPool: heresdk.EVChargingPool?
  public init(contacts: [heresdk.Contact] = [], openingHours: [heresdk.OpeningHours] = [], evChargingPool: heresdk.EVChargingPool? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.BusinessDetails, b: heresdk.BusinessDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct CategoryQuery : Swift.Hashable {
  public var categories: [heresdk.PlaceCategory]
  public var excludeCategories: [heresdk.PlaceCategory]
  public var includeChains: [heresdk.PlaceChain]
  public var excludeChains: [heresdk.PlaceChain]
  public var includeFoodTypes: [heresdk.PlaceFoodType]
  public var excludeFoodTypes: [heresdk.PlaceFoodType]
  public var filter: Swift.String?
  public var placeFilter: heresdk.PlaceFilter
  public var area: heresdk.CategoryQuery.Area
  public init(_ category: heresdk.PlaceCategory, area: heresdk.CategoryQuery.Area)
  public init(_ categories: [heresdk.PlaceCategory], area: heresdk.CategoryQuery.Area)
  public init(_ category: heresdk.PlaceCategory, filter: Swift.String, area: heresdk.CategoryQuery.Area)
  public init(_ categories: [heresdk.PlaceCategory], filter: Swift.String, area: heresdk.CategoryQuery.Area)
  public struct Area : Swift.Hashable {
    public let areaCenter: heresdk.GeoCoordinates
    public let boxArea: heresdk.GeoBox?
    public let circleArea: heresdk.GeoCircle?
    public let corridorArea: heresdk.GeoCorridor?
    public init(areaCenter: heresdk.GeoCoordinates)
    public init(near areaCenter: heresdk.GeoCoordinates, inBox boxArea: heresdk.GeoBox)
    public init(near areaCenter: heresdk.GeoCoordinates, inCircle circleArea: heresdk.GeoCircle)
    public init(inCorridor corridorArea: heresdk.GeoCorridor, near areaCenter: heresdk.GeoCoordinates)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: heresdk.CategoryQuery.Area, b: heresdk.CategoryQuery.Area) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.CategoryQuery, b: heresdk.CategoryQuery) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Contact : Swift.Hashable {
  public var landlinePhones: [heresdk.LandlinePhone]
  public var mobilePhones: [heresdk.MobilePhone]
  public var emails: [heresdk.EmailAddress]
  public var websites: [heresdk.WebsiteAddress]
  public init()
  public init(landlinePhones: [heresdk.LandlinePhone], mobilePhones: [heresdk.MobilePhone], emails: [heresdk.EmailAddress], websites: [heresdk.WebsiteAddress])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Contact, b: heresdk.Contact) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Details : Swift.Hashable {
  public var contacts: [heresdk.Contact]
  public var openingHours: [heresdk.OpeningHours]
  public var categories: [heresdk.PlaceCategory]
  public var images: [heresdk.WebImage]
  public var editorials: [heresdk.WebEditorial]
  public var ratings: [heresdk.WebRating]
  public var references: [heresdk.SupplierReference]
  public var evChargingPool: heresdk.EVChargingPool?
  public var truckAmenities: heresdk.TruckAmenities?
  public var fuelStation: heresdk.FuelStation?
  public var foodTypes: [heresdk.PlaceFoodType]
  public var payment: heresdk.POIPaymentDetails?
  public init(contacts: [heresdk.Contact], openingHours: [heresdk.OpeningHours], categories: [heresdk.PlaceCategory], images: [heresdk.WebImage], editorials: [heresdk.WebEditorial], ratings: [heresdk.WebRating], references: [heresdk.SupplierReference], evChargingPool: heresdk.EVChargingPool? = nil, truckAmenities: heresdk.TruckAmenities? = nil, fuelStation: heresdk.FuelStation? = nil, foodTypes: [heresdk.PlaceFoodType] = [], payment: heresdk.POIPaymentDetails? = nil)
  public func getPrimaryCategories() -> [heresdk.PlaceCategory]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Details, b: heresdk.Details) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EMobilityServiceProvider : Swift.Hashable {
  public var name: Swift.String?
  public var partnerId: Swift.String?
  public init(name: Swift.String? = nil, partnerId: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.EMobilityServiceProvider, b: heresdk.EMobilityServiceProvider) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EVChargingPool : Swift.Hashable {
  public var chargingStations: [heresdk.EVChargingStation]
  public var eMobilityServiceProviders: [heresdk.EMobilityServiceProvider]
  public var details: heresdk.EVChargingPoolDetails?
  public var id: Swift.String?
  public var cpoId: Swift.String?
  public var evseInfo: [heresdk.Evse]
  public init(chargingStations: [heresdk.EVChargingStation], eMobilityServiceProviders: [heresdk.EMobilityServiceProvider], details: heresdk.EVChargingPoolDetails? = nil, id: Swift.String? = nil, cpoId: Swift.String? = nil, evseInfo: [heresdk.Evse] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.EVChargingPool, b: heresdk.EVChargingPool) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EVChargingPoolDetails : Swift.Hashable {
  public var evChargingOnSite: Swift.Bool?
  public var evNetwork: Swift.String?
  public var ownerInformation: Swift.String?
  @available(*, deprecated, message: "Will be removed in v4.23.0. Current value is always set to false.")
  public var paymentIsRequired: Swift.Bool?
  public var reservable: Swift.Bool?
  @available(*, deprecated, message: "Will be removed in v4.23.0. Current value is always set to false.")
  public var subscriptionIsRequired: Swift.Bool?
  public var totalNumberOfStations: Swift.UInt32?
  public init(evChargingOnSite: Swift.Bool? = nil, evNetwork: Swift.String? = nil, ownerInformation: Swift.String? = nil, reservable: Swift.Bool? = nil, totalNumberOfStations: Swift.UInt32? = nil)
  @available(*, deprecated)
  public init(evChargingOnSite: Swift.Bool? = nil, evNetwork: Swift.String? = nil, ownerInformation: Swift.String? = nil, paymentIsRequired: Swift.Bool? = nil, reservable: Swift.Bool? = nil, subscriptionIsRequired: Swift.Bool? = nil, totalNumberOfStations: Swift.UInt32? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.EVChargingPoolDetails, b: heresdk.EVChargingPoolDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EVChargingStation : Swift.Hashable {
  public var supplierName: Swift.String?
  public var connectorTypeName: Swift.String?
  public var connectorTypeId: Swift.String?
  public var powerFeedTypeName: Swift.String?
  public var powerFeedTypeId: Swift.String?
  public var maxPowerInKilowatts: Swift.Double?
  public var connectorCount: Swift.Int32?
  public var availableConnectorCount: Swift.Int32?
  public var occupiedConnectorCount: Swift.Int32?
  public var outOfServiceConnectorCount: Swift.Int32?
  public var reservedConnectorCount: Swift.Int32?
  public var lastUpdated: Foundation.Date?
  public var chargingMode: Swift.String?
  public var voltageRangeInVolts: Swift.String?
  public var currentRangeInAmperes: Swift.String?
  public var phaseCount: Swift.Int32?
  public var hasFixedCable: Swift.Bool?
  public init(supplierName: Swift.String? = nil, connectorTypeName: Swift.String? = nil, connectorTypeId: Swift.String? = nil, powerFeedTypeName: Swift.String? = nil, powerFeedTypeId: Swift.String? = nil, maxPowerInKilowatts: Swift.Double? = nil, connectorCount: Swift.Int32? = nil, availableConnectorCount: Swift.Int32? = nil, occupiedConnectorCount: Swift.Int32? = nil, outOfServiceConnectorCount: Swift.Int32? = nil, reservedConnectorCount: Swift.Int32? = nil, lastUpdated: Foundation.Date? = nil, chargingMode: Swift.String? = nil, voltageRangeInVolts: Swift.String? = nil, currentRangeInAmperes: Swift.String? = nil, phaseCount: Swift.Int32? = nil, hasFixedCable: Swift.Bool? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.EVChargingStation, b: heresdk.EVChargingStation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EVSEConnector : Swift.Hashable {
  public var id: Swift.String?
  public var cpoId: Swift.String?
  public var typeId: Swift.String?
  public var maxPowerInKilowatts: Swift.Double?
  public init(id: Swift.String? = nil, cpoId: Swift.String? = nil, typeId: Swift.String? = nil, maxPowerInKilowatts: Swift.Double? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.EVSEConnector, b: heresdk.EVSEConnector) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum EVSEStatus : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case available
  case occupied
  case offline
  case other
  case outOfService
  case reserved
  case unavailable
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.EVSEStatus]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.EVSEStatus] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct EmailAddress : Swift.Hashable {
  public var address: Swift.String
  public var categories: [heresdk.PlaceCategory]
  public init(address: Swift.String, categories: [heresdk.PlaceCategory])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.EmailAddress, b: heresdk.EmailAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Evse : Swift.Hashable {
  public var id: Swift.String?
  public var cpoId: Swift.String?
  public var cpoEvseEmi3Id: Swift.String?
  public var status: heresdk.EVSEStatus?
  public var lastUpdated: Foundation.Date?
  public var connectors: [heresdk.EVSEConnector]
  public init(id: Swift.String? = nil, cpoId: Swift.String? = nil, cpoEvseEmi3Id: Swift.String? = nil, status: heresdk.EVSEStatus? = nil, lastUpdated: Foundation.Date? = nil, connectors: [heresdk.EVSEConnector] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.Evse, b: heresdk.Evse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct FuelAdditive : Swift.Hashable {
  public var type: heresdk.FuelAdditiveType
  public var availableInCans: Swift.Bool?
  public var availableAtPump: Swift.Bool?
  public init(type: heresdk.FuelAdditiveType = FuelAdditiveType.aus32, availableInCans: Swift.Bool? = nil, availableAtPump: Swift.Bool? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.FuelAdditive, b: heresdk.FuelAdditive) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct FuelStation : Swift.Hashable {
  public var fuels: [heresdk.GenericFuel]
  public var truckFuels: [heresdk.TruckFuel]
  public var payAtThePump: Swift.Bool?
  public var highVolumePumps: Swift.Bool?
  public init(fuels: [heresdk.GenericFuel] = [], truckFuels: [heresdk.TruckFuel] = [], payAtThePump: Swift.Bool? = nil, highVolumePumps: Swift.Bool? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.FuelStation, b: heresdk.FuelStation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericFuel : Swift.Hashable {
  public var type: heresdk.FuelType
  public var additives: [heresdk.FuelAdditive]
  public init(type: heresdk.FuelType, additives: [heresdk.FuelAdditive] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GenericFuel, b: heresdk.GenericFuel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct GeoPlace : Swift.Hashable {
  public var title: Swift.String
  public var externalIDs: [heresdk.ExternalID]
  public var type: heresdk.PlaceType
  public var categories: [heresdk.PlaceCategory]
  public var address: heresdk.Address
  public var location: heresdk.LocationDetails?
  public var business: heresdk.BusinessDetails
  public var web: heresdk.WebDetails
  public init(title: Swift.String = "", externalIDs: [heresdk.ExternalID] = [], type: heresdk.PlaceType = PlaceType.unknown, categories: [heresdk.PlaceCategory] = [], address: heresdk.Address = Address(), location: heresdk.LocationDetails? = nil, business: heresdk.BusinessDetails = BusinessDetails(), web: heresdk.WebDetails = WebDetails())
  public static func makeMyPlace(title: Swift.String, coordinates: heresdk.GeoCoordinates) -> heresdk.GeoPlace
  public func getID() -> Swift.String
  public func isMyPlace() -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.GeoPlace, b: heresdk.GeoPlace) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum HighlightType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case title
  case addressLabel
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.HighlightType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.HighlightType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class IndexRange {
  public var start: Swift.Int32 {
    get
  }
  public var end: Swift.Int32 {
    get
  }
  @objc deinit
}
extension heresdk.IndexRange : Swift.Hashable {
  public static func == (lhs: heresdk.IndexRange, rhs: heresdk.IndexRange) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LandlinePhone : Swift.Hashable {
  public var phoneNumber: Swift.String
  public var categories: [heresdk.PlaceCategory]
  public init()
  public init(phoneNumber: Swift.String, categories: [heresdk.PlaceCategory])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.LandlinePhone, b: heresdk.LandlinePhone) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct LocationDetails : Swift.Hashable {
  public var coordinates: heresdk.GeoCoordinates
  public var coordinatesInterpolated: Swift.Bool
  public var accessPoints: [heresdk.GeoCoordinates]
  public var boundingBox: heresdk.GeoBox?
  public init(coordinates: heresdk.GeoCoordinates, coordinatesInterpolated: Swift.Bool = false, accessPoints: [heresdk.GeoCoordinates] = [], boundingBox: heresdk.GeoBox? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.LocationDetails, b: heresdk.LocationDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct MobilePhone : Swift.Hashable {
  public var phoneNumber: Swift.String
  public var categories: [heresdk.PlaceCategory]
  public init()
  public init(phoneNumber: Swift.String, categories: [heresdk.PlaceCategory])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.MobilePhone, b: heresdk.MobilePhone) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct OpeningHours : Swift.Hashable {
  public var text: [Swift.String]
  public var isOpen: Swift.Bool
  public var scheduleDetailsList: [heresdk.ScheduleDetails]
  public var categories: [heresdk.PlaceCategory]
  public init(text: [Swift.String], isOpen: Swift.Bool, scheduleDetailsList: [heresdk.ScheduleDetails], categories: [heresdk.PlaceCategory])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.OpeningHours, b: heresdk.OpeningHours) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct POIPaymentDetails : Swift.Hashable {
  public var acceptedMethods: [Swift.String]
  public var acceptedCashCurrencies: [Swift.String]
  public init(acceptedMethods: [Swift.String] = [], acceptedCashCurrencies: [Swift.String] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.POIPaymentDetails, b: heresdk.POIPaymentDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct POIPaymentMethod {
  public static let amex: Swift.String
  public static let ampol: Swift.String
  public static let androidPay: Swift.String
  public static let applePay: Swift.String
  public static let cash: Swift.String
  public static let cheque: Swift.String
  public static let debitCard: Swift.String
  public static let dinersClub: Swift.String
  public static let discover: Swift.String
  public static let dkv: Swift.String
  public static let financing: Swift.String
  public static let mastercard: Swift.String
  public static let motorpass: Swift.String
  public static let paypal: Swift.String
  public static let shell: Swift.String
  public static let visa: Swift.String
}
@_hasMissingDesignatedInitializers public class Place {
  public var title: Swift.String {
    get
  }
  public var id: Swift.String {
    get
  }
  public var placeType: heresdk.PlaceType {
    get
  }
  public var areaType: heresdk.AreaType? {
    get
  }
  public var address: heresdk.Address {
    get
  }
  public var details: heresdk.Details {
    get
  }
  public var geoCoordinates: heresdk.GeoCoordinates? {
    get
  }
  public var isCoordinatesInterpolated: Swift.Bool {
    get
  }
  public var accessPoints: [heresdk.GeoCoordinates] {
    get
  }
  public var boundingBox: heresdk.GeoBox? {
    get
  }
  public var distanceInMeters: Swift.Int32? {
    get
  }
  public var politicalView: Swift.String? {
    get
  }
  @objc deinit
  public func serializeCompact() -> Swift.String
  public static func deserialize(serializedPlace: Swift.String) throws -> heresdk.Place
}
extension heresdk.Place : Swift.Hashable {
  public static func == (lhs: heresdk.Place, rhs: heresdk.Place) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PlaceCategory {
  public init(id: Swift.String)
  public static let eatAndDrink: Swift.String
  public static let eatAndDrinkRestaurant: Swift.String
  public static let eatAndDrinkCoffeeTea: Swift.String
  public static let goingOutEntertainment: Swift.String
  public static let goingOutNightlife: Swift.String
  public static let goingOutCinema: Swift.String
  public static let goingOutTheatreMusicCulture: Swift.String
  public static let goingOutGamblingLotteryBetting: Swift.String
  public static let sightsAndMuseums: Swift.String
  public static let sightsLandmarkAttaction: Swift.String
  public static let sightsMuseum: Swift.String
  public static let sightsReligiousPlace: Swift.String
  public static let naturalAndGeographical: Swift.String
  public static let naturalAndGeographicalBodyOfWater: Swift.String
  public static let naturalAndGeographicalMountainOrHill: Swift.String
  public static let naturalAndGeographicalUnderseaFeature: Swift.String
  public static let naturalAndGeographicalForestHealthOtherVegetation: Swift.String
  public static let naturalAndGeographicalOther: Swift.String
  public static let transport: Swift.String
  public static let transportAirport: Swift.String
  public static let transportPublic: Swift.String
  public static let transportCargo: Swift.String
  public static let transportRestArea: Swift.String
  public static let accommodation: Swift.String
  public static let accommodationHotelMotel: Swift.String
  public static let accommodationLodging: Swift.String
  public static let leisureAndOutdoor: Swift.String
  public static let leisureOutdoorRecreation: Swift.String
  public static let leisureOther: Swift.String
  public static let shopping: Swift.String
  public static let shoppingConvenienceStore: Swift.String
  public static let shoppingMallComplex: Swift.String
  public static let shoppingDepartmentStore: Swift.String
  public static let shoppingFoodAndDrink: Swift.String
  public static let shoppingDrugstorePharmacy: Swift.String
  public static let shoppingElectronics: Swift.String
  public static let shoppingHardwareHouseGarden: Swift.String
  public static let shoppingBookstore: Swift.String
  public static let shoppingClothingAndAccesories: Swift.String
  public static let shoppingConsumerGoods: Swift.String
  public static let shoppingHairAndBeauty: Swift.String
  public static let businessAndServices: Swift.String
  public static let businessAndServicesBanking: Swift.String
  public static let businessAndServicesAtm: Swift.String
  public static let businessAndServicesMoneyCash: Swift.String
  public static let businessAndServicesCommunicationMedia: Swift.String
  public static let businessAndCommercialServices: Swift.String
  public static let businessAndServicesIndustry: Swift.String
  public static let businessAndServicesPoliceFireEmergency: Swift.String
  public static let businessAndConsumerServices: Swift.String
  public static let businessAndServicesPostOffice: Swift.String
  public static let businessAndServicesTouristInformation: Swift.String
  public static let businessAndServicesFuelingStation: Swift.String
  public static let businessAndServicesPetrolGasolineStation: Swift.String
  public static let businessAndServicesEvChargingStation: Swift.String
  public static let businessAndServicesCarDealerSales: Swift.String
  public static let businessAndServicesCarRepairServices: Swift.String
  public static let businessAndServicesCarRental: Swift.String
  public static let businessAndServicesTruckSemiDealer: Swift.String
  public static let facilities: Swift.String
  public static let facilitiesHospitalHealthcare: Swift.String
  public static let facilitiesGovernmentCommunitty: Swift.String
  public static let facilitiesEducation: Swift.String
  public static let facilitiesSchool: Swift.String
  public static let facilitiesLibrary: Swift.String
  public static let facilitiesEventSpaces: Swift.String
  public static let facilitiesParking: Swift.String
  public static let facilitiesVenueSports: Swift.String
  public static let facilitiesOther: Swift.String
  public static let areasAndBuildings: Swift.String
  public static let areasAndBuildingsOutdoorComplex: Swift.String
  public static let areasAndBuildingsResidentalOffice: Swift.String
  public var id: Swift.String {
    get
  }
  public var name: Swift.String? {
    get
  }
  @objc deinit
}
extension heresdk.PlaceCategory : Swift.Hashable {
  public static func == (lhs: heresdk.PlaceCategory, rhs: heresdk.PlaceCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PlaceChain : Swift.Hashable {
  public var id: Swift.String
  public init(id: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.PlaceChain, b: heresdk.PlaceChain) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct PlaceFilter : Swift.Hashable {
  public var fuelTypes: [heresdk.FuelType]
  public var truckFuelTypes: [heresdk.TruckFuelType]
  public var truckClass: heresdk.TruckClass?
  public var ev: heresdk.PlaceFilter.Ev
  public init(fuelTypes: [heresdk.FuelType] = [], truckFuelTypes: [heresdk.TruckFuelType] = [], truckClass: heresdk.TruckClass? = nil, ev: heresdk.PlaceFilter.Ev = PlaceFilter.Ev())
  public struct Ev : Swift.Hashable {
    public var supplierNames: [Swift.String]
    public var connectorTypeIDs: [Swift.String]
    public var minPowerInKilowatts: Swift.Double?
    public var eMobilityServiceProviderPartnerIDs: [Swift.String]
    public init(supplierNames: [Swift.String] = [], connectorTypeIDs: [Swift.String] = [], minPowerInKilowatts: Swift.Double? = nil, eMobilityServiceProviderPartnerIDs: [Swift.String] = [])
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: heresdk.PlaceFilter.Ev, b: heresdk.PlaceFilter.Ev) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.PlaceFilter, b: heresdk.PlaceFilter) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct PlaceFoodType : Swift.Hashable {
  public var id: Swift.String
  public var name: Swift.String?
  public var primary: Swift.Bool
  public init(id: Swift.String, name: Swift.String? = nil, primary: Swift.Bool = false)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.PlaceFoodType, b: heresdk.PlaceFoodType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct PlaceIdQuery : Swift.Hashable {
  public let id: Swift.String
  public init(_ id: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.PlaceIdQuery, b: heresdk.PlaceIdQuery) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias PlaceIdSearchCompletionHandler = (heresdk.SearchError?, heresdk.Place?) -> Swift.Void
public typealias PlaceIdSearchExtendedCompletionHandler = (heresdk.SearchError?, heresdk.Place?, heresdk.ResponseDetails?) -> Swift.Void
public enum PlaceSerializationError : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case unknown
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.PlaceSerializationError]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.PlaceSerializationError] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias PlaceSerializationException = heresdk.PlaceSerializationError
extension heresdk.PlaceSerializationError : Swift.Error {
}
public enum PlaceType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case poi
  case address
  case area
  case street
  case intersection
  case unknown
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.PlaceType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.PlaceType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct ResponseDetails : Swift.Hashable {
  public var correlationId: Swift.String
  public var requestId: Swift.String
  public init(correlationId: Swift.String, requestId: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.ResponseDetails, b: heresdk.ResponseDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ScheduleDetails : Swift.Hashable {
  public var start: Swift.String
  public var duration: Swift.String
  public var recurrence: Swift.String
  public init(start: Swift.String, duration: Swift.String, recurrence: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.ScheduleDetails, b: heresdk.ScheduleDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias SearchCompletionHandler = (heresdk.SearchError?, [heresdk.Place]?) -> Swift.Void
public enum SearchError : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case authenticationFailed
  case maxItemsOutOfRange
  case parsingError
  case noResultsFound
  case httpError
  case serverUnreachable
  case invalidParameter
  case forbidden
  case exceededUsageLimit
  case operationFailed
  case operationCancelled
  case timedOut
  case offline
  case queryTooLong
  case filterTooLong
  case proxyAuthenticationFailed
  case proxyServerUnreachable
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.SearchError]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.SearchError] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias SearchExtendedCompletionHandler = (heresdk.SearchError?, [heresdk.Place]?, heresdk.ResponseDetails?) -> Swift.Void
public protocol SearchInterface : AnyObject {
  @discardableResult
  func searchByText(_ query: heresdk.TextQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func searchByAddress(_ query: heresdk.AddressQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func searchByCategory(_ query: heresdk.CategoryQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func searchByCoordinates(_ coordinates: heresdk.GeoCoordinates, options: heresdk.SearchOptions, completion: @escaping heresdk.SearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func searchByPlaceId(_ query: heresdk.PlaceIdQuery, languageCode: heresdk.LanguageCode?, completion: @escaping heresdk.PlaceIdSearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func searchByPickedPlace(_ pickedPlace: heresdk.PickedPlace, languageCode: heresdk.LanguageCode?, completion: @escaping heresdk.PlaceIdSearchCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  func suggestByText(_ query: heresdk.TextQuery, options: heresdk.SearchOptions, completion: @escaping heresdk.SuggestCompletionHandler) -> heresdk.TaskHandle
}
public struct SearchOptions : Swift.Hashable {
  public var languageCode: heresdk.LanguageCode?
  public var maxItems: Swift.Int32?
  public var highDensityEncodingEnabled: Swift.Bool
  public init(languageCode: heresdk.LanguageCode? = nil, maxItems: Swift.Int32? = nil, highDensityEncodingEnabled: Swift.Bool = false)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.SearchOptions, b: heresdk.SearchOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct StructuredQuery : Swift.Hashable {
  public var query: Swift.String
  public var areaCenter: heresdk.GeoCoordinates
  public var addressElements: heresdk.StructuredQuery.AddressElements
  public var resultType: heresdk.StructuredQuery.ResultType?
  public init(query: Swift.String, areaCenter: heresdk.GeoCoordinates, addressElements: heresdk.StructuredQuery.AddressElements = StructuredQuery.AddressElements(), resultType: heresdk.StructuredQuery.ResultType? = nil)
  public enum ResultType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case country
    case city
    case postalCode
    case district
    case street
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.StructuredQuery.ResultType]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.StructuredQuery.ResultType] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct AddressElements : Swift.Hashable {
    public var country: Swift.String?
    public var city: Swift.String?
    public var postalCode: Swift.String?
    public var district: Swift.String?
    public init(country: Swift.String? = nil, city: Swift.String? = nil, postalCode: Swift.String? = nil, district: Swift.String? = nil)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: heresdk.StructuredQuery.AddressElements, b: heresdk.StructuredQuery.AddressElements) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.StructuredQuery, b: heresdk.StructuredQuery) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias SuggestCompletionHandler = (heresdk.SearchError?, [heresdk.Suggestion]?) -> Swift.Void
public typealias SuggestExtendedCompletionHandler = (heresdk.SearchError?, [heresdk.Suggestion]?, heresdk.ResponseDetails?) -> Swift.Void
@_hasMissingDesignatedInitializers public class Suggestion {
  public var title: Swift.String {
    get
  }
  public var type: heresdk.SuggestionType {
    get
  }
  public var place: heresdk.Place? {
    get
  }
  public var id: Swift.String? {
    get
  }
  public var href: Swift.String? {
    get
  }
  @objc deinit
  public func getHighlights() -> [heresdk.HighlightType : [heresdk.IndexRange]]
}
extension heresdk.Suggestion : Swift.Hashable {
  public static func == (lhs: heresdk.Suggestion, rhs: heresdk.Suggestion) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SuggestionType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case category
  case chain
  case place
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.SuggestionType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.SuggestionType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct SupplierReference : Swift.Hashable {
  public var supplier: Swift.String
  public var id: Swift.String
  public init(supplier: Swift.String, id: Swift.String)
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.SupplierReference, b: heresdk.SupplierReference) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TextQuery : Swift.Hashable {
  public var query: Swift.String
  public var area: heresdk.TextQuery.Area
  public var placeFilter: heresdk.PlaceFilter
  public init(_ query: Swift.String, area: heresdk.TextQuery.Area)
  public struct Area : Swift.Hashable {
    public let areaCenter: heresdk.GeoCoordinates?
    public let boxArea: heresdk.GeoBox?
    public let circleArea: heresdk.GeoCircle?
    public let corridorArea: heresdk.GeoCorridor?
    public let countries: [heresdk.CountryCode]
    public init(areaCenter: heresdk.GeoCoordinates)
    public init(inBox boxArea: heresdk.GeoBox)
    public init(inCircle circleArea: heresdk.GeoCircle)
    public init(inCorridor corridorArea: heresdk.GeoCorridor, near areaCenter: heresdk.GeoCoordinates)
    public init(inCountries countries: [heresdk.CountryCode], near areaCenter: heresdk.GeoCoordinates)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: heresdk.TextQuery.Area, b: heresdk.TextQuery.Area) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TextQuery, b: heresdk.TextQuery) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TruckAmenities : Swift.Hashable {
  public var hasParking: Swift.Bool
  public var hasSecureParking: Swift.Bool
  public var hasCarWash: Swift.Bool
  public var hasTruckWash: Swift.Bool
  public var hasHighCanopy: Swift.Bool
  public var hasIdleReductionSystem: Swift.Bool
  public var hasTruckScales: Swift.Bool
  public var hasPowerSupply: Swift.Bool
  public var hasChemicalToiletDisposal: Swift.Bool
  public var hasTruckStop: Swift.Bool
  public var hasWifi: Swift.Bool
  public var hasTruckService: Swift.Bool
  public var hasShower: Swift.Bool
  public var showerCount: Swift.Int32?
  public init(hasParking: Swift.Bool = false, hasSecureParking: Swift.Bool = false, hasCarWash: Swift.Bool = false, hasTruckWash: Swift.Bool = false, hasHighCanopy: Swift.Bool = false, hasIdleReductionSystem: Swift.Bool = false, hasTruckScales: Swift.Bool = false, hasPowerSupply: Swift.Bool = false, hasChemicalToiletDisposal: Swift.Bool = false, hasTruckStop: Swift.Bool = false, hasWifi: Swift.Bool = false, hasTruckService: Swift.Bool = false, hasShower: Swift.Bool = false, showerCount: Swift.Int32? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TruckAmenities, b: heresdk.TruckAmenities) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TruckFuel : Swift.Hashable {
  public var type: heresdk.TruckFuelType
  public var maximumTruckClass: heresdk.TruckClass?
  public init(type: heresdk.TruckFuelType, maximumTruckClass: heresdk.TruckClass? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TruckFuel, b: heresdk.TruckFuel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct WebDetails : Swift.Hashable {
  public var images: [heresdk.WebImage]
  public var editorials: [heresdk.WebEditorial]
  public var ratings: [heresdk.WebRating]
  public init(images: [heresdk.WebImage] = [], editorials: [heresdk.WebEditorial] = [], ratings: [heresdk.WebRating] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.WebDetails, b: heresdk.WebDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct WebEditorial : Swift.Hashable {
  public var description: Swift.String
  public var language: Swift.String
  public var source: heresdk.WebSource
  public init(description: Swift.String, language: Swift.String, source: heresdk.WebSource)
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.WebEditorial, b: heresdk.WebEditorial) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct WebImage : Swift.Hashable {
  public var date: Foundation.Date
  public var source: heresdk.WebSource
  public init(date: Foundation.Date, source: heresdk.WebSource)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.WebImage, b: heresdk.WebImage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct WebRating : Swift.Hashable {
  public var count: Swift.Int32
  public var average: Swift.Double
  public var source: heresdk.WebSource
  public init(count: Swift.Int32, average: Swift.Double, source: heresdk.WebSource)
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.WebRating, b: heresdk.WebRating) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct WebSource : Swift.Hashable {
  public var href: Swift.String
  public var supplierId: Swift.String
  public init(href: Swift.String, supplierId: Swift.String)
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.WebSource, b: heresdk.WebSource) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct WebsiteAddress : Swift.Hashable {
  public var address: Swift.String
  public var categories: [heresdk.PlaceCategory]
  public init(address: Swift.String, categories: [heresdk.PlaceCategory])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.WebsiteAddress, b: heresdk.WebsiteAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum JunctionsTraversability : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case allOpen
  case allClosed
  case intermediateClosedEdgeOpen
  case startOpenOthersClosed
  case endOpenOthersClosed
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.JunctionsTraversability]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.JunctionsTraversability] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class TrafficEngine {
  public init() throws
  public init(_ sdkEngine: heresdk.SDKNativeEngine) throws
  @objc deinit
  @discardableResult
  public func queryForIncidents(inside boxArea: heresdk.GeoBox, queryOptions: heresdk.TrafficIncidentsQueryOptions, completion: @escaping heresdk.TrafficIncidentsQueryCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func queryForIncidents(inside circleArea: heresdk.GeoCircle, queryOptions: heresdk.TrafficIncidentsQueryOptions, completion: @escaping heresdk.TrafficIncidentsQueryCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func queryForIncidents(inside corridorArea: heresdk.GeoCorridor, queryOptions: heresdk.TrafficIncidentsQueryOptions, completion: @escaping heresdk.TrafficIncidentsQueryCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func lookupIncident(with originalId: Swift.String, lookupOptions: heresdk.TrafficIncidentLookupOptions, completion: @escaping heresdk.TrafficIncidentCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func queryForFlow(inside boxArea: heresdk.GeoBox, queryOptions: heresdk.TrafficFlowQueryOptions, completion: @escaping heresdk.TrafficFlowQueryCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func queryForFlow(inside circleArea: heresdk.GeoCircle, queryOptions: heresdk.TrafficFlowQueryOptions, completion: @escaping heresdk.TrafficFlowQueryCompletionHandler) -> heresdk.TaskHandle
  @discardableResult
  public func queryForFlow(inside corridorArea: heresdk.GeoCorridor, queryOptions: heresdk.TrafficFlowQueryOptions, completion: @escaping heresdk.TrafficFlowQueryCompletionHandler) -> heresdk.TaskHandle
}
extension heresdk.TrafficEngine : Swift.Hashable {
  public static func == (lhs: heresdk.TrafficEngine, rhs: heresdk.TrafficEngine) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TrafficFlow : heresdk.TrafficFlowBase {
  public var freeFlowSpeedInMetersPerSecond: Swift.Double {
    get
  }
  public var jamFactor: Swift.Double {
    get
  }
  public var location: heresdk.TrafficLocation {
    get
  }
  public var speedInMetersPerSecond: Swift.Double? {
    get
  }
  public var speedUncappedInMetersPerSecond: Swift.Double? {
    get
  }
  public var jamTendency: Swift.Int16? {
    get
  }
  public var confidence: Swift.Double? {
    get
  }
  public var traversability: heresdk.Traversability? {
    get
  }
  public var junctionsTraversability: heresdk.JunctionsTraversability? {
    get
  }
  @objc deinit
}
extension heresdk.TrafficFlow : Swift.Hashable {
  public static func == (lhs: heresdk.TrafficFlow, rhs: heresdk.TrafficFlow) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias TrafficFlowQueryCompletionHandler = (heresdk.TrafficQueryError?, [heresdk.TrafficFlow]?) -> Swift.Void
public struct TrafficFlowQueryOptions : Swift.Hashable {
  public var minJamFactor: Swift.Double?
  public var maxJamFactor: Swift.Double?
  public init(minJamFactor: Swift.Double? = nil, maxJamFactor: Swift.Double? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TrafficFlowQueryOptions, b: heresdk.TrafficFlowQueryOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TrafficIncident : heresdk.TrafficIncidentBase {
  public var impact: heresdk.TrafficIncidentImpact {
    get
  }
  public var type: heresdk.TrafficIncidentType {
    get
  }
  public var description: heresdk.LocalizedText {
    get
  }
  public var startTime: Foundation.Date? {
    get
  }
  public var endTime: Foundation.Date? {
    get
  }
  public var id: Swift.String {
    get
  }
  public var originalId: Swift.String {
    get
  }
  public var parentId: Swift.String? {
    get
  }
  public var junctionsTraversability: heresdk.JunctionsTraversability {
    get
  }
  public var isRoadClosed: Swift.Bool {
    get
  }
  public var codes: [Swift.Int32] {
    get
  }
  public var summary: heresdk.LocalizedText {
    get
  }
  public var entryTime: Foundation.Date? {
    get
  }
  public var location: heresdk.TrafficLocation {
    get
  }
  public var vehicleRestrictions: [heresdk.TrafficIncident.RestrictedVehicleCategory : heresdk.TrafficIncident.VehicleRestriction] {
    get
  }
  @objc deinit
  public enum RestrictedVehicleCategory : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
    case bus
    case car
    case heavyGoodsVehicle
    case truck
    case motorcycle
    case motorVehicle
    case taxi
    case train
    case transportingAbnormalSizeLoad
    case transportingHazardousGoods
    case vehicleWithTrailer
    case other
    case all
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [heresdk.TrafficIncident.RestrictedVehicleCategory]
    public typealias RawValue = Swift.UInt32
    public static var allCases: [heresdk.TrafficIncident.RestrictedVehicleCategory] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct VehicleRestriction : Swift.Hashable {
    public var isRestrictedAlways: Swift.Bool
    public var isDieselFuelRestricted: Swift.Bool
    public var isPetrolFuelRestricted: Swift.Bool
    public var isLpgFuelRestricted: Swift.Bool
    public var isCaravanRestricted: Swift.Bool
    public var isTrailerRestricted: Swift.Bool
    public var isDrivingWithoutSnowChainsRestricted: Swift.Bool
    public var isDrivingWithoutWinterTyresRestricted: Swift.Bool
    public var isEvenNumberPlateRestricted: Swift.Bool
    public var isOddNumberPlateRestricted: Swift.Bool
    public var isThroughTrafficRestricted: Swift.Bool
    public var isResidentsTrafficRestricted: Swift.Bool
    public var isDestinationInIncidentAreaRestricted: Swift.Bool
    public var isEuro3EmissionStandardRestricted: Swift.Bool
    public var isEuro4EmissionStandardRestricted: Swift.Bool
    public var isEuro5EmissionStandardRestricted: Swift.Bool
    public var restrictedIfGrossWeightMoreThanInKilograms: Swift.Int32?
    public var restrictedIfGrossWeightLessThanInKilograms: Swift.Int32?
    public var restrictedIfAxleWeightMoreThanInKilograms: Swift.Int32?
    public var restrictedIfAxleWeightLessThanInKilograms: Swift.Int32?
    public var restrictedIfLongerThanInCentimeters: Swift.Int32?
    public var restrictedIfShorterThanInCentimeters: Swift.Int32?
    public var restrictedIfHigherThanInCentimeters: Swift.Int32?
    public var restrictedIfLowerThanInCentimeters: Swift.Int32?
    public var restrictedIfWiderThanInCentimeters: Swift.Int32?
    public var restrictedIfNarrowerThanInCentimeters: Swift.Int32?
    public var restrictedIfOccupantsMoreThan: Swift.Int32?
    public var restrictedIfOccupantsFewerThan: Swift.Int32?
    public init(isRestrictedAlways: Swift.Bool = false, isDieselFuelRestricted: Swift.Bool = false, isPetrolFuelRestricted: Swift.Bool = false, isLpgFuelRestricted: Swift.Bool = false, isCaravanRestricted: Swift.Bool = false, isTrailerRestricted: Swift.Bool = false, isDrivingWithoutSnowChainsRestricted: Swift.Bool = false, isDrivingWithoutWinterTyresRestricted: Swift.Bool = false, isEvenNumberPlateRestricted: Swift.Bool = false, isOddNumberPlateRestricted: Swift.Bool = false, isThroughTrafficRestricted: Swift.Bool = false, isResidentsTrafficRestricted: Swift.Bool = false, isDestinationInIncidentAreaRestricted: Swift.Bool = false, isEuro3EmissionStandardRestricted: Swift.Bool = false, isEuro4EmissionStandardRestricted: Swift.Bool = false, isEuro5EmissionStandardRestricted: Swift.Bool = false, restrictedIfGrossWeightMoreThanInKilograms: Swift.Int32? = nil, restrictedIfGrossWeightLessThanInKilograms: Swift.Int32? = nil, restrictedIfAxleWeightMoreThanInKilograms: Swift.Int32? = nil, restrictedIfAxleWeightLessThanInKilograms: Swift.Int32? = nil, restrictedIfLongerThanInCentimeters: Swift.Int32? = nil, restrictedIfShorterThanInCentimeters: Swift.Int32? = nil, restrictedIfHigherThanInCentimeters: Swift.Int32? = nil, restrictedIfLowerThanInCentimeters: Swift.Int32? = nil, restrictedIfWiderThanInCentimeters: Swift.Int32? = nil, restrictedIfNarrowerThanInCentimeters: Swift.Int32? = nil, restrictedIfOccupantsMoreThan: Swift.Int32? = nil, restrictedIfOccupantsFewerThan: Swift.Int32? = nil)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: heresdk.TrafficIncident.VehicleRestriction, b: heresdk.TrafficIncident.VehicleRestriction) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension heresdk.TrafficIncident : Swift.Hashable {
  public static func == (lhs: heresdk.TrafficIncident, rhs: heresdk.TrafficIncident) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias TrafficIncidentCompletionHandler = (heresdk.TrafficQueryError?, heresdk.TrafficIncident?) -> Swift.Void
public struct TrafficIncidentLookupOptions : Swift.Hashable {
  public var languageCode: heresdk.LanguageCode?
  public init(languageCode: heresdk.LanguageCode? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TrafficIncidentLookupOptions, b: heresdk.TrafficIncidentLookupOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias TrafficIncidentsQueryCompletionHandler = (heresdk.TrafficQueryError?, [heresdk.TrafficIncident]?) -> Swift.Void
public struct TrafficIncidentsQueryOptions : Swift.Hashable {
  public var typeFilter: [heresdk.TrafficIncidentType]
  public var impactFilter: [heresdk.TrafficIncidentImpact]
  public var earliestStartTime: Foundation.Date?
  public var latestEndTime: Foundation.Date?
  public var languageCode: heresdk.LanguageCode?
  public init(typeFilter: [heresdk.TrafficIncidentType] = [], impactFilter: [heresdk.TrafficIncidentImpact] = [], earliestStartTime: Foundation.Date? = nil, latestEndTime: Foundation.Date? = nil, languageCode: heresdk.LanguageCode? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TrafficIncidentsQueryOptions, b: heresdk.TrafficIncidentsQueryOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TrafficLocation : Swift.Hashable {
  public var description: Swift.String
  public var polyline: heresdk.GeoPolyline
  public var lengthInMeters: Swift.Int32
  public init(description: Swift.String = "", polyline: heresdk.GeoPolyline, lengthInMeters: Swift.Int32)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: heresdk.TrafficLocation, b: heresdk.TrafficLocation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum TrafficQueryError : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case failedToRetrieveResult
  case authenticationFailed
  case forbidden
  case serverUnreachable
  case timedOut
  case offline
  case httpError
  case invalidIn
  case invalidGeometry
  case invalidIncident
  case incidentIdNotFound
  case invalidFilterOptions
  case invalidParameter
  case internalError
  case operationCancelled
  case proxyAuthenticationFailed
  case proxyServerUnreachable
  case badRequest
  case tooManyRequests
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TrafficQueryError]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TrafficQueryError] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class TrafficDataProvider {
  @objc deinit
}
extension heresdk.TrafficDataProvider : Swift.Hashable {
  public static func == (lhs: heresdk.TrafficDataProvider, rhs: heresdk.TrafficDataProvider) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol TrafficFlowBase : AnyObject {
  var freeFlowSpeedInMetersPerSecond: Swift.Double { get }
  var jamFactor: Swift.Double { get }
}
public protocol TrafficIncidentBase : AnyObject {
  var impact: heresdk.TrafficIncidentImpact { get }
  var type: heresdk.TrafficIncidentType { get }
  var description: heresdk.LocalizedText { get }
  var startTime: Foundation.Date? { get }
  var endTime: Foundation.Date? { get }
}
public enum TrafficIncidentImpact : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case critical
  case major
  case minor
  case low
  case unknown
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TrafficIncidentImpact]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TrafficIncidentImpact] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum TrafficIncidentType : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case accident
  case congestion
  case construction
  case disabledVehicle
  case massTransit
  case plannedEvent
  case roadHazard
  case weather
  case roadClosure
  case laneRestriction
  case other
  case unknown
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.TrafficIncidentType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.TrafficIncidentType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum Traversability : Swift.UInt32, Swift.CaseIterable, Swift.Codable {
  case open
  case closed
  case reversibleNotRoutable
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [heresdk.Traversability]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [heresdk.Traversability] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
extension UIKit.UIColor {
  convenience public init(r red: CoreFoundation.CGFloat, g green: CoreFoundation.CGFloat, b blue: CoreFoundation.CGFloat, a alpha: CoreFoundation.CGFloat)
}
extension heresdk.GeoCoordinates {
  public static func == (lhs: heresdk.GeoCoordinates, rhs: heresdk.GeoCoordinates) -> Swift.Bool
}
extension heresdk.NetworkEndpoint {
  public static func == (lhs: heresdk.NetworkEndpoint, rhs: heresdk.NetworkEndpoint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
extension heresdk.ProxySettings {
  public static func == (lhs: heresdk.ProxySettings, rhs: heresdk.ProxySettings) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class SDKInternalInitializer : ObjectiveC.NSObject {
  @objc public func initializeInternalsIfNecessary()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class SDKNativeEngineHolder : ObjectiveC.NSObject {
  @objc deinit
}
public func makeIOSPlatformThreading() -> heresdk.PlatformThreading
public func synchronized<Result>(_ lock: Any, closure: () -> Result) -> Result
public typealias IconProviderCallback = (_ icon: UIKit.UIImage?, _ iconDescription: Swift.String?, _ error: heresdk.IconProviderError?) -> Swift.Void
public class IconProvider {
  public init(_ mapContext: heresdk.MapContext)
  public func createRoadShieldIcon(properties: heresdk.RoadShieldIconProperties, mapScheme: heresdk.MapScheme, assetType: heresdk.IconProviderAssetType, widthConstraintInPixels: Swift.UInt32, heightConstraintInPixels: Swift.UInt32, callback: @escaping heresdk.IconProviderCallback)
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @objc(HereMapView) @_Concurrency.MainActor(unsafe) open class MapView : UIKit.UIView, heresdk.MapViewBase {
  public typealias TakeScreenshotCallback = (UIKit.UIImage?) -> Swift.Void
  @_hasMissingDesignatedInitializers public class ViewPin {
    public var view: UIKit.UIView {
      get
    }
    public var geoCoordinates: heresdk.GeoCoordinates {
      get
      set
    }
    public func unpin()
    @objc deinit
  }
  @_Concurrency.MainActor(unsafe) public var camera: heresdk.MapCamera {
    get
  }
  @_Concurrency.MainActor(unsafe) public var gestures: heresdk.Gestures {
    get
  }
  @_Concurrency.MainActor(unsafe) public var mapScene: heresdk.MapScene {
    get
  }
  @_Concurrency.MainActor(unsafe) public var mapContext: heresdk.MapContext {
    get
  }
  @_Concurrency.MainActor(unsafe) public var hereMap: heresdk.HereMap {
    get
  }
  @_Concurrency.MainActor(unsafe) public var frameRate: Swift.Int32 {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var viewportSize: heresdk.Size2D {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var primaryLanguage: heresdk.LanguageCode? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public static var secondaryLanguage: heresdk.LanguageCode? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public static var shadowQuality: heresdk.ShadowQuality? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func pause()
  @_Concurrency.MainActor(unsafe) public func resume()
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override convenience dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) convenience public init(options: heresdk.MapViewOptions)
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreFoundation.CGRect, options: heresdk.MapViewOptions)
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreFoundation.CGRect, withSdkEngine sdkEngine: heresdk.SDKNativeEngine, options: heresdk.MapViewOptions)
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreFoundation.CGRect, withSdkEngine sdkEngine: heresdk.SDKNativeEngine)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, withSdkEngine sdkEngine: heresdk.SDKNativeEngine, withOptions options: heresdk.MapViewOptions?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var isValid: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public func geoToViewCoordinates(geoCoordinates: heresdk.GeoCoordinates) -> heresdk.Point2D?
  @_Concurrency.MainActor(unsafe) public func viewToGeoCoordinates(viewCoordinates: heresdk.Point2D) -> heresdk.GeoCoordinates?
  @available(*, deprecated, message: "Will be removed in v4.22.0. Use `pick(...)` instead.")
  @_Concurrency.MainActor(unsafe) public func pickMapItems(at centerPoint: heresdk.Point2D, radius: Swift.Double, completion callback: @escaping (heresdk.PickMapItemsResult?) -> Swift.Void)
  @available(*, deprecated, message: "Will be removed in v4.22.0. Use `pick(...)` instead.")
  @_Concurrency.MainActor(unsafe) public func pickMapContent(inside viewArea: heresdk.Rectangle2D, completion callback: @escaping (heresdk.PickMapContentResult?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func pick(filter: heresdk.MapScene.MapPickFilter?, inside viewArea: heresdk.Rectangle2D, completion callback: @escaping (heresdk.MapPickResult?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func takeScreenshot(callback: @escaping heresdk.MapView.TakeScreenshotCallback)
  @_Concurrency.MainActor(unsafe) public func addLifecycleDelegate(_ lifecycleListener: heresdk.MapViewLifecycleDelegate)
  @_Concurrency.MainActor(unsafe) public func removeLifecycleDelegate(_ lifecycleListener: heresdk.MapViewLifecycleDelegate)
  @_Concurrency.MainActor(unsafe) public func setWatermarkLocation(anchor: heresdk.Anchor2D, offset: heresdk.Point2D)
  @_Concurrency.MainActor(unsafe) public var pixelScale: Swift.Double {
    get
  }
  @_Concurrency.MainActor(unsafe) public var watermarkSize: heresdk.Size2D {
    get
  }
  @_Concurrency.MainActor(unsafe) public func pinView(_ view: UIKit.UIView, to coordinates: heresdk.GeoCoordinates) -> heresdk.MapView.ViewPin?
  @_Concurrency.MainActor(unsafe) public func unpinView(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public var viewPins: [heresdk.MapView.ViewPin] {
    get
  }
  @_Concurrency.MainActor(unsafe) public func handleLowMemory()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class SDKMapViewInitializer : ObjectiveC.NSObject {
  @objc public func initializeInternalsIfNecessary()
  @objc override dynamic public init()
  @objc deinit
}
extension heresdk.MapImage {
  convenience public init?(from uiImage: UIKit.UIImage) throws
  convenience public init(named name: Swift.String, width: Swift.Int32, height: Swift.Int32, in bundle: Foundation.Bundle? = nil) throws
}
extension heresdk.MetadataType : Swift.Equatable {}
extension heresdk.MetadataType : Swift.Hashable {}
extension heresdk.MetadataType : Swift.RawRepresentable {}
extension heresdk.RouteType : Swift.Equatable {}
extension heresdk.RouteType : Swift.Hashable {}
extension heresdk.RouteType : Swift.RawRepresentable {}
extension heresdk.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.HazardousMaterial : Swift.Equatable {}
extension heresdk.HazardousMaterial : Swift.Hashable {}
extension heresdk.HazardousMaterial : Swift.RawRepresentable {}
extension heresdk.TruckRoadType : Swift.Equatable {}
extension heresdk.TruckRoadType : Swift.Hashable {}
extension heresdk.TruckRoadType : Swift.RawRepresentable {}
extension heresdk.TruckType : Swift.Equatable {}
extension heresdk.TruckType : Swift.Hashable {}
extension heresdk.TruckType : Swift.RawRepresentable {}
extension heresdk.TunnelCategory : Swift.Equatable {}
extension heresdk.TunnelCategory : Swift.Hashable {}
extension heresdk.TunnelCategory : Swift.RawRepresentable {}
extension heresdk.RasterDataSourceError : Swift.Equatable {}
extension heresdk.RasterDataSourceError : Swift.Hashable {}
extension heresdk.RasterDataSourceError : Swift.RawRepresentable {}
extension heresdk.AnimationState : Swift.Equatable {}
extension heresdk.AnimationState : Swift.Hashable {}
extension heresdk.AnimationState : Swift.RawRepresentable {}
extension heresdk.Easing.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.Easing.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.Easing.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.EasingFunction : Swift.Equatable {}
extension heresdk.EasingFunction : Swift.Hashable {}
extension heresdk.EasingFunction : Swift.RawRepresentable {}
extension heresdk.KeyframeInterpolationMode : Swift.Equatable {}
extension heresdk.KeyframeInterpolationMode : Swift.Hashable {}
extension heresdk.KeyframeInterpolationMode : Swift.RawRepresentable {}
extension heresdk.MapItemKeyFrameTrack.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.MapItemKeyFrameTrack.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.MapItemKeyFrameTrack.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.MapMarkerAnimation.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.MapMarkerAnimation.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.MapMarkerAnimation.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.MapPolylineAnimation.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.MapPolylineAnimation.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.MapPolylineAnimation.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.DrawOrderType : Swift.Equatable {}
extension heresdk.DrawOrderType : Swift.Hashable {}
extension heresdk.DrawOrderType : Swift.RawRepresentable {}
extension heresdk.IconProviderAssetType : Swift.Equatable {}
extension heresdk.IconProviderAssetType : Swift.Hashable {}
extension heresdk.IconProviderAssetType : Swift.RawRepresentable {}
extension heresdk.IconProviderError : Swift.Equatable {}
extension heresdk.IconProviderError : Swift.Hashable {}
extension heresdk.IconProviderError : Swift.RawRepresentable {}
extension heresdk.ImageFormat : Swift.Equatable {}
extension heresdk.ImageFormat : Swift.Hashable {}
extension heresdk.ImageFormat : Swift.RawRepresentable {}
extension heresdk.JsonStyleFactory.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.JsonStyleFactory.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.JsonStyleFactory.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.LineCap : Swift.Equatable {}
extension heresdk.LineCap : Swift.Hashable {}
extension heresdk.LineCap : Swift.RawRepresentable {}
extension heresdk.MapCameraAnimation.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.MapCameraAnimation.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.MapCameraAnimation.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.MapCameraKeyframeTrack.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.MapCameraKeyframeTrack.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.MapCameraKeyframeTrack.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.MapCameraUpdate.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.MapCameraUpdate.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.MapCameraUpdate.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.MapContentCategory : Swift.Equatable {}
extension heresdk.MapContentCategory : Swift.Hashable {}
extension heresdk.MapContentCategory : Swift.RawRepresentable {}
extension heresdk.MapContentType : Swift.Equatable {}
extension heresdk.MapContentType : Swift.Hashable {}
extension heresdk.MapContentType : Swift.RawRepresentable {}
extension heresdk.MapContext.ResourceType : Swift.Equatable {}
extension heresdk.MapContext.ResourceType : Swift.Hashable {}
extension heresdk.MapContext.ResourceType : Swift.RawRepresentable {}
extension heresdk.MapContext.FreeResourceSeverity : Swift.Equatable {}
extension heresdk.MapContext.FreeResourceSeverity : Swift.Hashable {}
extension heresdk.MapContext.FreeResourceSeverity : Swift.RawRepresentable {}
extension heresdk.MapError : Swift.Equatable {}
extension heresdk.MapError : Swift.Hashable {}
extension heresdk.MapError : Swift.RawRepresentable {}
extension heresdk.MapLayerBuilder.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.MapLayerBuilder.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.MapLayerBuilder.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.MapMarker.TextStyle.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.MapMarker.TextStyle.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.MapMarker.TextStyle.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.MapMarker.TextStyle.Placement : Swift.Equatable {}
extension heresdk.MapMarker.TextStyle.Placement : Swift.Hashable {}
extension heresdk.MapMarker.TextStyle.Placement : Swift.RawRepresentable {}
extension heresdk.MapMarker3DModel.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.MapMarker3DModel.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.MapMarker3DModel.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.MapMeasure.Kind : Swift.Equatable {}
extension heresdk.MapMeasure.Kind : Swift.Hashable {}
extension heresdk.MapMeasure.Kind : Swift.RawRepresentable {}
extension heresdk.MapMeasureDependentRenderSize.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.MapMeasureDependentRenderSize.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.MapMeasureDependentRenderSize.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.MapPolyline.Representation.InstantiationErrorCode : Swift.Equatable {}
extension heresdk.MapPolyline.Representation.InstantiationErrorCode : Swift.Hashable {}
extension heresdk.MapPolyline.Representation.InstantiationErrorCode : Swift.RawRepresentable {}
extension heresdk.MapProjection : Swift.Equatable {}
extension heresdk.MapProjection : Swift.Hashable {}
extension heresdk.MapProjection : Swift.RawRepresentable {}
extension heresdk.MapScene.MapPickFilter.ContentType : Swift.Equatable {}
extension heresdk.MapScene.MapPickFilter.ContentType : Swift.Hashable {}
extension heresdk.MapScene.MapPickFilter.ContentType : Swift.RawRepresentable {}
extension heresdk.MapSceneLights.Category : Swift.Equatable {}
extension heresdk.MapSceneLights.Category : Swift.Hashable {}
extension heresdk.MapSceneLights.Category : Swift.RawRepresentable {}
extension heresdk.MapSceneLights.AttributeSettingError : Swift.Equatable {}
extension heresdk.MapSceneLights.AttributeSettingError : Swift.Hashable {}
extension heresdk.MapSceneLights.AttributeSettingError : Swift.RawRepresentable {}
extension heresdk.MapScheme : Swift.Equatable {}
extension heresdk.MapScheme : Swift.Hashable {}
extension heresdk.MapScheme : Swift.RawRepresentable {}
extension heresdk.RenderSize.Unit : Swift.Equatable {}
extension heresdk.RenderSize.Unit : Swift.Hashable {}
extension heresdk.RenderSize.Unit : Swift.RawRepresentable {}
extension heresdk.ShadowQuality : Swift.Equatable {}
extension heresdk.ShadowQuality : Swift.Hashable {}
extension heresdk.ShadowQuality : Swift.RawRepresentable {}
extension heresdk.VisibilityState : Swift.Equatable {}
extension heresdk.VisibilityState : Swift.Hashable {}
extension heresdk.VisibilityState : Swift.RawRepresentable {}
extension heresdk.WatermarkStyle : Swift.Equatable {}
extension heresdk.WatermarkStyle : Swift.Hashable {}
extension heresdk.WatermarkStyle : Swift.RawRepresentable {}
extension heresdk.DataAttributeValue.ValueType : Swift.Equatable {}
extension heresdk.DataAttributeValue.ValueType : Swift.Hashable {}
extension heresdk.DataAttributeValue.ValueType : Swift.RawRepresentable {}
extension heresdk.TilingScheme : Swift.Equatable {}
extension heresdk.TilingScheme : Swift.Hashable {}
extension heresdk.TilingScheme : Swift.RawRepresentable {}
extension heresdk.AuthenticationError : Swift.Equatable {}
extension heresdk.AuthenticationError : Swift.Hashable {}
extension heresdk.AuthenticationError : Swift.RawRepresentable {}
extension heresdk.CardinalDirection : Swift.Equatable {}
extension heresdk.CardinalDirection : Swift.Hashable {}
extension heresdk.CardinalDirection : Swift.RawRepresentable {}
extension heresdk.CountryCode : Swift.Equatable {}
extension heresdk.CountryCode : Swift.Hashable {}
extension heresdk.CountryCode : Swift.RawRepresentable {}
extension heresdk.LanguageCode : Swift.Equatable {}
extension heresdk.LanguageCode : Swift.Hashable {}
extension heresdk.LanguageCode : Swift.RawRepresentable {}
extension heresdk.LocationTechnology : Swift.Equatable {}
extension heresdk.LocationTechnology : Swift.Hashable {}
extension heresdk.LocationTechnology : Swift.RawRepresentable {}
extension heresdk.UnitSystem : Swift.Equatable {}
extension heresdk.UnitSystem : Swift.Hashable {}
extension heresdk.UnitSystem : Swift.RawRepresentable {}
extension heresdk.CatalogType : Swift.Equatable {}
extension heresdk.CatalogType : Swift.Hashable {}
extension heresdk.CatalogType : Swift.RawRepresentable {}
extension heresdk.EngineBaseURL : Swift.Equatable {}
extension heresdk.EngineBaseURL : Swift.Hashable {}
extension heresdk.EngineBaseURL : Swift.RawRepresentable {}
extension heresdk.LayerConfiguration.Feature : Swift.Equatable {}
extension heresdk.LayerConfiguration.Feature : Swift.Hashable {}
extension heresdk.LayerConfiguration.Feature : Swift.RawRepresentable {}
extension heresdk.LayerConfiguration.Feature.Key : Swift.Equatable {}
extension heresdk.LayerConfiguration.Feature.Key : Swift.Hashable {}
extension heresdk.LayerConfiguration.Feature.CodingError : Swift.Equatable {}
extension heresdk.LayerConfiguration.Feature.CodingError : Swift.Hashable {}
extension heresdk.LogLevel : Swift.Equatable {}
extension heresdk.LogLevel : Swift.Hashable {}
extension heresdk.LogLevel : Swift.RawRepresentable {}
extension heresdk.PassThroughFeature : Swift.Equatable {}
extension heresdk.PassThroughFeature : Swift.Hashable {}
extension heresdk.PassThroughFeature : Swift.RawRepresentable {}
extension heresdk.ProxySettings.ProxyType : Swift.Equatable {}
extension heresdk.ProxySettings.ProxyType : Swift.Hashable {}
extension heresdk.ProxySettings.ProxyType : Swift.RawRepresentable {}
extension heresdk.UsageStats.Feature : Swift.Equatable {}
extension heresdk.UsageStats.Feature : Swift.Hashable {}
extension heresdk.UsageStats.Feature : Swift.RawRepresentable {}
extension heresdk.TaskOutcome : Swift.Equatable {}
extension heresdk.TaskOutcome : Swift.Hashable {}
extension heresdk.TaskOutcome : Swift.RawRepresentable {}
extension heresdk.AccessAttributes : Swift.Equatable {}
extension heresdk.AccessAttributes : Swift.Hashable {}
extension heresdk.AccessAttributes : Swift.RawRepresentable {}
extension heresdk.FunctionalRoadClass : Swift.Equatable {}
extension heresdk.FunctionalRoadClass : Swift.Hashable {}
extension heresdk.FunctionalRoadClass : Swift.RawRepresentable {}
extension heresdk.StreetAttributes : Swift.Equatable {}
extension heresdk.StreetAttributes : Swift.Hashable {}
extension heresdk.StreetAttributes : Swift.RawRepresentable {}
extension heresdk.TravelDirection : Swift.Equatable {}
extension heresdk.TravelDirection : Swift.Hashable {}
extension heresdk.TravelDirection : Swift.RawRepresentable {}
extension heresdk.WalkAttributes : Swift.Equatable {}
extension heresdk.WalkAttributes : Swift.Hashable {}
extension heresdk.WalkAttributes : Swift.RawRepresentable {}
extension heresdk.EmissionStandard : Swift.Equatable {}
extension heresdk.EmissionStandard : Swift.Hashable {}
extension heresdk.EmissionStandard : Swift.RawRepresentable {}
extension heresdk.FuelAdditiveType : Swift.Equatable {}
extension heresdk.FuelAdditiveType : Swift.Hashable {}
extension heresdk.FuelAdditiveType : Swift.RawRepresentable {}
extension heresdk.FuelCategory : Swift.Equatable {}
extension heresdk.FuelCategory : Swift.Hashable {}
extension heresdk.FuelCategory : Swift.RawRepresentable {}
extension heresdk.FuelType : Swift.Equatable {}
extension heresdk.FuelType : Swift.Hashable {}
extension heresdk.FuelType : Swift.RawRepresentable {}
extension heresdk.PlateNumberType : Swift.Equatable {}
extension heresdk.PlateNumberType : Swift.Hashable {}
extension heresdk.PlateNumberType : Swift.RawRepresentable {}
extension heresdk.TransportMode : Swift.Equatable {}
extension heresdk.TransportMode : Swift.Hashable {}
extension heresdk.TransportMode : Swift.RawRepresentable {}
extension heresdk.TruckClass : Swift.Equatable {}
extension heresdk.TruckClass : Swift.Hashable {}
extension heresdk.TruckClass : Swift.RawRepresentable {}
extension heresdk.TruckFuelType : Swift.Equatable {}
extension heresdk.TruckFuelType : Swift.Hashable {}
extension heresdk.TruckFuelType : Swift.RawRepresentable {}
extension heresdk.VehicleType : Swift.Equatable {}
extension heresdk.VehicleType : Swift.Hashable {}
extension heresdk.VehicleType : Swift.RawRepresentable {}
extension heresdk.GestureState : Swift.Equatable {}
extension heresdk.GestureState : Swift.Hashable {}
extension heresdk.GestureState : Swift.RawRepresentable {}
extension heresdk.GestureType : Swift.Equatable {}
extension heresdk.GestureType : Swift.Hashable {}
extension heresdk.GestureType : Swift.RawRepresentable {}
extension heresdk.LocationIndicator.IndicatorStyle : Swift.Equatable {}
extension heresdk.LocationIndicator.IndicatorStyle : Swift.Hashable {}
extension heresdk.LocationIndicator.IndicatorStyle : Swift.RawRepresentable {}
extension heresdk.LocationIndicator.MarkerType : Swift.Equatable {}
extension heresdk.LocationIndicator.MarkerType : Swift.Hashable {}
extension heresdk.LocationIndicator.MarkerType : Swift.RawRepresentable {}
extension heresdk.MapContentSettings.TrafficRefreshPeriodErrorCode : Swift.Equatable {}
extension heresdk.MapContentSettings.TrafficRefreshPeriodErrorCode : Swift.Hashable {}
extension heresdk.MapContentSettings.TrafficRefreshPeriodErrorCode : Swift.RawRepresentable {}
extension heresdk.AttributionType : Swift.Equatable {}
extension heresdk.AttributionType : Swift.Hashable {}
extension heresdk.AttributionType : Swift.RawRepresentable {}
extension heresdk.ChargingConnectorType : Swift.Equatable {}
extension heresdk.ChargingConnectorType : Swift.Hashable {}
extension heresdk.ChargingConnectorType : Swift.RawRepresentable {}
extension heresdk.ChargingSupplyType : Swift.Equatable {}
extension heresdk.ChargingSupplyType : Swift.Hashable {}
extension heresdk.ChargingSupplyType : Swift.RawRepresentable {}
extension heresdk.FarePriceType : Swift.Equatable {}
extension heresdk.FarePriceType : Swift.Hashable {}
extension heresdk.FarePriceType : Swift.RawRepresentable {}
extension heresdk.FareReason : Swift.Equatable {}
extension heresdk.FareReason : Swift.Hashable {}
extension heresdk.FareReason : Swift.RawRepresentable {}
extension heresdk.LocalizedTextPreference : Swift.Equatable {}
extension heresdk.LocalizedTextPreference : Swift.Hashable {}
extension heresdk.LocalizedTextPreference : Swift.RawRepresentable {}
extension heresdk.ManeuverAction : Swift.Equatable {}
extension heresdk.ManeuverAction : Swift.Hashable {}
extension heresdk.ManeuverAction : Swift.RawRepresentable {}
extension heresdk.MatchSideOfStreet : Swift.Equatable {}
extension heresdk.MatchSideOfStreet : Swift.Hashable {}
extension heresdk.MatchSideOfStreet : Swift.RawRepresentable {}
extension heresdk.NoticeSeverity : Swift.Equatable {}
extension heresdk.NoticeSeverity : Swift.Hashable {}
extension heresdk.NoticeSeverity : Swift.RawRepresentable {}
extension heresdk.OptimizationMode : Swift.Equatable {}
extension heresdk.OptimizationMode : Swift.Hashable {}
extension heresdk.OptimizationMode : Swift.RawRepresentable {}
extension heresdk.PaymentMethod : Swift.Equatable {}
extension heresdk.PaymentMethod : Swift.Hashable {}
extension heresdk.PaymentMethod : Swift.RawRepresentable {}
extension heresdk.PostActionType : Swift.Equatable {}
extension heresdk.PostActionType : Swift.Hashable {}
extension heresdk.PostActionType : Swift.RawRepresentable {}
extension heresdk.PreActionType : Swift.Equatable {}
extension heresdk.PreActionType : Swift.Hashable {}
extension heresdk.PreActionType : Swift.RawRepresentable {}
extension heresdk.RoadFeatures : Swift.Equatable {}
extension heresdk.RoadFeatures : Swift.Hashable {}
extension heresdk.RoadFeatures : Swift.RawRepresentable {}
extension heresdk.RoadType : Swift.Equatable {}
extension heresdk.RoadType : Swift.Hashable {}
extension heresdk.RoadType : Swift.RawRepresentable {}
extension heresdk.RoutePlaceDirection : Swift.Equatable {}
extension heresdk.RoutePlaceDirection : Swift.Hashable {}
extension heresdk.RoutePlaceDirection : Swift.RawRepresentable {}
extension heresdk.RoutePlaceType : Swift.Equatable {}
extension heresdk.RoutePlaceType : Swift.Hashable {}
extension heresdk.RoutePlaceType : Swift.RawRepresentable {}
extension heresdk.RouteRailwayCrossingType : Swift.Equatable {}
extension heresdk.RouteRailwayCrossingType : Swift.Hashable {}
extension heresdk.RouteRailwayCrossingType : Swift.RawRepresentable {}
extension heresdk.RoutingError : Swift.Equatable {}
extension heresdk.RoutingError : Swift.Hashable {}
extension heresdk.RoutingError : Swift.RawRepresentable {}
extension heresdk.SectionNoticeCode : Swift.Equatable {}
extension heresdk.SectionNoticeCode : Swift.Hashable {}
extension heresdk.SectionNoticeCode : Swift.RawRepresentable {}
extension heresdk.SectionTransportMode : Swift.Equatable {}
extension heresdk.SectionTransportMode : Swift.Hashable {}
extension heresdk.SectionTransportMode : Swift.RawRepresentable {}
extension heresdk.SideOfDestination : Swift.Equatable {}
extension heresdk.SideOfDestination : Swift.Hashable {}
extension heresdk.SideOfDestination : Swift.RawRepresentable {}
extension heresdk.TollOptions.VehicleCategory : Swift.Equatable {}
extension heresdk.TollOptions.VehicleCategory : Swift.Hashable {}
extension heresdk.TollOptions.VehicleCategory : Swift.RawRepresentable {}
extension heresdk.TollOptions.EmissionType : Swift.Equatable {}
extension heresdk.TollOptions.EmissionType : Swift.Hashable {}
extension heresdk.TollOptions.EmissionType : Swift.RawRepresentable {}
extension heresdk.TrafficOptimizationMode : Swift.Equatable {}
extension heresdk.TrafficOptimizationMode : Swift.Hashable {}
extension heresdk.TrafficOptimizationMode : Swift.RawRepresentable {}
extension heresdk.TransitDepartureStatus : Swift.Equatable {}
extension heresdk.TransitDepartureStatus : Swift.Hashable {}
extension heresdk.TransitDepartureStatus : Swift.RawRepresentable {}
extension heresdk.TransitIncidentEffect : Swift.Equatable {}
extension heresdk.TransitIncidentEffect : Swift.Hashable {}
extension heresdk.TransitIncidentEffect : Swift.RawRepresentable {}
extension heresdk.TransitIncidentType : Swift.Equatable {}
extension heresdk.TransitIncidentType : Swift.Hashable {}
extension heresdk.TransitIncidentType : Swift.RawRepresentable {}
extension heresdk.TransitMode : Swift.Equatable {}
extension heresdk.TransitMode : Swift.Hashable {}
extension heresdk.TransitMode : Swift.RawRepresentable {}
extension heresdk.TransitModeFilter : Swift.Equatable {}
extension heresdk.TransitModeFilter : Swift.Hashable {}
extension heresdk.TransitModeFilter : Swift.RawRepresentable {}
extension heresdk.WaypointType : Swift.Equatable {}
extension heresdk.WaypointType : Swift.Hashable {}
extension heresdk.WaypointType : Swift.RawRepresentable {}
extension heresdk.ZoneCategory : Swift.Equatable {}
extension heresdk.ZoneCategory : Swift.Hashable {}
extension heresdk.ZoneCategory : Swift.RawRepresentable {}
extension heresdk.IsolineCalculationMode : Swift.Equatable {}
extension heresdk.IsolineCalculationMode : Swift.Hashable {}
extension heresdk.IsolineCalculationMode : Swift.RawRepresentable {}
extension heresdk.IsolineRangeType : Swift.Equatable {}
extension heresdk.IsolineRangeType : Swift.Hashable {}
extension heresdk.IsolineRangeType : Swift.RawRepresentable {}
extension heresdk.AddressType : Swift.Equatable {}
extension heresdk.AddressType : Swift.Hashable {}
extension heresdk.AddressType : Swift.RawRepresentable {}
extension heresdk.AreaType : Swift.Equatable {}
extension heresdk.AreaType : Swift.Hashable {}
extension heresdk.AreaType : Swift.RawRepresentable {}
extension heresdk.EVSEStatus : Swift.Equatable {}
extension heresdk.EVSEStatus : Swift.Hashable {}
extension heresdk.EVSEStatus : Swift.RawRepresentable {}
extension heresdk.HighlightType : Swift.Equatable {}
extension heresdk.HighlightType : Swift.Hashable {}
extension heresdk.HighlightType : Swift.RawRepresentable {}
extension heresdk.PlaceSerializationError : Swift.Equatable {}
extension heresdk.PlaceSerializationError : Swift.Hashable {}
extension heresdk.PlaceSerializationError : Swift.RawRepresentable {}
extension heresdk.PlaceType : Swift.Equatable {}
extension heresdk.PlaceType : Swift.Hashable {}
extension heresdk.PlaceType : Swift.RawRepresentable {}
extension heresdk.SearchError : Swift.Equatable {}
extension heresdk.SearchError : Swift.Hashable {}
extension heresdk.SearchError : Swift.RawRepresentable {}
extension heresdk.StructuredQuery.ResultType : Swift.Equatable {}
extension heresdk.StructuredQuery.ResultType : Swift.Hashable {}
extension heresdk.StructuredQuery.ResultType : Swift.RawRepresentable {}
extension heresdk.SuggestionType : Swift.Equatable {}
extension heresdk.SuggestionType : Swift.Hashable {}
extension heresdk.SuggestionType : Swift.RawRepresentable {}
extension heresdk.JunctionsTraversability : Swift.Equatable {}
extension heresdk.JunctionsTraversability : Swift.Hashable {}
extension heresdk.JunctionsTraversability : Swift.RawRepresentable {}
extension heresdk.TrafficIncident.RestrictedVehicleCategory : Swift.Equatable {}
extension heresdk.TrafficIncident.RestrictedVehicleCategory : Swift.Hashable {}
extension heresdk.TrafficIncident.RestrictedVehicleCategory : Swift.RawRepresentable {}
extension heresdk.TrafficQueryError : Swift.Equatable {}
extension heresdk.TrafficQueryError : Swift.Hashable {}
extension heresdk.TrafficQueryError : Swift.RawRepresentable {}
extension heresdk.TrafficIncidentImpact : Swift.Equatable {}
extension heresdk.TrafficIncidentImpact : Swift.Hashable {}
extension heresdk.TrafficIncidentImpact : Swift.RawRepresentable {}
extension heresdk.TrafficIncidentType : Swift.Equatable {}
extension heresdk.TrafficIncidentType : Swift.Hashable {}
extension heresdk.TrafficIncidentType : Swift.RawRepresentable {}
extension heresdk.Traversability : Swift.Equatable {}
extension heresdk.Traversability : Swift.Hashable {}
extension heresdk.Traversability : Swift.RawRepresentable {}
